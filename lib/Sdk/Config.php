<?php

/**
 * Configuration
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Sdk;

/**
 * Configuration
 */
class Config {

    /**
     * Blockchain networks
     */
    const NETWORK_MAINNET = 'MainNet';
    const NETWORK_TESTNET = 'TestNet';

    /**
     * Current network
     * 
     * @var string
     */
    protected $_network = self::NETWORK_TESTNET;

    /**
     * API Key
     *
     * @var string
     */
    protected $_apiKey = '';

    /**
     * The host
     * 
     * @var string
     */
    protected $_host = 'https://api.tatum.io';

    /**
     * User agent of the HTTP request, set to "Tatum_SDK_PHP/2.0.0" by default
     * 
     * @var string
     */
    protected $_userAgent = 'Tatum_SDK_PHP/2.0.0';

    /**
     * Debug switch (default set to false)
     *
     * @var bool
     */
    protected $_debug = false;

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var string
     */
    protected $_debugFile = 'php://output';

    /**
     * Debug file location (log to STDOUT by default)
     * 
     * @var string
     */
    protected $_tempFolderPath;

    /**
     * Constructor
     * 
     * @param string $apiKey    API Key
     * @param bool   $isMainNet MainNet configuration
     */
    public function __construct(string $apiKey, bool $isMainNet) {
        $this->setApiKey($apiKey);
        $this->setMainNet(!!$isMainNet);
        $this->setTempFolderPath(sys_get_temp_dir());
    }

    /**
     * Set the API key
     *
     * @param string $key API key or token
     *
     * @return $this
     */
    public function setApiKey(string $key) {
        $this->_apiKey = "$key";

        return $this;
    }

    /**
     * Get the API key
     *
     * @return string API key
     */
    public function getApiKey(): string {
        return $this->_apiKey;
    }

    /**
     * Set the network
     *
     * @param bool $mainNetwork True for MainNet, false for TestNet
     * @return $this
     */
    public function setMainNet(bool $mainNetwork) {
        $this->_network = $mainNetwork ? self::NETWORK_MAINNET : self::NETWORK_TESTNET;

        return $this;
    }

    /**
     * Are we using the MainNet?
     *
     * @return bool True for MainNet, false for TestNet
     */
    public function isMainNet(): bool {
        return self::NETWORK_MAINNET === $this->_network;
    }

    /**
     * Get the host
     *
     * @return string Host
     */
    public function getHost(): string {
        return $this->_host;
    }

    /**
     * Set the User Agent
     *
     * @param string $userAgent User Agent
     * @retur $this
     */
    public function setUserAgent(string $userAgent) {
        $this->_userAgent = "$userAgent";

        return $this;
    }

    /**
     * Get the User Agent
     *
     * @return string User agent
     */
    public function getUserAgent(): string {
        return $this->_userAgent;
    }

    /**
     * Set the debug flag
     *
     * @param bool $debug Debug flag
     * @return $this
     */
    public function setDebug(bool $debug) {
        $this->_debug = $debug;

        return $this;
    }

    /**
     * Get the debug flag
     *
     * @return bool
     */
    public function getDebug(): bool {
        return $this->_debug;
    }

    /**
     * Set the debug file
     *
     * @param string $debugFile Debug file
     * @return $this
     */
    public function setDebugFile(string $debugFile) {
        $this->_debugFile = $debugFile;

        return $this;
    }

    /**
     * Get the debug file
     *
     * @return string
     */
    public function getDebugFile(): string {
        return $this->_debugFile;
    }

    /**
     * Sets the temp folder path
     *
     * @param string $tempFolderPath Temp folder path
     *
     * @return $this
     */
    public function setTempFolderPath(string $tempFolderPath) {
        $this->_tempFolderPath = $tempFolderPath;

        return $this;
    }

    /**
     * Gets the temp folder path
     *
     * @return string Temp folder path
     */
    public function getTempFolderPath(): string {
        return $this->_tempFolderPath;
    }

    /**
     * Get the essential information for debugging
     *
     * @return string The report for debugging
     */
    public function getReport(): string {
        $report  = 'PHP SDK (Tatum) Debug Report:' . PHP_EOL;
        $report .= '    OS: ' . php_uname() . PHP_EOL;
        $report .= '    PHP Version: ' . PHP_VERSION . PHP_EOL;
        $report .= '    OpenAPI Spec Version: 3.17.0' . PHP_EOL;
        $report .= '    SDK Package Version: 2.0.0' . PHP_EOL;
        $report .= '    Temp Folder Path: ' . $this->getTempFolderPath() . PHP_EOL;

        return $report;
    }

    /**
     * Return URL based on the index and variables
     *
     * @param array<string, mixed>[]|null $variables Hash of variable and the corresponding value (optional)
     * @param int                         $index     Index of the host settings
     * @return string URL based on host settings
     */
    public function getHostFromSettings(?array $variables = null, int $index = 0): string {
        if (null === $variables) {
            $variables = [];
        }

        $hosts = [
            [
                "url" => "https://api.tatum.io",
                "description" => "No description provided",
            ]
        ];

        // Check array index out of bound
        if ($index < 0 || $index >= sizeof($hosts)) {
            throw new \InvalidArgumentException(
                "Invalid index $index when selecting the host. Must be less than " . count($hosts)
            );
        }

        $host = $hosts[$index];
        $url = $host["url"];

        // go through variable and assign a value
        foreach ($host["variables"] ?? [] as $name => $variable) {
            if (array_key_exists($name, $variables)) { // check to see if it's in the variables provided by the user
                if (in_array($variables[$name], $variable["enum_values"], true)) {
                    $url = str_replace("{" . $name . "}", $variables[$name], $url);
                } else {
                    throw new \InvalidArgumentException(
                        "The variable '$name' in the host URL has invalid value " . var_export($variables[$name], true) . '. '
                        . 'Must be ' . join(',', $variable['enum_values']) . '.'
                    );
                }
            } else {
                $url = str_replace("{" . $name . "}", $variable["default_value"], $url);
            }
        }

        return $url;
    }
}
