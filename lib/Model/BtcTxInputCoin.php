<?php

/**
 * BtcTxInputCoin Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * BtcTxInputCoin Model
 */
class BtcTxInputCoin extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "BtcTxInputCoin";
    protected static $_definition = [
        "version" => ["version", "float", null, "getVersion", "setVersion"], 
        "block_number" => ["blockNumber", "float", null, "getBlockNumber", "setBlockNumber"], 
        "value" => ["value", "float", null, "getValue", "setValue"], 
        "script" => ["script", "string", null, "getScript", "setScript"], 
        "address" => ["address", "string", null, "getAddress", "setAddress"], 
        "coinbase" => ["coinbase", "bool", null, "getCoinbase", "setCoinbase"]
    ];

    /**
     * BtcTxInputCoin
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["version"=>null, "block_number"=>null, "value"=>null, "script"=>null, "address"=>null, "coinbase"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        
        return $ip;
    }

    /**
     * Get version
     *
     * @return float|null
     */
    public function getVersion(): ?float {
        return $this->_data["version"];
    }

    /**
     * Set version
     * 
     * @param float|null $version version
     * @return $this
     */
    public function setVersion(?float $version) {
        $this->_data['version'] = $version;

        return $this;
    }

    /**
     * Get block_number
     *
     * @return float|null
     */
    public function getBlockNumber(): ?float {
        return $this->_data["block_number"];
    }

    /**
     * Set block_number
     * 
     * @param float|null $block_number block_number
     * @return $this
     */
    public function setBlockNumber(?float $block_number) {
        $this->_data['block_number'] = $block_number;

        return $this;
    }

    /**
     * Get value
     *
     * @return float|null
     */
    public function getValue(): ?float {
        return $this->_data["value"];
    }

    /**
     * Set value
     * 
     * @param float|null $value Amount of the transaction, in Satoshis (1 BTC = 100 000 000 Satoshis)
     * @return $this
     */
    public function setValue(?float $value) {
        $this->_data['value'] = $value;

        return $this;
    }

    /**
     * Get script
     *
     * @return string|null
     */
    public function getScript(): ?string {
        return $this->_data["script"];
    }

    /**
     * Set script
     * 
     * @param string|null $script script
     * @return $this
     */
    public function setScript(?string $script) {
        $this->_data['script'] = $script;

        return $this;
    }

    /**
     * Get address
     *
     * @return string|null
     */
    public function getAddress(): ?string {
        return $this->_data["address"];
    }

    /**
     * Set address
     * 
     * @param string|null $address Sender address.
     * @return $this
     */
    public function setAddress(?string $address) {
        $this->_data['address'] = $address;

        return $this;
    }

    /**
     * Get coinbase
     *
     * @return bool|null
     */
    public function getCoinbase(): ?bool {
        return $this->_data["coinbase"];
    }

    /**
     * Set coinbase
     * 
     * @param bool|null $coinbase Coinbase transaction - miner fee.
     * @return $this
     */
    public function setCoinbase(?bool $coinbase) {
        $this->_data['coinbase'] = $coinbase;

        return $this;
    }
}
