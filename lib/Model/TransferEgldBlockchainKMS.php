<?php

/**
 * TransferEgldBlockchainKMS Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TransferEgldBlockchainKMS Model
 */
class TransferEgldBlockchainKMS extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "TransferEgldBlockchainKMS";
    protected static $_definition = [
        "from" => ["from", "string", null, "getFrom", "setFrom"], 
        "to" => ["to", "string", null, "getTo", "setTo"], 
        "amount" => ["amount", "string", null, "getAmount", "setAmount"], 
        "fee" => ["fee", "\Tatum\Model\TransferEgldBlockchainKMSFee", null, "getFee", "setFee"], 
        "data" => ["data", "string", null, "getData", "setData"], 
        "index" => ["index", "float", null, "getIndex", "setIndex"], 
        "signature_id" => ["signatureId", "string", 'uuid', "getSignatureId", "setSignatureId"]
    ];

    /**
     * TransferEgldBlockchainKMS
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["from"=>null, "to"=>null, "amount"=>null, "fee"=>null, "data"=>null, "index"=>null, "signature_id"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if ((mb_strlen($this->_data['from']) > 62)) {
            $ip[] = "'from' length must be <= 62";
        }
        if ((mb_strlen($this->_data['from']) < 62)) {
            $ip[] = "'from' length must be >= 62";
        }
        if (is_null($this->_data['to'])) {
            $ip[] = "'to' can't be null";
        }
        if ((mb_strlen($this->_data['to']) > 62)) {
            $ip[] = "'to' length must be <= 62";
        }
        if ((mb_strlen($this->_data['to']) < 62)) {
            $ip[] = "'to' length must be >= 62";
        }
        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if (!is_null($this->_data['index']) && ($this->_data['index'] < 0)) {
            $ip[] = "'index' must be >= 0";
        }
        if (is_null($this->_data['signature_id'])) {
            $ip[] = "'signature_id' can't be null";
        }
        
        return $ip;
    }

    /**
     * Get from
     *
     * @return string
     */
    public function getFrom(): string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string $from Account address of the sender
     * @return $this
     */
    public function setFrom(string $from) {
        if ((mb_strlen($from) > 62)) {
            throw new IAE('TransferEgldBlockchainKMS.setFrom: $from length must be <= 62');
        }
        if ((mb_strlen($from) < 62)) {
            throw new IAE('TransferEgldBlockchainKMS.setFrom: $from length must be >= 62');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get to
     *
     * @return string
     */
    public function getTo(): string {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param string $to Account address of the receiver or smart contract
     * @return $this
     */
    public function setTo(string $to) {
        if ((mb_strlen($to) > 62)) {
            throw new IAE('TransferEgldBlockchainKMS.setTo: $to length must be <= 62');
        }
        if ((mb_strlen($to) < 62)) {
            throw new IAE('TransferEgldBlockchainKMS.setTo: $to length must be >= 62');
        }
        $this->_data['to'] = $to;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Value to be sent.
     * @return $this
     */
    public function setAmount(string $amount) {
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get fee
     *
     * @return \Tatum\Model\TransferEgldBlockchainKMSFee|null
     */
    public function getFee(): ?\Tatum\Model\TransferEgldBlockchainKMSFee {
        return $this->_data["fee"];
    }

    /**
     * Set fee
     * 
     * @param \Tatum\Model\TransferEgldBlockchainKMSFee|null $fee fee
     * @return $this
     */
    public function setFee(?\Tatum\Model\TransferEgldBlockchainKMSFee $fee) {
        $this->_data['fee'] = $fee;

        return $this;
    }

    /**
     * Get data
     *
     * @return string|null
     */
    public function getData(): ?string {
        return $this->_data["data"];
    }

    /**
     * Set data
     * 
     * @param string|null $data Additional data that can be passed to a blockchain transaction as a data property; must be in the hexadecimal format
     * @return $this
     */
    public function setData(?string $data) {
        $this->_data['data'] = $data;

        return $this;
    }

    /**
     * Get index
     *
     * @return float|null
     */
    public function getIndex(): ?float {
        return $this->_data["index"];
    }

    /**
     * Set index
     * 
     * @param float|null $index If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
     * @return $this
     */
    public function setIndex(?float $index) {
        if (!is_null($index) && ($index < 0)) {
            throw new IAE('TransferEgldBlockchainKMS.setIndex: $index must be >=0');
        }
        $this->_data['index'] = $index;

        return $this;
    }

    /**
     * Get signature_id
     *
     * @return string
     */
    public function getSignatureId(): string {
        return $this->_data["signature_id"];
    }

    /**
     * Set signature_id
     * 
     * @param string $signature_id Identifier of the private key associated in signing application. Private key, or signature Id must be present.
     * @return $this
     */
    public function setSignatureId(string $signature_id) {
        $this->_data['signature_id'] = $signature_id;

        return $this;
    }
}
