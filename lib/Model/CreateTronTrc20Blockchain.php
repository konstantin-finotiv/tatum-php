<?php

/**
 * CreateTronTrc20Blockchain Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * CreateTronTrc20Blockchain Model
 */
class CreateTronTrc20Blockchain extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "CreateTronTrc20Blockchain";
    protected static $_definition = [
        "from_private_key" => ["fromPrivateKey", "string", null, "getFromPrivateKey", "setFromPrivateKey", null], 
        "recipient" => ["recipient", "string", null, "getRecipient", "setRecipient", null], 
        "name" => ["name", "string", null, "getName", "setName", null], 
        "symbol" => ["symbol", "string", null, "getSymbol", "setSymbol", null], 
        "total_supply" => ["totalSupply", "float", null, "getTotalSupply", "setTotalSupply", null], 
        "decimals" => ["decimals", "float", null, "getDecimals", "setDecimals", null]
    ];

    /**
     * CreateTronTrc20Blockchain
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['from_private_key'])) {
            $ip[] = "'from_private_key' can't be null";
        }
        if ((mb_strlen($this->_data['from_private_key']) > 64)) {
            $ip[] = "'from_private_key' length must be <= 64";
        }
        if ((mb_strlen($this->_data['from_private_key']) < 64)) {
            $ip[] = "'from_private_key' length must be >= 64";
        }
        if (is_null($this->_data['recipient'])) {
            $ip[] = "'recipient' can't be null";
        }
        if ((mb_strlen($this->_data['recipient']) > 34)) {
            $ip[] = "'recipient' length must be <= 34";
        }
        if ((mb_strlen($this->_data['recipient']) < 34)) {
            $ip[] = "'recipient' length must be >= 34";
        }
        if (is_null($this->_data['name'])) {
            $ip[] = "'name' can't be null";
        }
        if ((mb_strlen($this->_data['name']) > 100)) {
            $ip[] = "'name' length must be <= 100";
        }
        if ((mb_strlen($this->_data['name']) < 1)) {
            $ip[] = "'name' length must be >= 1";
        }
        if (is_null($this->_data['symbol'])) {
            $ip[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->_data['symbol']) > 100)) {
            $ip[] = "'symbol' length must be <= 100";
        }
        if ((mb_strlen($this->_data['symbol']) < 1)) {
            $ip[] = "'symbol' length must be >= 1";
        }
        if (is_null($this->_data['total_supply'])) {
            $ip[] = "'total_supply' can't be null";
        }
        if (($this->_data['total_supply'] < 0)) {
            $ip[] = "'total_supply' must be >= 0";
        }
        if (is_null($this->_data['decimals'])) {
            $ip[] = "'decimals' can't be null";
        }
        if (($this->_data['decimals'] > 30)) {
            $ip[] = "'decimals' must be <= 30";
        }
        if (($this->_data['decimals'] < 0)) {
            $ip[] = "'decimals' must be >= 0";
        }
        return $ip;
    }


    /**
     * Get from_private_key
     *
     * @return string
     */
    public function getFromPrivateKey(): string {
        return $this->_data["from_private_key"];
    }

    /**
     * Set from_private_key
     * 
     * @param string $from_private_key Private key of the address, from which the TRX will be sent.
     * @return $this
     */
    public function setFromPrivateKey(string $from_private_key) {
        if ((mb_strlen($from_private_key) > 64)) {
            throw new IAE('CreateTronTrc20Blockchain.setFromPrivateKey: $from_private_key length must be <= 64');
        }
        if ((mb_strlen($from_private_key) < 64)) {
            throw new IAE('CreateTronTrc20Blockchain.setFromPrivateKey: $from_private_key length must be >= 64');
        }
        $this->_data['from_private_key'] = $from_private_key;

        return $this;
    }

    /**
     * Get recipient
     *
     * @return string
     */
    public function getRecipient(): string {
        return $this->_data["recipient"];
    }

    /**
     * Set recipient
     * 
     * @param string $recipient Recipient address of created TRC20 tokens.
     * @return $this
     */
    public function setRecipient(string $recipient) {
        if ((mb_strlen($recipient) > 34)) {
            throw new IAE('CreateTronTrc20Blockchain.setRecipient: $recipient length must be <= 34');
        }
        if ((mb_strlen($recipient) < 34)) {
            throw new IAE('CreateTronTrc20Blockchain.setRecipient: $recipient length must be >= 34');
        }
        $this->_data['recipient'] = $recipient;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName(): string {
        return $this->_data["name"];
    }

    /**
     * Set name
     * 
     * @param string $name Name of the token.
     * @return $this
     */
    public function setName(string $name) {
        if ((mb_strlen($name) > 100)) {
            throw new IAE('CreateTronTrc20Blockchain.setName: $name length must be <= 100');
        }
        if ((mb_strlen($name) < 1)) {
            throw new IAE('CreateTronTrc20Blockchain.setName: $name length must be >= 1');
        }
        $this->_data['name'] = $name;

        return $this;
    }

    /**
     * Get symbol
     *
     * @return string
     */
    public function getSymbol(): string {
        return $this->_data["symbol"];
    }

    /**
     * Set symbol
     * 
     * @param string $symbol Symbol of the token.
     * @return $this
     */
    public function setSymbol(string $symbol) {
        if ((mb_strlen($symbol) > 100)) {
            throw new IAE('CreateTronTrc20Blockchain.setSymbol: $symbol length must be <= 100');
        }
        if ((mb_strlen($symbol) < 1)) {
            throw new IAE('CreateTronTrc20Blockchain.setSymbol: $symbol length must be >= 1');
        }
        $this->_data['symbol'] = $symbol;

        return $this;
    }

    /**
     * Get total_supply
     *
     * @return float
     */
    public function getTotalSupply(): float {
        return $this->_data["total_supply"];
    }

    /**
     * Set total_supply
     * 
     * @param float $total_supply Total supply of the tokens.
     * @return $this
     */
    public function setTotalSupply(float $total_supply) {
        if (($total_supply < 0)) {
            throw new IAE('CreateTronTrc20Blockchain.setTotalSupply: $total_supply must be >=0');
        }
        $this->_data['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Get decimals
     *
     * @return float
     */
    public function getDecimals(): float {
        return $this->_data["decimals"];
    }

    /**
     * Set decimals
     * 
     * @param float $decimals Number of decimal places of the token.
     * @return $this
     */
    public function setDecimals(float $decimals) {
        if (($decimals > 30)) {
            throw new IAE('CreateTronTrc20Blockchain.setDecimals: $decimals must be <=30');
        }
        if (($decimals < 0)) {
            throw new IAE('CreateTronTrc20Blockchain.setDecimals: $decimals must be >=0');
        }
        $this->_data['decimals'] = $decimals;

        return $this;
    }
}
