<?php

/**
 * EstimateFeeTransferFromCustodial Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * EstimateFeeTransferFromCustodial Model
 */
class EstimateFeeTransferFromCustodial extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_CELO = 'CELO';
    public const CHAIN_ETH = 'ETH';
    public const CHAIN_BSC = 'BSC';
    public const CHAIN_XDC = 'XDC';
    public const CHAIN_KLAY = 'KLAY';
    public const CHAIN_ONE = 'ONE';
    public const CHAIN_MATIC = 'MATIC';
    public const TYPE_TRANSFER_CUSTODIAL = 'TRANSFER_CUSTODIAL';
    protected static $_name = "EstimateFeeTransferFromCustodial";
    protected static $_definition = [
        "chain" => ["chain", "string", null, "getChain", "setChain", null], 
        "type" => ["type", "string", null, "getType", "setType", null], 
        "sender" => ["sender", "string", null, "getSender", "setSender", null], 
        "recipient" => ["recipient", "string", null, "getRecipient", "setRecipient", null], 
        "contract_address" => ["contractAddress", "string", null, "getContractAddress", "setContractAddress", null], 
        "custodial_address" => ["custodialAddress", "string", null, "getCustodialAddress", "setCustodialAddress", null], 
        "amount" => ["amount", "string", null, "getAmount", "setAmount", null], 
        "token_type" => ["tokenType", "float", null, "getTokenType", "setTokenType", null]
    ];

    /**
     * EstimateFeeTransferFromCustodial
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['type'])) {
            $ip[] = "'type' can't be null";
        }
        $allowed = $this->getTypeAllowableValues();
        $value = $this->_data['type'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'type' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['sender'])) {
            $ip[] = "'sender' can't be null";
        }
        if ((mb_strlen($this->_data['sender']) > 42)) {
            $ip[] = "'sender' length must be <= 42";
        }
        if ((mb_strlen($this->_data['sender']) < 42)) {
            $ip[] = "'sender' length must be >= 42";
        }
        if (is_null($this->_data['recipient'])) {
            $ip[] = "'recipient' can't be null";
        }
        if ((mb_strlen($this->_data['recipient']) > 42)) {
            $ip[] = "'recipient' length must be <= 42";
        }
        if ((mb_strlen($this->_data['recipient']) < 42)) {
            $ip[] = "'recipient' length must be >= 42";
        }
        if (is_null($this->_data['contract_address'])) {
            $ip[] = "'contract_address' can't be null";
        }
        if ((mb_strlen($this->_data['contract_address']) > 42)) {
            $ip[] = "'contract_address' length must be <= 42";
        }
        if ((mb_strlen($this->_data['contract_address']) < 42)) {
            $ip[] = "'contract_address' length must be >= 42";
        }
        if (is_null($this->_data['custodial_address'])) {
            $ip[] = "'custodial_address' can't be null";
        }
        if ((mb_strlen($this->_data['custodial_address']) > 42)) {
            $ip[] = "'custodial_address' length must be <= 42";
        }
        if ((mb_strlen($this->_data['custodial_address']) < 42)) {
            $ip[] = "'custodial_address' length must be >= 42";
        }
        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['amount'])) {
            $ip[] = "'amount' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        if (is_null($this->_data['token_type'])) {
            $ip[] = "'token_type' can't be null";
        }
        if (($this->_data['token_type'] > 3)) {
            $ip[] = "'token_type' must be <= 3";
        }
        if (($this->_data['token_type'] < 0)) {
            $ip[] = "'token_type' must be >= 0";
        }
        return $ip;
    }

    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_CELO,
            self::CHAIN_ETH,
            self::CHAIN_BSC,
            self::CHAIN_XDC,
            self::CHAIN_KLAY,
            self::CHAIN_ONE,
            self::CHAIN_MATIC,
        ];
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getTypeAllowableValues(): array {
        return [
            self::TYPE_TRANSFER_CUSTODIAL,
        ];
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain Blockchain to estimate fee for.
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("EstimateFeeTransferFromCustodial.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType(): string {
        return $this->_data["type"];
    }

    /**
     * Set type
     * 
     * @param string $type Type of transaction
     * @return $this
     */
    public function setType(string $type) {
        $allowed = $this->getTypeAllowableValues();
        if (!in_array($type, $allowed, true)) {
            throw new IAE(sprintf("EstimateFeeTransferFromCustodial.setType: type invalid value '%s', must be one of '%s'", $type, implode("', '", $allowed)));
        }
        $this->_data['type'] = $type;

        return $this;
    }

    /**
     * Get sender
     *
     * @return string
     */
    public function getSender(): string {
        return $this->_data["sender"];
    }

    /**
     * Set sender
     * 
     * @param string $sender Sender address
     * @return $this
     */
    public function setSender(string $sender) {
        if ((mb_strlen($sender) > 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setSender: $sender length must be <= 42');
        }
        if ((mb_strlen($sender) < 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setSender: $sender length must be >= 42');
        }
        $this->_data['sender'] = $sender;

        return $this;
    }

    /**
     * Get recipient
     *
     * @return string
     */
    public function getRecipient(): string {
        return $this->_data["recipient"];
    }

    /**
     * Set recipient
     * 
     * @param string $recipient Blockchain address to send assets
     * @return $this
     */
    public function setRecipient(string $recipient) {
        if ((mb_strlen($recipient) > 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setRecipient: $recipient length must be <= 42');
        }
        if ((mb_strlen($recipient) < 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setRecipient: $recipient length must be >= 42');
        }
        $this->_data['recipient'] = $recipient;

        return $this;
    }

    /**
     * Get contract_address
     *
     * @return string
     */
    public function getContractAddress(): string {
        return $this->_data["contract_address"];
    }

    /**
     * Set contract_address
     * 
     * @param string $contract_address Contract address of the token
     * @return $this
     */
    public function setContractAddress(string $contract_address) {
        if ((mb_strlen($contract_address) > 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setContractAddress: $contract_address length must be <= 42');
        }
        if ((mb_strlen($contract_address) < 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setContractAddress: $contract_address length must be >= 42');
        }
        $this->_data['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Get custodial_address
     *
     * @return string
     */
    public function getCustodialAddress(): string {
        return $this->_data["custodial_address"];
    }

    /**
     * Set custodial_address
     * 
     * @param string $custodial_address Contract address of custodial wallet contract
     * @return $this
     */
    public function setCustodialAddress(string $custodial_address) {
        if ((mb_strlen($custodial_address) > 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setCustodialAddress: $custodial_address length must be <= 42');
        }
        if ((mb_strlen($custodial_address) < 42)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setCustodialAddress: $custodial_address length must be >= 42');
        }
        $this->_data['custodial_address'] = $custodial_address;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount to be sent in native asset, ERC20 or ERC1155
     * @return $this
     */
    public function setAmount(string $amount) {
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $amount))) {
            throw new IAE('EstimateFeeTransferFromCustodial.setAmount: $amount must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($amount, true) . ' given');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get token_type
     *
     * @return float
     */
    public function getTokenType(): float {
        return $this->_data["token_type"];
    }

    /**
     * Set token_type
     * 
     * @param float $token_type Type of the token to transfer from gas pump wallet. 0 - ERC20, 1 - ERC721, 2 - ERC1155, 3 - native asset
     * @return $this
     */
    public function setTokenType(float $token_type) {
        if (($token_type > 3)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setTokenType: $token_type must be <=3');
        }
        if (($token_type < 0)) {
            throw new IAE('EstimateFeeTransferFromCustodial.setTokenType: $token_type must be >=0');
        }
        $this->_data['token_type'] = $token_type;

        return $this;
    }
}
