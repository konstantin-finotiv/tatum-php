<?php

/**
 * Error400_data_inner Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * Error400_data_inner Model
 */
class Error400DataInner extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "Error400_data_inner";
    protected static $_definition = [
        "target" => ["target", "array<string,mixed>", null, "getTarget", "setTarget"], 
        "value" => ["value", "float", null, "getValue", "setValue"], 
        "property" => ["property", "string", null, "getProperty", "setProperty"], 
        "constraints" => ["constraints", "array<string,mixed>", null, "getConstraints", "setConstraints"]
    ];

    /**
     * Error400DataInner
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["target"=>null, "value"=>null, "property"=>null, "constraints"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['target'])) {
            $ip[] = "'target' can't be null";
        }
        
        return $ip;
    }

    /**
     * Get target
     *
     * @return array<string,mixed>
     */
    public function getTarget(): array {
        return $this->_data["target"];
    }

    /**
     * Set target
     * 
     * @param array<string,mixed> $target Request object present in the body of the HTTP request
     * @return $this
     */
    public function setTarget(array $target) {
        $this->_data['target'] = $target;

        return $this;
    }

    /**
     * Get value
     *
     * @return float|null
     */
    public function getValue(): ?float {
        return $this->_data["value"];
    }

    /**
     * Set value
     * 
     * @param float|null $value Value of the target object which validation is wrong. Can be of any data type, example here is using type number.
     * @return $this
     */
    public function setValue(?float $value) {
        $this->_data['value'] = $value;

        return $this;
    }

    /**
     * Get property
     *
     * @return string|null
     */
    public function getProperty(): ?string {
        return $this->_data["property"];
    }

    /**
     * Set property
     * 
     * @param string|null $property Property name of the target object which validation is wrong
     * @return $this
     */
    public function setProperty(?string $property) {
        $this->_data['property'] = $property;

        return $this;
    }

    /**
     * Get constraints
     *
     * @return array<string,mixed>|null
     */
    public function getConstraints(): ?array {
        return $this->_data["constraints"];
    }

    /**
     * Set constraints
     * 
     * @param array<string,mixed>|null $constraints Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.
     * @return $this
     */
    public function setConstraints(?array $constraints) {
        $this->_data['constraints'] = $constraints;

        return $this;
    }
}
