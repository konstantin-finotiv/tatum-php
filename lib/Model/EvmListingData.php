<?php

/**
 * EvmListingData Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * EvmListingData Model
 */
class EvmListingData extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const STATE__0 = '0';
    public const STATE__1 = '1';
    public const STATE__2 = '2';
    protected static $_name = "EvmListingData";
    protected static $_definition = [
        "amount" => ["amount", "string", null, "getAmount", "setAmount"], 
        "buyer" => ["buyer", "string", null, "getBuyer", "setBuyer"], 
        "erc20_address" => ["erc20Address", "string", null, "getErc20Address", "setErc20Address"], 
        "is_erc721" => ["isErc721", "bool", null, "getIsErc721", "setIsErc721"], 
        "listing_id" => ["listingId", "string", null, "getListingId", "setListingId"], 
        "nft_address" => ["nftAddress", "string", null, "getNftAddress", "setNftAddress"], 
        "price" => ["price", "string", null, "getPrice", "setPrice"], 
        "seller" => ["seller", "string", null, "getSeller", "setSeller"], 
        "state" => ["state", "string", null, "getState", "setState"]
    ];

    /**
     * EvmListingData
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["amount"=>null, "buyer"=>null, "erc20_address"=>null, "is_erc721"=>null, "listing_id"=>null, "nft_address"=>null, "price"=>null, "seller"=>null, "state"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        $allowed = $this->getStateAllowableValues();
        $value = $this->_data['state'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'state' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getStateAllowableValues(): array {
        return [
            self::STATE__0,
            self::STATE__1,
            self::STATE__2,
        ];
    }

    /**
     * Get amount
     *
     * @return string|null
     */
    public function getAmount(): ?string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string|null $amount Amount of NFTs to sold in this listing. Valid only for ERC1155 listings.
     * @return $this
     */
    public function setAmount(?string $amount) {
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get buyer
     *
     * @return string|null
     */
    public function getBuyer(): ?string {
        return $this->_data["buyer"];
    }

    /**
     * Set buyer
     * 
     * @param string|null $buyer Address of the buyer, if exists.
     * @return $this
     */
    public function setBuyer(?string $buyer) {
        $this->_data['buyer'] = $buyer;

        return $this;
    }

    /**
     * Get erc20_address
     *
     * @return string|null
     */
    public function getErc20Address(): ?string {
        return $this->_data["erc20_address"];
    }

    /**
     * Set erc20_address
     * 
     * @param string|null $erc20_address Address of the ERC20 token smart contract, which should be used for paying for the asset
     * @return $this
     */
    public function setErc20Address(?string $erc20_address) {
        $this->_data['erc20_address'] = $erc20_address;

        return $this;
    }

    /**
     * Get is_erc721
     *
     * @return bool|null
     */
    public function getIsErc721(): ?bool {
        return $this->_data["is_erc721"];
    }

    /**
     * Set is_erc721
     * 
     * @param bool|null $is_erc721 True if asset is NFT of type ERC721, false if ERC1155
     * @return $this
     */
    public function setIsErc721(?bool $is_erc721) {
        $this->_data['is_erc721'] = $is_erc721;

        return $this;
    }

    /**
     * Get listing_id
     *
     * @return string|null
     */
    public function getListingId(): ?string {
        return $this->_data["listing_id"];
    }

    /**
     * Set listing_id
     * 
     * @param string|null $listing_id ID of the listing.
     * @return $this
     */
    public function setListingId(?string $listing_id) {
        $this->_data['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Get nft_address
     *
     * @return string|null
     */
    public function getNftAddress(): ?string {
        return $this->_data["nft_address"];
    }

    /**
     * Set nft_address
     * 
     * @param string|null $nft_address Address of the NFT smart contract.
     * @return $this
     */
    public function setNftAddress(?string $nft_address) {
        $this->_data['nft_address'] = $nft_address;

        return $this;
    }

    /**
     * Get price
     *
     * @return string|null
     */
    public function getPrice(): ?string {
        return $this->_data["price"];
    }

    /**
     * Set price
     * 
     * @param string|null $price Price of the NFT asset in native currency or ERC20 token based on the presence of erc20Address field.
     * @return $this
     */
    public function setPrice(?string $price) {
        $this->_data['price'] = $price;

        return $this;
    }

    /**
     * Get seller
     *
     * @return string|null
     */
    public function getSeller(): ?string {
        return $this->_data["seller"];
    }

    /**
     * Set seller
     * 
     * @param string|null $seller Address of the seller.
     * @return $this
     */
    public function setSeller(?string $seller) {
        $this->_data['seller'] = $seller;

        return $this;
    }

    /**
     * Get state
     *
     * @return string|null
     */
    public function getState(): ?string {
        return $this->_data["state"];
    }

    /**
     * Set state
     * 
     * @param string|null $state State of the listing. 0 - available, 1 - sold, 2 - cancelled
     * @return $this
     */
    public function setState(?string $state) {
        $allowed = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowed, true)) {
            throw new IAE(sprintf("EvmListingData.setState: state invalid value '%s', must be one of '%s'", $state, implode("', '", $allowed)));
        }
        $this->_data['state'] = $state;

        return $this;
    }
}
