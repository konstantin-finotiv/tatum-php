<?php

/**
 * UpdateMarketplace_request Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * UpdateMarketplace_request Model
 */
class UpdateMarketplaceRequest extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_SOL = 'SOL';
    protected static $_name = "UpdateMarketplace_request";
    protected static $_definition = [
        "chain" => ["chain", "string", null, "getChain", "setChain", null], 
        "contract_address" => ["contractAddress", "string", null, "getContractAddress", "setContractAddress", null], 
        "marketplace_fee" => ["marketplaceFee", "float", null, "getMarketplaceFee", "setMarketplaceFee", null], 
        "from" => ["from", "string", null, "getFrom", "setFrom", null], 
        "treasury_withdrawal_destination" => ["treasuryWithdrawalDestination", "string", null, "getTreasuryWithdrawalDestination", "setTreasuryWithdrawalDestination", null], 
        "fee_withdrawal_destination" => ["feeWithdrawalDestination", "string", null, "getFeeWithdrawalDestination", "setFeeWithdrawalDestination", null], 
        "requires_sign_off" => ["requiresSignOff", "bool", null, "getRequiresSignOff", "setRequiresSignOff", null], 
        "can_change_sale_price" => ["canChangeSalePrice", "bool", null, "getCanChangeSalePrice", "setCanChangeSalePrice", null], 
        "from_private_key" => ["fromPrivateKey", "string", null, "getFromPrivateKey", "setFromPrivateKey", null], 
        "signature_id" => ["signatureId", "string", 'uuid', "getSignatureId", "setSignatureId", null]
    ];

    /**
     * UpdateMarketplaceRequest
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['contract_address'])) {
            $ip[] = "'contract_address' can't be null";
        }
        if ((mb_strlen($this->_data['contract_address']) > 44)) {
            $ip[] = "'contract_address' length must be <= 44";
        }
        if ((mb_strlen($this->_data['contract_address']) < 44)) {
            $ip[] = "'contract_address' length must be >= 44";
        }
        if (!is_null($this->_data['marketplace_fee']) && ($this->_data['marketplace_fee'] > 10000)) {
            $ip[] = "'marketplace_fee' must be <= 10000";
        }
        if (!is_null($this->_data['marketplace_fee']) && ($this->_data['marketplace_fee'] < 0)) {
            $ip[] = "'marketplace_fee' must be >= 0";
        }
        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if ((mb_strlen($this->_data['from']) > 44)) {
            $ip[] = "'from' length must be <= 44";
        }
        if ((mb_strlen($this->_data['from']) < 44)) {
            $ip[] = "'from' length must be >= 44";
        }
        if (!is_null($this->_data['treasury_withdrawal_destination']) && (mb_strlen($this->_data['treasury_withdrawal_destination']) > 44)) {
            $ip[] = "'treasury_withdrawal_destination' length must be <= 44";
        }
        if (!is_null($this->_data['treasury_withdrawal_destination']) && (mb_strlen($this->_data['treasury_withdrawal_destination']) < 43)) {
            $ip[] = "'treasury_withdrawal_destination' length must be >= 43";
        }
        if (!is_null($this->_data['fee_withdrawal_destination']) && (mb_strlen($this->_data['fee_withdrawal_destination']) > 44)) {
            $ip[] = "'fee_withdrawal_destination' length must be <= 44";
        }
        if (!is_null($this->_data['fee_withdrawal_destination']) && (mb_strlen($this->_data['fee_withdrawal_destination']) < 43)) {
            $ip[] = "'fee_withdrawal_destination' length must be >= 43";
        }
        if (is_null($this->_data['from_private_key'])) {
            $ip[] = "'from_private_key' can't be null";
        }
        if ((mb_strlen($this->_data['from_private_key']) > 128)) {
            $ip[] = "'from_private_key' length must be <= 128";
        }
        if ((mb_strlen($this->_data['from_private_key']) < 87)) {
            $ip[] = "'from_private_key' length must be >= 87";
        }
        if (is_null($this->_data['signature_id'])) {
            $ip[] = "'signature_id' can't be null";
        }
        return $ip;
    }

    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_SOL,
        ];
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain Blockchain to work with.
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("UpdateMarketplaceRequest.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get contract_address
     *
     * @return string
     */
    public function getContractAddress(): string {
        return $this->_data["contract_address"];
    }

    /**
     * Set contract_address
     * 
     * @param string $contract_address Blockchain address of the smart contract
     * @return $this
     */
    public function setContractAddress(string $contract_address) {
        if ((mb_strlen($contract_address) > 44)) {
            throw new IAE('UpdateMarketplaceRequest.setContractAddress: $contract_address length must be <= 44');
        }
        if ((mb_strlen($contract_address) < 44)) {
            throw new IAE('UpdateMarketplaceRequest.setContractAddress: $contract_address length must be >= 44');
        }
        $this->_data['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Get marketplace_fee
     *
     * @return float|null
     */
    public function getMarketplaceFee(): ?float {
        return $this->_data["marketplace_fee"];
    }

    /**
     * Set marketplace_fee
     * 
     * @param float|null $marketplace_fee The percentage of the amount that an NFT was sold for that will be sent to the marketplace as a fee. To set the fee to 1%, set this parameter to <code>100</code>; to set 10%, set this parameter to <code>1000</code>; to set 50%, set this parameter to <code>5000</code>, and so on.
     * @return $this
     */
    public function setMarketplaceFee(?float $marketplace_fee) {
        if (!is_null($marketplace_fee) && ($marketplace_fee > 10000)) {
            throw new IAE('UpdateMarketplaceRequest.setMarketplaceFee: $marketplace_fee must be <=10000');
        }
        if (!is_null($marketplace_fee) && ($marketplace_fee < 0)) {
            throw new IAE('UpdateMarketplaceRequest.setMarketplaceFee: $marketplace_fee must be >=0');
        }
        $this->_data['marketplace_fee'] = $marketplace_fee;

        return $this;
    }

    /**
     * Get from
     *
     * @return string
     */
    public function getFrom(): string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string $from The blockchain address of the marketplace authority
     * @return $this
     */
    public function setFrom(string $from) {
        if ((mb_strlen($from) > 44)) {
            throw new IAE('UpdateMarketplaceRequest.setFrom: $from length must be <= 44');
        }
        if ((mb_strlen($from) < 44)) {
            throw new IAE('UpdateMarketplaceRequest.setFrom: $from length must be >= 44');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get treasury_withdrawal_destination
     *
     * @return string|null
     */
    public function getTreasuryWithdrawalDestination(): ?string {
        return $this->_data["treasury_withdrawal_destination"];
    }

    /**
     * Set treasury_withdrawal_destination
     * 
     * @param string|null $treasury_withdrawal_destination The address that will be able to withdraw funds from the marketplace treasury account to own address
     * @return $this
     */
    public function setTreasuryWithdrawalDestination(?string $treasury_withdrawal_destination) {
        if (!is_null($treasury_withdrawal_destination) && (mb_strlen($treasury_withdrawal_destination) > 44)) {
            throw new IAE('UpdateMarketplaceRequest.setTreasuryWithdrawalDestination: $treasury_withdrawal_destination length must be <= 44');
        }
        if (!is_null($treasury_withdrawal_destination) && (mb_strlen($treasury_withdrawal_destination) < 43)) {
            throw new IAE('UpdateMarketplaceRequest.setTreasuryWithdrawalDestination: $treasury_withdrawal_destination length must be >= 43');
        }
        $this->_data['treasury_withdrawal_destination'] = $treasury_withdrawal_destination;

        return $this;
    }

    /**
     * Get fee_withdrawal_destination
     *
     * @return string|null
     */
    public function getFeeWithdrawalDestination(): ?string {
        return $this->_data["fee_withdrawal_destination"];
    }

    /**
     * Set fee_withdrawal_destination
     * 
     * @param string|null $fee_withdrawal_destination The address that will be able to withdraw funds from the marketplace fee account to own address
     * @return $this
     */
    public function setFeeWithdrawalDestination(?string $fee_withdrawal_destination) {
        if (!is_null($fee_withdrawal_destination) && (mb_strlen($fee_withdrawal_destination) > 44)) {
            throw new IAE('UpdateMarketplaceRequest.setFeeWithdrawalDestination: $fee_withdrawal_destination length must be <= 44');
        }
        if (!is_null($fee_withdrawal_destination) && (mb_strlen($fee_withdrawal_destination) < 43)) {
            throw new IAE('UpdateMarketplaceRequest.setFeeWithdrawalDestination: $fee_withdrawal_destination length must be >= 43');
        }
        $this->_data['fee_withdrawal_destination'] = $fee_withdrawal_destination;

        return $this;
    }

    /**
     * Get requires_sign_off
     *
     * @return bool|null
     */
    public function getRequiresSignOff(): ?bool {
        return $this->_data["requires_sign_off"];
    }

    /**
     * Set requires_sign_off
     * 
     * @param bool|null $requires_sign_off Set to \"false\" if you do not want the marketplace to sign all operations related to the listings and sales; if not set, defaults to \"true\" (the marketplace must sign all the operations)
     * @return $this
     */
    public function setRequiresSignOff(?bool $requires_sign_off) {
        $this->_data['requires_sign_off'] = $requires_sign_off;

        return $this;
    }

    /**
     * Get can_change_sale_price
     *
     * @return bool|null
     */
    public function getCanChangeSalePrice(): ?bool {
        return $this->_data["can_change_sale_price"];
    }

    /**
     * Set can_change_sale_price
     * 
     * @param bool|null $can_change_sale_price Set to \"true\" to allow the marketplace to change the sale price that the seller intentionally set to 0; if not set, defaults to \"false\" (the marketplace cannot change the sale price)
     * @return $this
     */
    public function setCanChangeSalePrice(?bool $can_change_sale_price) {
        $this->_data['can_change_sale_price'] = $can_change_sale_price;

        return $this;
    }

    /**
     * Get from_private_key
     *
     * @return string
     */
    public function getFromPrivateKey(): string {
        return $this->_data["from_private_key"];
    }

    /**
     * Set from_private_key
     * 
     * @param string $from_private_key The private key of the marketplace authority
     * @return $this
     */
    public function setFromPrivateKey(string $from_private_key) {
        if ((mb_strlen($from_private_key) > 128)) {
            throw new IAE('UpdateMarketplaceRequest.setFromPrivateKey: $from_private_key length must be <= 128');
        }
        if ((mb_strlen($from_private_key) < 87)) {
            throw new IAE('UpdateMarketplaceRequest.setFromPrivateKey: $from_private_key length must be >= 87');
        }
        $this->_data['from_private_key'] = $from_private_key;

        return $this;
    }

    /**
     * Get signature_id
     *
     * @return string
     */
    public function getSignatureId(): string {
        return $this->_data["signature_id"];
    }

    /**
     * Set signature_id
     * 
     * @param string $signature_id The KMS identifier of the private key of the marketplace authority
     * @return $this
     */
    public function setSignatureId(string $signature_id) {
        $this->_data['signature_id'] = $signature_id;

        return $this;
    }
}
