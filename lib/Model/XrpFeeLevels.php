<?php

/**
 * XrpFee_levels Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * XrpFee_levels Model
 * 
 * @description Various information about the transaction cost, in fee levels. The ratio in fee levels applies to any transaction relative to the minimum cost of that particular transaction.
 */
class XrpFeeLevels extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "XrpFee_levels";
    protected static $_definition = [
        "median_level" => ["median_level", "string", null, "getMedianLevel", "setMedianLevel"], 
        "minimum_level" => ["minimum_level", "string", null, "getMinimumLevel", "setMinimumLevel"], 
        "open_ledger_level" => ["open_ledger_level", "string", null, "getOpenLedgerLevel", "setOpenLedgerLevel"], 
        "reference_level" => ["reference_level", "string", null, "getReferenceLevel", "setReferenceLevel"]
    ];

    /**
     * XrpFeeLevels
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["median_level"=>null, "minimum_level"=>null, "open_ledger_level"=>null, "reference_level"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        
        return $ip;
    }

    /**
     * Get median_level
     *
     * @return string|null
     */
    public function getMedianLevel(): ?string {
        return $this->_data["median_level"];
    }

    /**
     * Set median_level
     * 
     * @param string|null $median_level The median transaction cost among transactions in the previous validated ledger, represented in fee levels.
     * @return $this
     */
    public function setMedianLevel(?string $median_level) {
        $this->_data['median_level'] = $median_level;

        return $this;
    }

    /**
     * Get minimum_level
     *
     * @return string|null
     */
    public function getMinimumLevel(): ?string {
        return $this->_data["minimum_level"];
    }

    /**
     * Set minimum_level
     * 
     * @param string|null $minimum_level The minimum transaction cost required to be queued for a future ledger, represented in fee levels.
     * @return $this
     */
    public function setMinimumLevel(?string $minimum_level) {
        $this->_data['minimum_level'] = $minimum_level;

        return $this;
    }

    /**
     * Get open_ledger_level
     *
     * @return string|null
     */
    public function getOpenLedgerLevel(): ?string {
        return $this->_data["open_ledger_level"];
    }

    /**
     * Set open_ledger_level
     * 
     * @param string|null $open_ledger_level The minimum transaction cost required to be included in the current open ledger, represented in fee levels.
     * @return $this
     */
    public function setOpenLedgerLevel(?string $open_ledger_level) {
        $this->_data['open_ledger_level'] = $open_ledger_level;

        return $this;
    }

    /**
     * Get reference_level
     *
     * @return string|null
     */
    public function getReferenceLevel(): ?string {
        return $this->_data["reference_level"];
    }

    /**
     * Set reference_level
     * 
     * @param string|null $reference_level The equivalent of the minimum transaction cost, represented in fee levels.
     * @return $this
     */
    public function setReferenceLevel(?string $reference_level) {
        $this->_data['reference_level'] = $reference_level;

        return $this;
    }
}
