<?php

/**
 * BlockchainFee Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * BlockchainFee Model
 * 
 * @description Recommended fees to perform blockchain transaction
 */
class BlockchainFee extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "BlockchainFee";
    protected static $_definition = [
        "fast" => ["fast", "float", null, "getFast", "setFast", null], 
        "medium" => ["medium", "float", null, "getMedium", "setMedium", null], 
        "slow" => ["slow", "float", null, "getSlow", "setSlow", null], 
        "base_fee" => ["baseFee", "float", null, "getBaseFee", "setBaseFee", null], 
        "time" => ["time", "string", null, "getTime", "setTime", null], 
        "block" => ["block", "float", null, "getBlock", "setBlock", null]
    ];

    /**
     * BlockchainFee
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['fast'])) {
            $ip[] = "'fast' can't be null";
        }
        if (is_null($this->_data['medium'])) {
            $ip[] = "'medium' can't be null";
        }
        if (is_null($this->_data['slow'])) {
            $ip[] = "'slow' can't be null";
        }
        if (is_null($this->_data['time'])) {
            $ip[] = "'time' can't be null";
        }
        if (is_null($this->_data['block'])) {
            $ip[] = "'block' can't be null";
        }
        return $ip;
    }


    /**
     * Get fast
     *
     * @return float
     */
    public function getFast(): float {
        return $this->_data["fast"];
    }

    /**
     * Set fast
     * 
     * @param float $fast Fast transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
     * @return $this
     */
    public function setFast(float $fast) {
        $this->_data['fast'] = $fast;

        return $this;
    }

    /**
     * Get medium
     *
     * @return float
     */
    public function getMedium(): float {
        return $this->_data["medium"];
    }

    /**
     * Set medium
     * 
     * @param float $medium Medium transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
     * @return $this
     */
    public function setMedium(float $medium) {
        $this->_data['medium'] = $medium;

        return $this;
    }

    /**
     * Get slow
     *
     * @return float
     */
    public function getSlow(): float {
        return $this->_data["slow"];
    }

    /**
     * Set slow
     * 
     * @param float $slow Slow transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
     * @return $this
     */
    public function setSlow(float $slow) {
        $this->_data['slow'] = $slow;

        return $this;
    }

    /**
     * Get base_fee
     *
     * @return float|null
     */
    public function getBaseFee(): ?float {
        return $this->_data["base_fee"];
    }

    /**
     * Set base_fee
     * 
     * @param float|null $base_fee (evm-based only) This is the minimum fee needs to paid in order for the tx to be accepted into block.
     * @return $this
     */
    public function setBaseFee(?float $base_fee) {
        $this->_data['base_fee'] = $base_fee;

        return $this;
    }

    /**
     * Get time
     *
     * @return string
     */
    public function getTime(): string {
        return $this->_data["time"];
    }

    /**
     * Set time
     * 
     * @param string $time Last time fees were recalculated
     * @return $this
     */
    public function setTime(string $time) {
        $this->_data['time'] = $time;

        return $this;
    }

    /**
     * Get block
     *
     * @return float
     */
    public function getBlock(): float {
        return $this->_data["block"];
    }

    /**
     * Set block
     * 
     * @param float $block Last used to calculate fee from
     * @return $this
     */
    public function setBlock(float $block) {
        $this->_data['block'] = $block;

        return $this;
    }
}
