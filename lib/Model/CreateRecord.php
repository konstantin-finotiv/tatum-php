<?php

/**
 * CreateRecord Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * CreateRecord Model
 */
class CreateRecord extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_ETH = 'ETH';
    public const CHAIN_ONE = 'ONE';
    public const CHAIN_XDC = 'XDC';
    public const CHAIN_KLAY = 'KLAY';
    public const CHAIN_BSC = 'BSC';
    public const CHAIN_MATIC = 'MATIC';
    protected static $_name = "CreateRecord";
    protected static $_definition = [
        "data" => ["data", "string", null, "getData", "setData"], 
        "chain" => ["chain", "string", null, "getChain", "setChain"], 
        "from_private_key" => ["fromPrivateKey", "string", null, "getFromPrivateKey", "setFromPrivateKey"], 
        "nonce" => ["nonce", "float", null, "getNonce", "setNonce"], 
        "to" => ["to", "string", null, "getTo", "setTo"]
    ];

    /**
     * CreateRecord
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["data"=>null, "chain"=>null, "from_private_key"=>null, "nonce"=>null, "to"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['data'])) {
            $ip[] = "'data' can't be null";
        }
        if ((mb_strlen($this->_data['data']) > 130000)) {
            $ip[] = "'data' length must be <= 130000";
        }
        if ((mb_strlen($this->_data['data']) < 1)) {
            $ip[] = "'data' length must be >= 1";
        }
        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (!is_null($this->_data['from_private_key']) && (mb_strlen($this->_data['from_private_key']) > 66)) {
            $ip[] = "'from_private_key' length must be <= 66";
        }
        if (!is_null($this->_data['from_private_key']) && (mb_strlen($this->_data['from_private_key']) < 66)) {
            $ip[] = "'from_private_key' length must be >= 66";
        }
        if (!is_null($this->_data['nonce']) && ($this->_data['nonce'] < 0)) {
            $ip[] = "'nonce' must be >= 0";
        }
        if (!is_null($this->_data['to']) && (mb_strlen($this->_data['to']) > 42)) {
            $ip[] = "'to' length must be <= 42";
        }
        if (!is_null($this->_data['to']) && (mb_strlen($this->_data['to']) < 42)) {
            $ip[] = "'to' length must be >= 42";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_ETH,
            self::CHAIN_ONE,
            self::CHAIN_XDC,
            self::CHAIN_KLAY,
            self::CHAIN_BSC,
            self::CHAIN_MATIC,
        ];
    }

    /**
     * Get data
     *
     * @return string
     */
    public function getData(): string {
        return $this->_data["data"];
    }

    /**
     * Set data
     * 
     * @param string $data Log data to be stored on a blockchain.
     * @return $this
     */
    public function setData(string $data) {
        if ((mb_strlen($data) > 130000)) {
            throw new IAE('CreateRecord.setData: $data length must be <= 130000');
        }
        if ((mb_strlen($data) < 1)) {
            throw new IAE('CreateRecord.setData: $data length must be >= 1');
        }
        $this->_data['data'] = $data;

        return $this;
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain Blockchain, where to store log data.
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("CreateRecord.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get from_private_key
     *
     * @return string|null
     */
    public function getFromPrivateKey(): ?string {
        return $this->_data["from_private_key"];
    }

    /**
     * Set from_private_key
     * 
     * @param string|null $from_private_key Private key of account, from which the transaction will be initiated. If not present, transaction fee will be debited from Tatum internal account and additional credits will be charged.
     * @return $this
     */
    public function setFromPrivateKey(?string $from_private_key) {
        if (!is_null($from_private_key) && (mb_strlen($from_private_key) > 66)) {
            throw new IAE('CreateRecord.setFromPrivateKey: $from_private_key length must be <= 66');
        }
        if (!is_null($from_private_key) && (mb_strlen($from_private_key) < 66)) {
            throw new IAE('CreateRecord.setFromPrivateKey: $from_private_key length must be >= 66');
        }
        $this->_data['from_private_key'] = $from_private_key;

        return $this;
    }

    /**
     * Get nonce
     *
     * @return float|null
     */
    public function getNonce(): ?float {
        return $this->_data["nonce"];
    }

    /**
     * Set nonce
     * 
     * @param float|null $nonce Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.
     * @return $this
     */
    public function setNonce(?float $nonce) {
        if (!is_null($nonce) && ($nonce < 0)) {
            throw new IAE('CreateRecord.setNonce: $nonce must be >=0');
        }
        $this->_data['nonce'] = $nonce;

        return $this;
    }

    /**
     * Get to
     *
     * @return string|null
     */
    public function getTo(): ?string {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param string|null $to Blockchain address to store log on. If not defined, it will be stored on an address, from which the transaction was being made.
     * @return $this
     */
    public function setTo(?string $to) {
        if (!is_null($to) && (mb_strlen($to) > 42)) {
            throw new IAE('CreateRecord.setTo: $to length must be <= 42');
        }
        if (!is_null($to) && (mb_strlen($to) < 42)) {
            throw new IAE('CreateRecord.setTo: $to length must be >= 42');
        }
        $this->_data['to'] = $to;

        return $this;
    }
}
