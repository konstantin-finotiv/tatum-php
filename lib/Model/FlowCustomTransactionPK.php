<?php

/**
 * FlowCustomTransactionPK Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * FlowCustomTransactionPK Model
 */
class FlowCustomTransactionPK extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "FlowCustomTransactionPK";
    protected static $_definition = [
        "account" => ["account", "string", null, "getAccount", "setAccount", null], 
        "transaction" => ["transaction", "string", null, "getTransaction", "setTransaction", null], 
        "args" => ["args", "\Tatum\Model\FlowCustomTransactionPKArgsInner[]", null, "getArgs", "setArgs", null], 
        "private_key" => ["privateKey", "string", null, "getPrivateKey", "setPrivateKey", null]
    ];

    /**
     * FlowCustomTransactionPK
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['account'])) {
            $ip[] = "'account' can't be null";
        }
        if ((mb_strlen($this->_data['account']) > 18)) {
            $ip[] = "'account' length must be <= 18";
        }
        if ((mb_strlen($this->_data['account']) < 18)) {
            $ip[] = "'account' length must be >= 18";
        }
        if (is_null($this->_data['transaction'])) {
            $ip[] = "'transaction' can't be null";
        }
        if ((mb_strlen($this->_data['transaction']) > 500000)) {
            $ip[] = "'transaction' length must be <= 500000";
        }
        if ((mb_strlen($this->_data['transaction']) < 1)) {
            $ip[] = "'transaction' length must be >= 1";
        }
        if (is_null($this->_data['args'])) {
            $ip[] = "'args' can't be null";
        }
        if (is_null($this->_data['private_key'])) {
            $ip[] = "'private_key' can't be null";
        }
        if ((mb_strlen($this->_data['private_key']) > 64)) {
            $ip[] = "'private_key' length must be <= 64";
        }
        if ((mb_strlen($this->_data['private_key']) < 64)) {
            $ip[] = "'private_key' length must be >= 64";
        }
        return $ip;
    }


    /**
     * Get account
     *
     * @return string
     */
    public function getAccount(): string {
        return $this->_data["account"];
    }

    /**
     * Set account
     * 
     * @param string $account Blockchain account to send from
     * @return $this
     */
    public function setAccount(string $account) {
        if ((mb_strlen($account) > 18)) {
            throw new IAE('FlowCustomTransactionPK.setAccount: $account length must be <= 18');
        }
        if ((mb_strlen($account) < 18)) {
            throw new IAE('FlowCustomTransactionPK.setAccount: $account length must be >= 18');
        }
        $this->_data['account'] = $account;

        return $this;
    }

    /**
     * Get transaction
     *
     * @return string
     */
    public function getTransaction(): string {
        return $this->_data["transaction"];
    }

    /**
     * Set transaction
     * 
     * @param string $transaction Transaction string to send to the chain.
     * @return $this
     */
    public function setTransaction(string $transaction) {
        if ((mb_strlen($transaction) > 500000)) {
            throw new IAE('FlowCustomTransactionPK.setTransaction: $transaction length must be <= 500000');
        }
        if ((mb_strlen($transaction) < 1)) {
            throw new IAE('FlowCustomTransactionPK.setTransaction: $transaction length must be >= 1');
        }
        $this->_data['transaction'] = $transaction;

        return $this;
    }

    /**
     * Get args
     *
     * @return \Tatum\Model\FlowCustomTransactionPKArgsInner[]
     */
    public function getArgs(): array {
        return $this->_data["args"];
    }

    /**
     * Set args
     * 
     * @param \Tatum\Model\FlowCustomTransactionPKArgsInner[] $args args
     * @return $this
     */
    public function setArgs(array $args) {
        $this->_data['args'] = $args;

        return $this;
    }

    /**
     * Get private_key
     *
     * @return string
     */
    public function getPrivateKey(): string {
        return $this->_data["private_key"];
    }

    /**
     * Set private_key
     * 
     * @param string $private_key Secret for account. Secret, or signature Id must be present.
     * @return $this
     */
    public function setPrivateKey(string $private_key) {
        if ((mb_strlen($private_key) > 64)) {
            throw new IAE('FlowCustomTransactionPK.setPrivateKey: $private_key length must be <= 64');
        }
        if ((mb_strlen($private_key) < 64)) {
            throw new IAE('FlowCustomTransactionPK.setPrivateKey: $private_key length must be >= 64');
        }
        $this->_data['private_key'] = $private_key;

        return $this;
    }
}
