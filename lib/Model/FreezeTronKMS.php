<?php

/**
 * FreezeTronKMS Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * FreezeTronKMS Model
 */
class FreezeTronKMS extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const RESOURCE_BANDWIDTH = 'BANDWIDTH';
    public const RESOURCE_ENERGY = 'ENERGY';
    protected static $_name = "FreezeTronKMS";
    protected static $_definition = [
        "from" => ["from", "string", null, "getFrom", "setFrom"], 
        "signature_id" => ["signatureId", "string", 'uuid', "getSignatureId", "setSignatureId"], 
        "index" => ["index", "float", null, "getIndex", "setIndex"], 
        "receiver" => ["receiver", "string", null, "getReceiver", "setReceiver"], 
        "duration" => ["duration", "float", null, "getDuration", "setDuration"], 
        "resource" => ["resource", "string", null, "getResource", "setResource"], 
        "amount" => ["amount", "string", null, "getAmount", "setAmount"]
    ];

    /**
     * FreezeTronKMS
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["from"=>null, "signature_id"=>null, "index"=>null, "receiver"=>null, "duration"=>null, "resource"=>null, "amount"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if ((mb_strlen($this->_data['from']) > 34)) {
            $ip[] = "'from' length must be <= 34";
        }
        if ((mb_strlen($this->_data['from']) < 34)) {
            $ip[] = "'from' length must be >= 34";
        }
        if (is_null($this->_data['signature_id'])) {
            $ip[] = "'signature_id' can't be null";
        }
        if (!is_null($this->_data['index']) && ($this->_data['index'] < 0)) {
            $ip[] = "'index' must be >= 0";
        }
        if (is_null($this->_data['receiver'])) {
            $ip[] = "'receiver' can't be null";
        }
        if ((mb_strlen($this->_data['receiver']) > 34)) {
            $ip[] = "'receiver' length must be <= 34";
        }
        if ((mb_strlen($this->_data['receiver']) < 34)) {
            $ip[] = "'receiver' length must be >= 34";
        }
        if (is_null($this->_data['duration'])) {
            $ip[] = "'duration' can't be null";
        }
        if (($this->_data['duration'] < 3)) {
            $ip[] = "'duration' must be >= 3";
        }
        if (is_null($this->_data['resource'])) {
            $ip[] = "'resource' can't be null";
        }
        $allowed = $this->getResourceAllowableValues();
        $value = $this->_data['resource'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'resource' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['amount'])) {
            $ip[] = "'amount' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getResourceAllowableValues(): array {
        return [
            self::RESOURCE_BANDWIDTH,
            self::RESOURCE_ENERGY,
        ];
    }

    /**
     * Get from
     *
     * @return string
     */
    public function getFrom(): string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string $from Sender address of TRON account in Base58 format.
     * @return $this
     */
    public function setFrom(string $from) {
        if ((mb_strlen($from) > 34)) {
            throw new IAE('FreezeTronKMS.setFrom: $from length must be <= 34');
        }
        if ((mb_strlen($from) < 34)) {
            throw new IAE('FreezeTronKMS.setFrom: $from length must be >= 34');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get signature_id
     *
     * @return string
     */
    public function getSignatureId(): string {
        return $this->_data["signature_id"];
    }

    /**
     * Set signature_id
     * 
     * @param string $signature_id Identifier of the private key associated in signing application. Private key, or signature Id must be present.
     * @return $this
     */
    public function setSignatureId(string $signature_id) {
        $this->_data['signature_id'] = $signature_id;

        return $this;
    }

    /**
     * Get index
     *
     * @return float|null
     */
    public function getIndex(): ?float {
        return $this->_data["index"];
    }

    /**
     * Set index
     * 
     * @param float|null $index If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
     * @return $this
     */
    public function setIndex(?float $index) {
        if (!is_null($index) && ($index < 0)) {
            throw new IAE('FreezeTronKMS.setIndex: $index must be >=0');
        }
        $this->_data['index'] = $index;

        return $this;
    }

    /**
     * Get receiver
     *
     * @return string
     */
    public function getReceiver(): string {
        return $this->_data["receiver"];
    }

    /**
     * Set receiver
     * 
     * @param string $receiver Recipient address of frozen BANDWIDTH or ENERGY.
     * @return $this
     */
    public function setReceiver(string $receiver) {
        if ((mb_strlen($receiver) > 34)) {
            throw new IAE('FreezeTronKMS.setReceiver: $receiver length must be <= 34');
        }
        if ((mb_strlen($receiver) < 34)) {
            throw new IAE('FreezeTronKMS.setReceiver: $receiver length must be >= 34');
        }
        $this->_data['receiver'] = $receiver;

        return $this;
    }

    /**
     * Get duration
     *
     * @return float
     */
    public function getDuration(): float {
        return $this->_data["duration"];
    }

    /**
     * Set duration
     * 
     * @param float $duration Duration of frozen funds, in days.
     * @return $this
     */
    public function setDuration(float $duration) {
        if (($duration < 3)) {
            throw new IAE('FreezeTronKMS.setDuration: $duration must be >=3');
        }
        $this->_data['duration'] = $duration;

        return $this;
    }

    /**
     * Get resource
     *
     * @return string
     */
    public function getResource(): string {
        return $this->_data["resource"];
    }

    /**
     * Set resource
     * 
     * @param string $resource Resource to obtain, BANDWIDTH or ENERGY.
     * @return $this
     */
    public function setResource(string $resource) {
        $allowed = $this->getResourceAllowableValues();
        if (!in_array($resource, $allowed, true)) {
            throw new IAE(sprintf("FreezeTronKMS.setResource: resource invalid value '%s', must be one of '%s'", $resource, implode("', '", $allowed)));
        }
        $this->_data['resource'] = $resource;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount to be frozen in TRX.
     * @return $this
     */
    public function setAmount(string $amount) {
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $amount))) {
            throw new IAE('FreezeTronKMS.setAmount: $amount must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($amount, true) . ' given');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }
}
