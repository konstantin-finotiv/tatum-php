<?php

/**
 * CreateSubscriptionBalance_attr Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * CreateSubscriptionBalance_attr Model
 * 
 * @description Additional attributes based on the subscription type.
 */
class CreateSubscriptionBalanceAttr extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const TYPE_OF_BALANCE_ACCOUNT = 'account';
    public const TYPE_OF_BALANCE_AVAILABLE = 'available';
    protected static $_name = "CreateSubscriptionBalance_attr";
    protected static $_definition = [
        "limit" => ["limit", "string", null, "getLimit", "setLimit"], 
        "type_of_balance" => ["typeOfBalance", "string", null, "getTypeOfBalance", "setTypeOfBalance"]
    ];

    /**
     * CreateSubscriptionBalanceAttr
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["limit"=>null, "type_of_balance"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['limit'])) {
            $ip[] = "'limit' can't be null";
        }
        if ((mb_strlen($this->_data['limit']) > 38)) {
            $ip[] = "'limit' length must be <= 38";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['limit'])) {
            $ip[] = "'limit' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        if (is_null($this->_data['type_of_balance'])) {
            $ip[] = "'type_of_balance' can't be null";
        }
        $allowed = $this->getTypeOfBalanceAllowableValues();
        $value = $this->_data['type_of_balance'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'type_of_balance' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getTypeOfBalanceAllowableValues(): array {
        return [
            self::TYPE_OF_BALANCE_ACCOUNT,
            self::TYPE_OF_BALANCE_AVAILABLE,
        ];
    }

    /**
     * Get limit
     *
     * @return string
     */
    public function getLimit(): string {
        return $this->_data["limit"];
    }

    /**
     * Set limit
     * 
     * @param string $limit Limit to filter accounts with balance above it.
     * @return $this
     */
    public function setLimit(string $limit) {
        if ((mb_strlen($limit) > 38)) {
            throw new IAE('CreateSubscriptionBalanceAttr.setLimit: $limit length must be <= 38');
        }
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $limit))) {
            throw new IAE('CreateSubscriptionBalanceAttr.setLimit: $limit must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($limit, true) . ' given');
        }
        $this->_data['limit'] = $limit;

        return $this;
    }

    /**
     * Get type_of_balance
     *
     * @return string
     */
    public function getTypeOfBalance(): string {
        return $this->_data["type_of_balance"];
    }

    /**
     * Set type_of_balance
     * 
     * @param string $type_of_balance Type of balance to filter.
     * @return $this
     */
    public function setTypeOfBalance(string $type_of_balance) {
        $allowed = $this->getTypeOfBalanceAllowableValues();
        if (!in_array($type_of_balance, $allowed, true)) {
            throw new IAE(sprintf("CreateSubscriptionBalanceAttr.setTypeOfBalance: type_of_balance invalid value '%s', must be one of '%s'", $type_of_balance, implode("', '", $allowed)));
        }
        $this->_data['type_of_balance'] = $type_of_balance;

        return $this;
    }
}
