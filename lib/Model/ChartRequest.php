<?php

/**
 * ChartRequest Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * ChartRequest Model
 */
class ChartRequest extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const TIME_FRAME_MIN_1 = 'MIN_1';
    public const TIME_FRAME_MIN_3 = 'MIN_3';
    public const TIME_FRAME_MIN_5 = 'MIN_5';
    public const TIME_FRAME_MIN_15 = 'MIN_15';
    public const TIME_FRAME_MIN_30 = 'MIN_30';
    public const TIME_FRAME_HOUR_1 = 'HOUR_1';
    public const TIME_FRAME_HOUR_4 = 'HOUR_4';
    public const TIME_FRAME_HOUR_12 = 'HOUR_12';
    public const TIME_FRAME_DAY = 'DAY';
    public const TIME_FRAME_WEEK = 'WEEK';
    public const TIME_FRAME_MONTH = 'MONTH';
    public const TIME_FRAME_YEAR = 'YEAR';
    protected static $_name = "ChartRequest";
    protected static $_definition = [
        "pair" => ["pair", "string", null, "getPair", "setPair"], 
        "from" => ["from", "float", null, "getFrom", "setFrom"], 
        "to" => ["to", "float", null, "getTo", "setTo"], 
        "time_frame" => ["timeFrame", "string", null, "getTimeFrame", "setTimeFrame"]
    ];

    /**
     * ChartRequest
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["pair"=>null, "from"=>null, "to"=>null, "time_frame"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['pair'])) {
            $ip[] = "'pair' can't be null";
        }
        if ((mb_strlen($this->_data['pair']) > 30)) {
            $ip[] = "'pair' length must be <= 30";
        }
        if ((mb_strlen($this->_data['pair']) < 3)) {
            $ip[] = "'pair' length must be >= 3";
        }
        if (!preg_match("/^[A-a-zZ0-9_\\-]+\/[A-Za-z0-9_\\-]+$/", $this->_data['pair'])) {
            $ip[] = "'pair' must match /^[A-a-zZ0-9_\\-]+\/[A-Za-z0-9_\\-]+$/";
        }
        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if (($this->_data['from'] < 0)) {
            $ip[] = "'from' must be >= 0";
        }
        if (is_null($this->_data['to'])) {
            $ip[] = "'to' can't be null";
        }
        if (($this->_data['to'] < 0)) {
            $ip[] = "'to' must be >= 0";
        }
        if (is_null($this->_data['time_frame'])) {
            $ip[] = "'time_frame' can't be null";
        }
        $allowed = $this->getTimeFrameAllowableValues();
        $value = $this->_data['time_frame'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'time_frame' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getTimeFrameAllowableValues(): array {
        return [
            self::TIME_FRAME_MIN_1,
            self::TIME_FRAME_MIN_3,
            self::TIME_FRAME_MIN_5,
            self::TIME_FRAME_MIN_15,
            self::TIME_FRAME_MIN_30,
            self::TIME_FRAME_HOUR_1,
            self::TIME_FRAME_HOUR_4,
            self::TIME_FRAME_HOUR_12,
            self::TIME_FRAME_DAY,
            self::TIME_FRAME_WEEK,
            self::TIME_FRAME_MONTH,
            self::TIME_FRAME_YEAR,
        ];
    }

    /**
     * Get pair
     *
     * @return string
     */
    public function getPair(): string {
        return $this->_data["pair"];
    }

    /**
     * Set pair
     * 
     * @param string $pair Trading pair
     * @return $this
     */
    public function setPair(string $pair) {
        if ((mb_strlen($pair) > 30)) {
            throw new IAE('ChartRequest.setPair: $pair length must be <= 30');
        }
        if ((mb_strlen($pair) < 3)) {
            throw new IAE('ChartRequest.setPair: $pair length must be >= 3');
        }
        if ((!preg_match("/^[A-a-zZ0-9_\\-]+\/[A-Za-z0-9_\\-]+$/", $pair))) {
            throw new IAE('ChartRequest.setPair: $pair must match /^[A-a-zZ0-9_\\-]+\/[A-Za-z0-9_\\-]+$/, ' . var_export($pair, true) . ' given');
        }
        $this->_data['pair'] = $pair;

        return $this;
    }

    /**
     * Get from
     *
     * @return float
     */
    public function getFrom(): float {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param float $from Start interval in UTC millis.
     * @return $this
     */
    public function setFrom(float $from) {
        if (($from < 0)) {
            throw new IAE('ChartRequest.setFrom: $from must be >=0');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get to
     *
     * @return float
     */
    public function getTo(): float {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param float $to End interval in UTC millis.
     * @return $this
     */
    public function setTo(float $to) {
        if (($to < 0)) {
            throw new IAE('ChartRequest.setTo: $to must be >=0');
        }
        $this->_data['to'] = $to;

        return $this;
    }

    /**
     * Get time_frame
     *
     * @return string
     */
    public function getTimeFrame(): string {
        return $this->_data["time_frame"];
    }

    /**
     * Set time_frame
     * 
     * @param string $time_frame Time frame of the chart.
     * @return $this
     */
    public function setTimeFrame(string $time_frame) {
        $allowed = $this->getTimeFrameAllowableValues();
        if (!in_array($time_frame, $allowed, true)) {
            throw new IAE(sprintf("ChartRequest.setTimeFrame: time_frame invalid value '%s', must be one of '%s'", $time_frame, implode("', '", $allowed)));
        }
        $this->_data['time_frame'] = $time_frame;

        return $this;
    }
}
