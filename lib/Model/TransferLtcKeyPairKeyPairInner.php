<?php

/**
 * TransferLtcKeyPair_keyPair_inner Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TransferLtcKeyPair_keyPair_inner Model
 */
class TransferLtcKeyPairKeyPairInner extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "TransferLtcKeyPair_keyPair_inner";
    protected static $_definition = [
        "address" => ["address", "string", null, "getAddress", "setAddress"], 
        "private_key" => ["privateKey", "string", null, "getPrivateKey", "setPrivateKey"]
    ];

    /**
     * TransferLtcKeyPairKeyPairInner
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["address"=>null, "private_key"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (!is_null($this->_data['address']) && (mb_strlen($this->_data['address']) > 50)) {
            $ip[] = "'address' length must be <= 50";
        }
        if (!is_null($this->_data['address']) && (mb_strlen($this->_data['address']) < 30)) {
            $ip[] = "'address' length must be >= 30";
        }
        if (!is_null($this->_data['private_key']) && (mb_strlen($this->_data['private_key']) > 52)) {
            $ip[] = "'private_key' length must be <= 52";
        }
        if (!is_null($this->_data['private_key']) && (mb_strlen($this->_data['private_key']) < 52)) {
            $ip[] = "'private_key' length must be >= 52";
        }
        
        return $ip;
    }

    /**
     * Get address
     *
     * @return string|null
     */
    public function getAddress(): ?string {
        return $this->_data["address"];
    }

    /**
     * Set address
     * 
     * @param string|null $address Blockchain address assigned to account withdrawal is made from.
     * @return $this
     */
    public function setAddress(?string $address) {
        if (!is_null($address) && (mb_strlen($address) > 50)) {
            throw new IAE('TransferLtcKeyPairKeyPairInner.setAddress: $address length must be <= 50');
        }
        if (!is_null($address) && (mb_strlen($address) < 30)) {
            throw new IAE('TransferLtcKeyPairKeyPairInner.setAddress: $address length must be >= 30');
        }
        $this->_data['address'] = $address;

        return $this;
    }

    /**
     * Get private_key
     *
     * @return string|null
     */
    public function getPrivateKey(): ?string {
        return $this->_data["private_key"];
    }

    /**
     * Set private_key
     * 
     * @param string|null $private_key Private key of blockchain address.
     * @return $this
     */
    public function setPrivateKey(?string $private_key) {
        if (!is_null($private_key) && (mb_strlen($private_key) > 52)) {
            throw new IAE('TransferLtcKeyPairKeyPairInner.setPrivateKey: $private_key length must be <= 52');
        }
        if (!is_null($private_key) && (mb_strlen($private_key) < 52)) {
            throw new IAE('TransferLtcKeyPairKeyPairInner.setPrivateKey: $private_key length must be >= 52');
        }
        $this->_data['private_key'] = $private_key;

        return $this;
    }
}
