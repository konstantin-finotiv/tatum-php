<?php

/**
 * CreateSubscriptionNotification_attr Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * CreateSubscriptionNotification_attr Model
 * 
 * @description Additional attributes based on the subscription type.
 */
class CreateSubscriptionNotificationAttr extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_SOL = 'SOL';
    public const CHAIN_ETH = 'ETH';
    public const CHAIN_MATIC = 'MATIC';
    public const CHAIN_CELO = 'CELO';
    public const CHAIN_KLAY = 'KLAY';
    public const CHAIN_BTC = 'BTC';
    public const CHAIN_LTC = 'LTC';
    public const CHAIN_BCH = 'BCH';
    public const CHAIN_DOGE = 'DOGE';
    public const CHAIN_TRON = 'TRON';
    public const CHAIN_BSC = 'BSC';
    protected static $_name = "CreateSubscriptionNotification_attr";
    protected static $_definition = [
        "address" => ["address", "string", null, "getAddress", "setAddress"], 
        "chain" => ["chain", "string", null, "getChain", "setChain"], 
        "url" => ["url", "string", null, "getUrl", "setUrl"]
    ];

    /**
     * CreateSubscriptionNotificationAttr
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["address"=>null, "chain"=>null, "url"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['address'])) {
            $ip[] = "'address' can't be null";
        }
        if ((mb_strlen($this->_data['address']) > 128)) {
            $ip[] = "'address' length must be <= 128";
        }
        if ((mb_strlen($this->_data['address']) < 13)) {
            $ip[] = "'address' length must be >= 13";
        }
        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['url'])) {
            $ip[] = "'url' can't be null";
        }
        if ((mb_strlen($this->_data['url']) > 500)) {
            $ip[] = "'url' length must be <= 500";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_SOL,
            self::CHAIN_ETH,
            self::CHAIN_MATIC,
            self::CHAIN_CELO,
            self::CHAIN_KLAY,
            self::CHAIN_BTC,
            self::CHAIN_LTC,
            self::CHAIN_BCH,
            self::CHAIN_DOGE,
            self::CHAIN_TRON,
            self::CHAIN_BSC,
        ];
    }

    /**
     * Get address
     *
     * @return string
     */
    public function getAddress(): string {
        return $this->_data["address"];
    }

    /**
     * Set address
     * 
     * @param string $address Blockchain address to watch.
     * @return $this
     */
    public function setAddress(string $address) {
        if ((mb_strlen($address) > 128)) {
            throw new IAE('CreateSubscriptionNotificationAttr.setAddress: $address length must be <= 128');
        }
        if ((mb_strlen($address) < 13)) {
            throw new IAE('CreateSubscriptionNotificationAttr.setAddress: $address length must be >= 13');
        }
        $this->_data['address'] = $address;

        return $this;
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain Blockchain of the address.
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("CreateSubscriptionNotificationAttr.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get url
     *
     * @return string
     */
    public function getUrl(): string {
        return $this->_data["url"];
    }

    /**
     * Set url
     * 
     * @param string $url URL of the endpoint, where HTTP POST request will be sent, when transaction is detected on the address.
     * @return $this
     */
    public function setUrl(string $url) {
        if ((mb_strlen($url) > 500)) {
            throw new IAE('CreateSubscriptionNotificationAttr.setUrl: $url length must be <= 500');
        }
        $this->_data['url'] = $url;

        return $this;
    }
}
