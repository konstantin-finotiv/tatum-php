<?php

/**
 * XdcTx Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * XdcTx Model
 */
class XdcTx extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "XdcTx";
    protected static $_definition = [
        "hash" => ["hash", "string", null, "getHash", "setHash"], 
        "nonce" => ["nonce", "float", null, "getNonce", "setNonce"], 
        "block_hash" => ["blockHash", "string", null, "getBlockHash", "setBlockHash"], 
        "block_number" => ["blockNumber", "float", null, "getBlockNumber", "setBlockNumber"], 
        "transaction_index" => ["transactionIndex", "float", null, "getTransactionIndex", "setTransactionIndex"], 
        "from" => ["from", "string", null, "getFrom", "setFrom"], 
        "to" => ["to", "string", null, "getTo", "setTo"], 
        "value" => ["value", "string", null, "getValue", "setValue"], 
        "gas" => ["gas", "float", null, "getGas", "setGas"], 
        "gas_price" => ["gasPrice", "string", null, "getGasPrice", "setGasPrice"], 
        "input" => ["input", "string", null, "getInput", "setInput"], 
        "status" => ["status", "bool", null, "getStatus", "setStatus"], 
        "gas_used" => ["gasUsed", "float", null, "getGasUsed", "setGasUsed"], 
        "cumulative_gas_used" => ["cumulativeGasUsed", "float", null, "getCumulativeGasUsed", "setCumulativeGasUsed"], 
        "contract_address" => ["contractAddress", "string", null, "getContractAddress", "setContractAddress"], 
        "logs" => ["logs", "\Tatum\Model\KlaytnTxLogsInner[]", null, "getLogs", "setLogs"], 
        "logs_bloom" => ["logsBloom", "string", 'DATA, 256 Bytes', "getLogsBloom", "setLogsBloom"], 
        "root" => ["root", "string", null, "getRoot", "setRoot"]
    ];

    /**
     * XdcTx
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["hash"=>null, "nonce"=>null, "block_hash"=>null, "block_number"=>null, "transaction_index"=>null, "from"=>null, "to"=>null, "value"=>null, "gas"=>null, "gas_price"=>null, "input"=>null, "status"=>null, "gas_used"=>null, "cumulative_gas_used"=>null, "contract_address"=>null, "logs"=>null, "logs_bloom"=>null, "root"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        
        return $ip;
    }

    /**
     * Get hash
     *
     * @return string|null
     */
    public function getHash(): ?string {
        return $this->_data["hash"];
    }

    /**
     * Set hash
     * 
     * @param string|null $hash Hash of the transaction.
     * @return $this
     */
    public function setHash(?string $hash) {
        $this->_data['hash'] = $hash;

        return $this;
    }

    /**
     * Get nonce
     *
     * @return float|null
     */
    public function getNonce(): ?float {
        return $this->_data["nonce"];
    }

    /**
     * Set nonce
     * 
     * @param float|null $nonce The number of transactions made by the sender prior to this one.
     * @return $this
     */
    public function setNonce(?float $nonce) {
        $this->_data['nonce'] = $nonce;

        return $this;
    }

    /**
     * Get block_hash
     *
     * @return string|null
     */
    public function getBlockHash(): ?string {
        return $this->_data["block_hash"];
    }

    /**
     * Set block_hash
     * 
     * @param string|null $block_hash Hash of the block where this transaction was in.
     * @return $this
     */
    public function setBlockHash(?string $block_hash) {
        $this->_data['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Get block_number
     *
     * @return float|null
     */
    public function getBlockNumber(): ?float {
        return $this->_data["block_number"];
    }

    /**
     * Set block_number
     * 
     * @param float|null $block_number Block number where this transaction was in.
     * @return $this
     */
    public function setBlockNumber(?float $block_number) {
        $this->_data['block_number'] = $block_number;

        return $this;
    }

    /**
     * Get transaction_index
     *
     * @return float|null
     */
    public function getTransactionIndex(): ?float {
        return $this->_data["transaction_index"];
    }

    /**
     * Set transaction_index
     * 
     * @param float|null $transaction_index Integer of the transactions index position in the block.
     * @return $this
     */
    public function setTransactionIndex(?float $transaction_index) {
        $this->_data['transaction_index'] = $transaction_index;

        return $this;
    }

    /**
     * Get from
     *
     * @return string|null
     */
    public function getFrom(): ?string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string|null $from Address of the sender.
     * @return $this
     */
    public function setFrom(?string $from) {
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get to
     *
     * @return string|null
     */
    public function getTo(): ?string {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param string|null $to Address of the receiver. 'null' when its a contract creation transaction.
     * @return $this
     */
    public function setTo(?string $to) {
        $this->_data['to'] = $to;

        return $this;
    }

    /**
     * Get value
     *
     * @return string|null
     */
    public function getValue(): ?string {
        return $this->_data["value"];
    }

    /**
     * Set value
     * 
     * @param string|null $value Value transferred in wei.
     * @return $this
     */
    public function setValue(?string $value) {
        $this->_data['value'] = $value;

        return $this;
    }

    /**
     * Get gas
     *
     * @return float|null
     */
    public function getGas(): ?float {
        return $this->_data["gas"];
    }

    /**
     * Set gas
     * 
     * @param float|null $gas Gas provided by the sender.
     * @return $this
     */
    public function setGas(?float $gas) {
        $this->_data['gas'] = $gas;

        return $this;
    }

    /**
     * Get gas_price
     *
     * @return string|null
     */
    public function getGasPrice(): ?string {
        return $this->_data["gas_price"];
    }

    /**
     * Set gas_price
     * 
     * @param string|null $gas_price Gas price provided by the sender in wei.
     * @return $this
     */
    public function setGasPrice(?string $gas_price) {
        $this->_data['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Get input
     *
     * @return string|null
     */
    public function getInput(): ?string {
        return $this->_data["input"];
    }

    /**
     * Set input
     * 
     * @param string|null $input The data sent along with the transaction.
     * @return $this
     */
    public function setInput(?string $input) {
        $this->_data['input'] = $input;

        return $this;
    }

    /**
     * Get status
     *
     * @return bool|null
     */
    public function getStatus(): ?bool {
        return $this->_data["status"];
    }

    /**
     * Set status
     * 
     * @param bool|null $status TRUE if the transaction was successful, FALSE, if the EVM reverted the transaction.
     * @return $this
     */
    public function setStatus(?bool $status) {
        $this->_data['status'] = $status;

        return $this;
    }

    /**
     * Get gas_used
     *
     * @return float|null
     */
    public function getGasUsed(): ?float {
        return $this->_data["gas_used"];
    }

    /**
     * Set gas_used
     * 
     * @param float|null $gas_used The amount of gas used by this specific transaction alone.
     * @return $this
     */
    public function setGasUsed(?float $gas_used) {
        $this->_data['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Get cumulative_gas_used
     *
     * @return float|null
     */
    public function getCumulativeGasUsed(): ?float {
        return $this->_data["cumulative_gas_used"];
    }

    /**
     * Set cumulative_gas_used
     * 
     * @param float|null $cumulative_gas_used The total amount of gas used when this transaction was executed in the block.
     * @return $this
     */
    public function setCumulativeGasUsed(?float $cumulative_gas_used) {
        $this->_data['cumulative_gas_used'] = $cumulative_gas_used;

        return $this;
    }

    /**
     * Get contract_address
     *
     * @return string|null
     */
    public function getContractAddress(): ?string {
        return $this->_data["contract_address"];
    }

    /**
     * Set contract_address
     * 
     * @param string|null $contract_address The contract address created, if the transaction was a contract creation, otherwise null.
     * @return $this
     */
    public function setContractAddress(?string $contract_address) {
        $this->_data['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Get logs
     *
     * @return \Tatum\Model\KlaytnTxLogsInner[]|null
     */
    public function getLogs(): ?array {
        return $this->_data["logs"];
    }

    /**
     * Set logs
     * 
     * @param \Tatum\Model\KlaytnTxLogsInner[]|null $logs Log events, that happened in this transaction.
     * @return $this
     */
    public function setLogs(?array $logs) {
        $this->_data['logs'] = $logs;

        return $this;
    }

    /**
     * Get logs_bloom
     *
     * @return string|null
     */
    public function getLogsBloom(): ?string {
        return $this->_data["logs_bloom"];
    }

    /**
     * Set logs_bloom
     * 
     * @param string|null $logs_bloom Bloom filter for light clients to quickly retrieve related logs.
     * @return $this
     */
    public function setLogsBloom(?string $logs_bloom) {
        $this->_data['logs_bloom'] = $logs_bloom;

        return $this;
    }

    /**
     * Get root
     *
     * @return string|null
     */
    public function getRoot(): ?string {
        return $this->_data["root"];
    }

    /**
     * Set root
     * 
     * @param string|null $root 32 bytes of post-transaction stateroot (pre Byzantium)
     * @return $this
     */
    public function setRoot(?string $root) {
        $this->_data['root'] = $root;

        return $this;
    }
}
