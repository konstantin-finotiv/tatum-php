<?php

/**
 * PendingTransaction Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * PendingTransaction Model
 */
class PendingTransaction extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_BNB = 'BNB';
    public const CHAIN_BTC = 'BTC';
    public const CHAIN_ETH = 'ETH';
    public const CHAIN_XLM = 'XLM';
    public const CHAIN_XRP = 'XRP';
    public const CHAIN_BCH = 'BCH';
    public const CHAIN_LTC = 'LTC';
    public const CHAIN_DOGE = 'DOGE';
    public const CHAIN_VET = 'VET';
    public const CHAIN_BSC = 'BSC';
    public const CHAIN_MATIC = 'MATIC';
    public const CHAIN_CELO = 'CELO';
    public const CHAIN_FLOW = 'FLOW';
    public const CHAIN_TRON = 'TRON';
    public const CHAIN_ONE = 'ONE';
    public const CHAIN_XDC = 'XDC';
    public const CHAIN_EGLD = 'EGLD';
    public const CHAIN_KLAY = 'KLAY';
    public const CHAIN_SOL = 'SOL';
    protected static $_name = "PendingTransaction";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId"], 
        "chain" => ["chain", "string", null, "getChain", "setChain"], 
        "hashes" => ["hashes", "string[]", null, "getHashes", "setHashes"], 
        "serialized_transaction" => ["serializedTransaction", "string", null, "getSerializedTransaction", "setSerializedTransaction"], 
        "withdrawal_id" => ["withdrawalId", "string", null, "getWithdrawalId", "setWithdrawalId"], 
        "index" => ["index", "float", null, "getIndex", "setIndex"], 
        "tx_id" => ["txId", "string", null, "getTxId", "setTxId"], 
        "withdrawal_responses" => ["withdrawalResponses", "\Tatum\Model\ResponseData[]", null, "getWithdrawalResponses", "setWithdrawalResponses"]
    ];

    /**
     * PendingTransaction
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["id"=>null, "chain"=>null, "hashes"=>null, "serialized_transaction"=>null, "withdrawal_id"=>null, "index"=>null, "tx_id"=>null, "withdrawal_responses"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['id'])) {
            $ip[] = "'id' can't be null";
        }
        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['hashes'])) {
            $ip[] = "'hashes' can't be null";
        }
        if (is_null($this->_data['serialized_transaction'])) {
            $ip[] = "'serialized_transaction' can't be null";
        }
        if (!is_null($this->_data['index']) && ($this->_data['index'] < 0)) {
            $ip[] = "'index' must be >= 0";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_BNB,
            self::CHAIN_BTC,
            self::CHAIN_ETH,
            self::CHAIN_XLM,
            self::CHAIN_XRP,
            self::CHAIN_BCH,
            self::CHAIN_LTC,
            self::CHAIN_DOGE,
            self::CHAIN_VET,
            self::CHAIN_BSC,
            self::CHAIN_MATIC,
            self::CHAIN_CELO,
            self::CHAIN_FLOW,
            self::CHAIN_TRON,
            self::CHAIN_ONE,
            self::CHAIN_XDC,
            self::CHAIN_EGLD,
            self::CHAIN_KLAY,
            self::CHAIN_SOL,
        ];
    }

    /**
     * Get id
     *
     * @return string
     */
    public function getId(): string {
        return $this->_data["id"];
    }

    /**
     * Set id
     * 
     * @param string $id ID of the pending transaction
     * @return $this
     */
    public function setId(string $id) {
        $this->_data['id'] = $id;

        return $this;
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain Blockchain of the transaction
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("PendingTransaction.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get hashes
     *
     * @return string[]
     */
    public function getHashes(): array {
        return $this->_data["hashes"];
    }

    /**
     * Set hashes
     * 
     * @param string[] $hashes List of the signature Ids to be used to sign transaction. Those hashes should be in order of signing for the BTC, LTC or BCH blockchains.
     * @return $this
     */
    public function setHashes(array $hashes) {
        $this->_data['hashes'] = $hashes;

        return $this;
    }

    /**
     * Get serialized_transaction
     *
     * @return string
     */
    public function getSerializedTransaction(): string {
        return $this->_data["serialized_transaction"];
    }

    /**
     * Set serialized_transaction
     * 
     * @param string $serialized_transaction Serialized data of the transaction to be signed. It can be JSON, HEX or any other representation based on the blockchain.
     * @return $this
     */
    public function setSerializedTransaction(string $serialized_transaction) {
        $this->_data['serialized_transaction'] = $serialized_transaction;

        return $this;
    }

    /**
     * Get withdrawal_id
     *
     * @return string|null
     */
    public function getWithdrawalId(): ?string {
        return $this->_data["withdrawal_id"];
    }

    /**
     * Set withdrawal_id
     * 
     * @param string|null $withdrawal_id ID of the pending off-chain withdrawal connected to this transaction
     * @return $this
     */
    public function setWithdrawalId(?string $withdrawal_id) {
        $this->_data['withdrawal_id'] = $withdrawal_id;

        return $this;
    }

    /**
     * Get index
     *
     * @return float|null
     */
    public function getIndex(): ?float {
        return $this->_data["index"];
    }

    /**
     * Set index
     * 
     * @param float|null $index In case of mnemonic type of signature Id, this is the index to the specific account that should be used for signature.
     * @return $this
     */
    public function setIndex(?float $index) {
        if (!is_null($index) && ($index < 0)) {
            throw new IAE('PendingTransaction.setIndex: $index must be >=0');
        }
        $this->_data['index'] = $index;

        return $this;
    }

    /**
     * Get tx_id
     *
     * @return string|null
     */
    public function getTxId(): ?string {
        return $this->_data["tx_id"];
    }

    /**
     * Set tx_id
     * 
     * @param string|null $tx_id TX hash of successful transaction.
     * @return $this
     */
    public function setTxId(?string $tx_id) {
        $this->_data['tx_id'] = $tx_id;

        return $this;
    }

    /**
     * Get withdrawal_responses
     *
     * @return \Tatum\Model\ResponseData[]|null
     */
    public function getWithdrawalResponses(): ?array {
        return $this->_data["withdrawal_responses"];
    }

    /**
     * Set withdrawal_responses
     * 
     * @param \Tatum\Model\ResponseData[]|null $withdrawal_responses Additional information used for BTC, LTC, DOGE and BCH off-chain to blockchain transactions.
     * @return $this
     */
    public function setWithdrawalResponses(?array $withdrawal_responses) {
        $this->_data['withdrawal_responses'] = $withdrawal_responses;

        return $this;
    }
}
