<?php

/**
 * EstimateFeeBlockchain_200_response Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * EstimateFeeBlockchain_200_response Model
 */
class EstimateFeeBlockchain200Response extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "EstimateFeeBlockchain_200_response";
    protected static $_definition = [
        "fast" => ["fast", "string", null, "getFast", "setFast", null], 
        "medium" => ["medium", "string", null, "getMedium", "setMedium", null], 
        "slow" => ["slow", "string", null, "getSlow", "setSlow", null], 
        "gas_limit" => ["gasLimit", "float", null, "getGasLimit", "setGasLimit", null], 
        "gas_price" => ["gasPrice", "float", null, "getGasPrice", "setGasPrice", null]
    ];

    /**
     * EstimateFeeBlockchain200Response
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['fast'])) {
            $ip[] = "'fast' can't be null";
        }
        if (is_null($this->_data['medium'])) {
            $ip[] = "'medium' can't be null";
        }
        if (is_null($this->_data['slow'])) {
            $ip[] = "'slow' can't be null";
        }
        if (is_null($this->_data['gas_limit'])) {
            $ip[] = "'gas_limit' can't be null";
        }
        if (is_null($this->_data['gas_price'])) {
            $ip[] = "'gas_price' can't be null";
        }
        return $ip;
    }


    /**
     * Get fast
     *
     * @return string
     */
    public function getFast(): string {
        return $this->_data["fast"];
    }

    /**
     * Set fast
     * 
     * @param string $fast Transaction fee in BTC/LTC to be paid, if transaction should be included in next 1-2 blocks.
     * @return $this
     */
    public function setFast(string $fast) {
        $this->_data['fast'] = $fast;

        return $this;
    }

    /**
     * Get medium
     *
     * @return string
     */
    public function getMedium(): string {
        return $this->_data["medium"];
    }

    /**
     * Set medium
     * 
     * @param string $medium Transaction fee in BTC/LTC to be paid, if transaction should be included in next 5-6 blocks.
     * @return $this
     */
    public function setMedium(string $medium) {
        $this->_data['medium'] = $medium;

        return $this;
    }

    /**
     * Get slow
     *
     * @return string
     */
    public function getSlow(): string {
        return $this->_data["slow"];
    }

    /**
     * Set slow
     * 
     * @param string $slow Transaction fee in BTC/LTC to be paid, if transaction should be included in next 7+ blocks.
     * @return $this
     */
    public function setSlow(string $slow) {
        $this->_data['slow'] = $slow;

        return $this;
    }

    /**
     * Get gas_limit
     *
     * @return float
     */
    public function getGasLimit(): float {
        return $this->_data["gas_limit"];
    }

    /**
     * Set gas_limit
     * 
     * @param float $gas_limit Gas limit for transaction in gas price.
     * @return $this
     */
    public function setGasLimit(float $gas_limit) {
        $this->_data['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Get gas_price
     *
     * @return float
     */
    public function getGasPrice(): float {
        return $this->_data["gas_price"];
    }

    /**
     * Set gas_price
     * 
     * @param float $gas_price Gas price in Gwei.
     * @return $this
     */
    public function setGasPrice(float $gas_price) {
        $this->_data['gas_price'] = $gas_price;

        return $this;
    }
}
