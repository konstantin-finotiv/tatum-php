<?php

/**
 * SolanaBroadcastConfirmOptions Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * SolanaBroadcastConfirmOptions Model
 * 
 * @description Options for sending and waiting for a transaction
 */
class SolanaBroadcastConfirmOptions extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const COMMITMENT_CONFIRMED = 'confirmed';
    public const COMMITMENT_FINALIZED = 'finalized';
    public const PREFLIGHT_COMMITMENT_CONFIRMED = 'confirmed';
    public const PREFLIGHT_COMMITMENT_FINALIZED = 'finalized';
    public const PREFLIGHT_COMMITMENT_PROCESSED = 'processed';
    public const PREFLIGHT_COMMITMENT_RECENT = 'recent';
    public const PREFLIGHT_COMMITMENT_SINGLE = 'single';
    public const PREFLIGHT_COMMITMENT_SINGLE_GOSSIP = 'singleGossip';
    public const PREFLIGHT_COMMITMENT_MAX = 'max';
    protected static $_name = "SolanaBroadcastConfirmOptions";
    protected static $_definition = [
        "commitment" => ["commitment", "string", null, "getCommitment", "setCommitment"], 
        "preflight_commitment" => ["preflightCommitment", "string", null, "getPreflightCommitment", "setPreflightCommitment"]
    ];

    /**
     * SolanaBroadcastConfirmOptions
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["commitment"=>null, "preflight_commitment"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        $allowed = $this->getCommitmentAllowableValues();
        $value = $this->_data['commitment'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'commitment' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        $allowed = $this->getPreflightCommitmentAllowableValues();
        $value = $this->_data['preflight_commitment'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'preflight_commitment' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getCommitmentAllowableValues(): array {
        return [
            self::COMMITMENT_CONFIRMED,
            self::COMMITMENT_FINALIZED,
        ];
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getPreflightCommitmentAllowableValues(): array {
        return [
            self::PREFLIGHT_COMMITMENT_CONFIRMED,
            self::PREFLIGHT_COMMITMENT_FINALIZED,
            self::PREFLIGHT_COMMITMENT_PROCESSED,
            self::PREFLIGHT_COMMITMENT_RECENT,
            self::PREFLIGHT_COMMITMENT_SINGLE,
            self::PREFLIGHT_COMMITMENT_SINGLE_GOSSIP,
            self::PREFLIGHT_COMMITMENT_MAX,
        ];
    }

    /**
     * Get commitment
     *
     * @return string|null
     */
    public function getCommitment(): ?string {
        return $this->_data["commitment"];
    }

    /**
     * Set commitment
     * 
     * @param string|null $commitment Commitment to waiting for transaction confirmation
     * @return $this
     */
    public function setCommitment(?string $commitment) {
        $allowed = $this->getCommitmentAllowableValues();
        if (!is_null($commitment) && !in_array($commitment, $allowed, true)) {
            throw new IAE(sprintf("SolanaBroadcastConfirmOptions.setCommitment: commitment invalid value '%s', must be one of '%s'", $commitment, implode("', '", $allowed)));
        }
        $this->_data['commitment'] = $commitment;

        return $this;
    }

    /**
     * Get preflight_commitment
     *
     * @return string|null
     */
    public function getPreflightCommitment(): ?string {
        return $this->_data["preflight_commitment"];
    }

    /**
     * Set preflight_commitment
     * 
     * @param string|null $preflight_commitment Preflight Commitment.
     * @return $this
     */
    public function setPreflightCommitment(?string $preflight_commitment) {
        $allowed = $this->getPreflightCommitmentAllowableValues();
        if (!is_null($preflight_commitment) && !in_array($preflight_commitment, $allowed, true)) {
            throw new IAE(sprintf("SolanaBroadcastConfirmOptions.setPreflightCommitment: preflight_commitment invalid value '%s', must be one of '%s'", $preflight_commitment, implode("', '", $allowed)));
        }
        $this->_data['preflight_commitment'] = $preflight_commitment;

        return $this;
    }
}
