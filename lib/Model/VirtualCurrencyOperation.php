<?php

/**
 * VirtualCurrencyOperation Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * VirtualCurrencyOperation Model
 */
class VirtualCurrencyOperation extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "VirtualCurrencyOperation";
    protected static $_definition = [
        "account_id" => ["accountId", "string", null, "getAccountId", "setAccountId"], 
        "amount" => ["amount", "string", null, "getAmount", "setAmount"], 
        "payment_id" => ["paymentId", "string", null, "getPaymentId", "setPaymentId"], 
        "reference" => ["reference", "string", null, "getReference", "setReference"], 
        "transaction_code" => ["transactionCode", "string", null, "getTransactionCode", "setTransactionCode"], 
        "recipient_note" => ["recipientNote", "string", null, "getRecipientNote", "setRecipientNote"], 
        "counter_account" => ["counterAccount", "string", null, "getCounterAccount", "setCounterAccount"], 
        "sender_note" => ["senderNote", "string", null, "getSenderNote", "setSenderNote"]
    ];

    /**
     * VirtualCurrencyOperation
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["account_id"=>null, "amount"=>null, "payment_id"=>null, "reference"=>null, "transaction_code"=>null, "recipient_note"=>null, "counter_account"=>null, "sender_note"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['account_id'])) {
            $ip[] = "'account_id' can't be null";
        }
        if ((mb_strlen($this->_data['account_id']) > 24)) {
            $ip[] = "'account_id' length must be <= 24";
        }
        if ((mb_strlen($this->_data['account_id']) < 24)) {
            $ip[] = "'account_id' length must be >= 24";
        }
        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if ((mb_strlen($this->_data['amount']) > 38)) {
            $ip[] = "'amount' length must be <= 38";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['amount'])) {
            $ip[] = "'amount' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        if (!is_null($this->_data['payment_id']) && (mb_strlen($this->_data['payment_id']) > 100)) {
            $ip[] = "'payment_id' length must be <= 100";
        }
        if (!is_null($this->_data['payment_id']) && (mb_strlen($this->_data['payment_id']) < 1)) {
            $ip[] = "'payment_id' length must be >= 1";
        }
        if (!is_null($this->_data['reference']) && (mb_strlen($this->_data['reference']) > 100)) {
            $ip[] = "'reference' length must be <= 100";
        }
        if (!is_null($this->_data['reference']) && (mb_strlen($this->_data['reference']) < 1)) {
            $ip[] = "'reference' length must be >= 1";
        }
        if (!is_null($this->_data['transaction_code']) && (mb_strlen($this->_data['transaction_code']) > 100)) {
            $ip[] = "'transaction_code' length must be <= 100";
        }
        if (!is_null($this->_data['transaction_code']) && (mb_strlen($this->_data['transaction_code']) < 1)) {
            $ip[] = "'transaction_code' length must be >= 1";
        }
        if (!is_null($this->_data['recipient_note']) && (mb_strlen($this->_data['recipient_note']) > 500)) {
            $ip[] = "'recipient_note' length must be <= 500";
        }
        if (!is_null($this->_data['recipient_note']) && (mb_strlen($this->_data['recipient_note']) < 1)) {
            $ip[] = "'recipient_note' length must be >= 1";
        }
        if (!is_null($this->_data['counter_account']) && (mb_strlen($this->_data['counter_account']) > 24)) {
            $ip[] = "'counter_account' length must be <= 24";
        }
        if (!is_null($this->_data['counter_account']) && (mb_strlen($this->_data['counter_account']) < 24)) {
            $ip[] = "'counter_account' length must be >= 24";
        }
        if (!is_null($this->_data['sender_note']) && (mb_strlen($this->_data['sender_note']) > 500)) {
            $ip[] = "'sender_note' length must be <= 500";
        }
        if (!is_null($this->_data['sender_note']) && (mb_strlen($this->_data['sender_note']) < 1)) {
            $ip[] = "'sender_note' length must be >= 1";
        }
        
        return $ip;
    }

    /**
     * Get account_id
     *
     * @return string
     */
    public function getAccountId(): string {
        return $this->_data["account_id"];
    }

    /**
     * Set account_id
     * 
     * @param string $account_id Ledger account with currency of the virtual currency, on which the operation will be performed.
     * @return $this
     */
    public function setAccountId(string $account_id) {
        if ((mb_strlen($account_id) > 24)) {
            throw new IAE('VirtualCurrencyOperation.setAccountId: $account_id length must be <= 24');
        }
        if ((mb_strlen($account_id) < 24)) {
            throw new IAE('VirtualCurrencyOperation.setAccountId: $account_id length must be >= 24');
        }
        $this->_data['account_id'] = $account_id;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount of virtual currency to operate within this operation.
     * @return $this
     */
    public function setAmount(string $amount) {
        if ((mb_strlen($amount) > 38)) {
            throw new IAE('VirtualCurrencyOperation.setAmount: $amount length must be <= 38');
        }
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $amount))) {
            throw new IAE('VirtualCurrencyOperation.setAmount: $amount must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($amount, true) . ' given');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get payment_id
     *
     * @return string|null
     */
    public function getPaymentId(): ?string {
        return $this->_data["payment_id"];
    }

    /**
     * Set payment_id
     * 
     * @param string|null $payment_id Identifier of the payment, shown for created Transaction within Tatum sender account.
     * @return $this
     */
    public function setPaymentId(?string $payment_id) {
        if (!is_null($payment_id) && (mb_strlen($payment_id) > 100)) {
            throw new IAE('VirtualCurrencyOperation.setPaymentId: $payment_id length must be <= 100');
        }
        if (!is_null($payment_id) && (mb_strlen($payment_id) < 1)) {
            throw new IAE('VirtualCurrencyOperation.setPaymentId: $payment_id length must be >= 1');
        }
        $this->_data['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Get reference
     *
     * @return string|null
     */
    public function getReference(): ?string {
        return $this->_data["reference"];
    }

    /**
     * Set reference
     * 
     * @param string|null $reference Reference of the payment.
     * @return $this
     */
    public function setReference(?string $reference) {
        if (!is_null($reference) && (mb_strlen($reference) > 100)) {
            throw new IAE('VirtualCurrencyOperation.setReference: $reference length must be <= 100');
        }
        if (!is_null($reference) && (mb_strlen($reference) < 1)) {
            throw new IAE('VirtualCurrencyOperation.setReference: $reference length must be >= 1');
        }
        $this->_data['reference'] = $reference;

        return $this;
    }

    /**
     * Get transaction_code
     *
     * @return string|null
     */
    public function getTransactionCode(): ?string {
        return $this->_data["transaction_code"];
    }

    /**
     * Set transaction_code
     * 
     * @param string|null $transaction_code For bookkeeping to distinct transaction purpose.
     * @return $this
     */
    public function setTransactionCode(?string $transaction_code) {
        if (!is_null($transaction_code) && (mb_strlen($transaction_code) > 100)) {
            throw new IAE('VirtualCurrencyOperation.setTransactionCode: $transaction_code length must be <= 100');
        }
        if (!is_null($transaction_code) && (mb_strlen($transaction_code) < 1)) {
            throw new IAE('VirtualCurrencyOperation.setTransactionCode: $transaction_code length must be >= 1');
        }
        $this->_data['transaction_code'] = $transaction_code;

        return $this;
    }

    /**
     * Get recipient_note
     *
     * @return string|null
     */
    public function getRecipientNote(): ?string {
        return $this->_data["recipient_note"];
    }

    /**
     * Set recipient_note
     * 
     * @param string|null $recipient_note Note visible to both, sender and recipient. Available for both Mint and Revoke operations
     * @return $this
     */
    public function setRecipientNote(?string $recipient_note) {
        if (!is_null($recipient_note) && (mb_strlen($recipient_note) > 500)) {
            throw new IAE('VirtualCurrencyOperation.setRecipientNote: $recipient_note length must be <= 500');
        }
        if (!is_null($recipient_note) && (mb_strlen($recipient_note) < 1)) {
            throw new IAE('VirtualCurrencyOperation.setRecipientNote: $recipient_note length must be >= 1');
        }
        $this->_data['recipient_note'] = $recipient_note;

        return $this;
    }

    /**
     * Get counter_account
     *
     * @return string|null
     */
    public function getCounterAccount(): ?string {
        return $this->_data["counter_account"];
    }

    /**
     * Set counter_account
     * 
     * @param string|null $counter_account External account identifier. By default, there is no counterAccount present in the transaction.
     * @return $this
     */
    public function setCounterAccount(?string $counter_account) {
        if (!is_null($counter_account) && (mb_strlen($counter_account) > 24)) {
            throw new IAE('VirtualCurrencyOperation.setCounterAccount: $counter_account length must be <= 24');
        }
        if (!is_null($counter_account) && (mb_strlen($counter_account) < 24)) {
            throw new IAE('VirtualCurrencyOperation.setCounterAccount: $counter_account length must be >= 24');
        }
        $this->_data['counter_account'] = $counter_account;

        return $this;
    }

    /**
     * Get sender_note
     *
     * @return string|null
     */
    public function getSenderNote(): ?string {
        return $this->_data["sender_note"];
    }

    /**
     * Set sender_note
     * 
     * @param string|null $sender_note Note visible to sender. Available in Revoke operation.
     * @return $this
     */
    public function setSenderNote(?string $sender_note) {
        if (!is_null($sender_note) && (mb_strlen($sender_note) > 500)) {
            throw new IAE('VirtualCurrencyOperation.setSenderNote: $sender_note length must be <= 500');
        }
        if (!is_null($sender_note) && (mb_strlen($sender_note) < 1)) {
            throw new IAE('VirtualCurrencyOperation.setSenderNote: $sender_note length must be >= 1');
        }
        $this->_data['sender_note'] = $sender_note;

        return $this;
    }
}
