<?php

/**
 * CheckMalicousAddress_200_response Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * CheckMalicousAddress_200_response Model
 */
class CheckMalicousAddress200Response extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const STATUS_VALID = 'valid';
    public const STATUS_INVALID = 'invalid';
    protected static $_name = "CheckMalicousAddress_200_response";
    protected static $_definition = [
        "status" => ["status", "string", null, "getStatus", "setStatus"]
    ];

    /**
     * CheckMalicousAddress200Response
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["status"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        $allowed = $this->getStatusAllowableValues();
        $value = $this->_data['status'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'status' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getStatusAllowableValues(): array {
        return [
            self::STATUS_VALID,
            self::STATUS_INVALID,
        ];
    }

    /**
     * Get status
     *
     * @return string|null
     */
    public function getStatus(): ?string {
        return $this->_data["status"];
    }

    /**
     * Set status
     * 
     * @param string|null $status Whether address is malicous or not
     * @return $this
     */
    public function setStatus(?string $status) {
        $allowed = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed, true)) {
            throw new IAE(sprintf("CheckMalicousAddress200Response.setStatus: status invalid value '%s', must be one of '%s'", $status, implode("', '", $allowed)));
        }
        $this->_data['status'] = $status;

        return $this;
    }
}
