<?php

/**
 * FlowCustomTransactionMnemonic Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * FlowCustomTransactionMnemonic Model
 */
class FlowCustomTransactionMnemonic extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "FlowCustomTransactionMnemonic";
    protected static $_definition = [
        "account" => ["account", "string", null, "getAccount", "setAccount"], 
        "transaction" => ["transaction", "string", null, "getTransaction", "setTransaction"], 
        "args" => ["args", "\Tatum\Model\FlowCustomTransactionPKArgsInner[]", null, "getArgs", "setArgs"], 
        "mnemonic" => ["mnemonic", "string", null, "getMnemonic", "setMnemonic"], 
        "index" => ["index", "float", null, "getIndex", "setIndex"]
    ];

    /**
     * FlowCustomTransactionMnemonic
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["account"=>null, "transaction"=>null, "args"=>null, "mnemonic"=>null, "index"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['account'])) {
            $ip[] = "'account' can't be null";
        }
        if ((mb_strlen($this->_data['account']) > 18)) {
            $ip[] = "'account' length must be <= 18";
        }
        if ((mb_strlen($this->_data['account']) < 18)) {
            $ip[] = "'account' length must be >= 18";
        }
        if (is_null($this->_data['transaction'])) {
            $ip[] = "'transaction' can't be null";
        }
        if ((mb_strlen($this->_data['transaction']) > 500000)) {
            $ip[] = "'transaction' length must be <= 500000";
        }
        if ((mb_strlen($this->_data['transaction']) < 1)) {
            $ip[] = "'transaction' length must be >= 1";
        }
        if (is_null($this->_data['args'])) {
            $ip[] = "'args' can't be null";
        }
        if (is_null($this->_data['mnemonic'])) {
            $ip[] = "'mnemonic' can't be null";
        }
        if ((mb_strlen($this->_data['mnemonic']) > 500)) {
            $ip[] = "'mnemonic' length must be <= 500";
        }
        if ((mb_strlen($this->_data['mnemonic']) < 1)) {
            $ip[] = "'mnemonic' length must be >= 1";
        }
        if (is_null($this->_data['index'])) {
            $ip[] = "'index' can't be null";
        }
        if (($this->_data['index'] < 0)) {
            $ip[] = "'index' must be >= 0";
        }
        
        return $ip;
    }

    /**
     * Get account
     *
     * @return string
     */
    public function getAccount(): string {
        return $this->_data["account"];
    }

    /**
     * Set account
     * 
     * @param string $account Blockchain account to send from
     * @return $this
     */
    public function setAccount(string $account) {
        if ((mb_strlen($account) > 18)) {
            throw new IAE('FlowCustomTransactionMnemonic.setAccount: $account length must be <= 18');
        }
        if ((mb_strlen($account) < 18)) {
            throw new IAE('FlowCustomTransactionMnemonic.setAccount: $account length must be >= 18');
        }
        $this->_data['account'] = $account;

        return $this;
    }

    /**
     * Get transaction
     *
     * @return string
     */
    public function getTransaction(): string {
        return $this->_data["transaction"];
    }

    /**
     * Set transaction
     * 
     * @param string $transaction Transaction string to send to the chain.
     * @return $this
     */
    public function setTransaction(string $transaction) {
        if ((mb_strlen($transaction) > 500000)) {
            throw new IAE('FlowCustomTransactionMnemonic.setTransaction: $transaction length must be <= 500000');
        }
        if ((mb_strlen($transaction) < 1)) {
            throw new IAE('FlowCustomTransactionMnemonic.setTransaction: $transaction length must be >= 1');
        }
        $this->_data['transaction'] = $transaction;

        return $this;
    }

    /**
     * Get args
     *
     * @return \Tatum\Model\FlowCustomTransactionPKArgsInner[]
     */
    public function getArgs(): array {
        return $this->_data["args"];
    }

    /**
     * Set args
     * 
     * @param \Tatum\Model\FlowCustomTransactionPKArgsInner[] $args args
     * @return $this
     */
    public function setArgs(array $args) {
        $this->_data['args'] = $args;

        return $this;
    }

    /**
     * Get mnemonic
     *
     * @return string
     */
    public function getMnemonic(): string {
        return $this->_data["mnemonic"];
    }

    /**
     * Set mnemonic
     * 
     * @param string $mnemonic Mnemonic to generate private key.
     * @return $this
     */
    public function setMnemonic(string $mnemonic) {
        if ((mb_strlen($mnemonic) > 500)) {
            throw new IAE('FlowCustomTransactionMnemonic.setMnemonic: $mnemonic length must be <= 500');
        }
        if ((mb_strlen($mnemonic) < 1)) {
            throw new IAE('FlowCustomTransactionMnemonic.setMnemonic: $mnemonic length must be >= 1');
        }
        $this->_data['mnemonic'] = $mnemonic;

        return $this;
    }

    /**
     * Get index
     *
     * @return float
     */
    public function getIndex(): float {
        return $this->_data["index"];
    }

    /**
     * Set index
     * 
     * @param float $index Index to the specific address from mnemonic.
     * @return $this
     */
    public function setIndex(float $index) {
        if (($index < 0)) {
            throw new IAE('FlowCustomTransactionMnemonic.setIndex: $index must be >=0');
        }
        $this->_data['index'] = $index;

        return $this;
    }
}
