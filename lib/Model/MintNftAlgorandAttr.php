<?php

/**
 * MintNftAlgorand_attr Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * MintNftAlgorand_attr Model
 */
class MintNftAlgorandAttr extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "MintNftAlgorand_attr";
    protected static $_definition = [
        "asset_unit" => ["assetUnit", "string", null, "getAssetUnit", "setAssetUnit"], 
        "clawback" => ["clawback", "string", null, "getClawback", "setClawback"], 
        "manager" => ["manager", "string", null, "getManager", "setManager"], 
        "reserve" => ["reserve", "string", null, "getReserve", "setReserve"], 
        "freeze" => ["freeze", "string", null, "getFreeze", "setFreeze"], 
        "total" => ["total", "float", null, "getTotal", "setTotal"], 
        "decimals" => ["decimals", "float", null, "getDecimals", "setDecimals"]
    ];

    /**
     * MintNftAlgorandAttr
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["asset_unit"=>null, "clawback"=>null, "manager"=>null, "reserve"=>null, "freeze"=>null, "total"=>1, "decimals"=>0] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (!is_null($this->_data['asset_unit']) && (mb_strlen($this->_data['asset_unit']) > 8)) {
            $ip[] = "'asset_unit' length must be <= 8";
        }
        if (!is_null($this->_data['asset_unit']) && (mb_strlen($this->_data['asset_unit']) < 1)) {
            $ip[] = "'asset_unit' length must be >= 1";
        }
        if (!is_null($this->_data['clawback']) && (mb_strlen($this->_data['clawback']) > 58)) {
            $ip[] = "'clawback' length must be <= 58";
        }
        if (!is_null($this->_data['clawback']) && (mb_strlen($this->_data['clawback']) < 58)) {
            $ip[] = "'clawback' length must be >= 58";
        }
        if (!is_null($this->_data['manager']) && (mb_strlen($this->_data['manager']) > 58)) {
            $ip[] = "'manager' length must be <= 58";
        }
        if (!is_null($this->_data['manager']) && (mb_strlen($this->_data['manager']) < 58)) {
            $ip[] = "'manager' length must be >= 58";
        }
        if (!is_null($this->_data['reserve']) && (mb_strlen($this->_data['reserve']) > 58)) {
            $ip[] = "'reserve' length must be <= 58";
        }
        if (!is_null($this->_data['reserve']) && (mb_strlen($this->_data['reserve']) < 58)) {
            $ip[] = "'reserve' length must be >= 58";
        }
        if (!is_null($this->_data['freeze']) && (mb_strlen($this->_data['freeze']) > 58)) {
            $ip[] = "'freeze' length must be <= 58";
        }
        if (!is_null($this->_data['freeze']) && (mb_strlen($this->_data['freeze']) < 58)) {
            $ip[] = "'freeze' length must be >= 58";
        }
        if (!is_null($this->_data['total']) && ($this->_data['total'] < 10)) {
            $ip[] = "'total' must be >= 10";
        }
        if (!is_null($this->_data['decimals']) && ($this->_data['decimals'] > 15)) {
            $ip[] = "'decimals' must be <= 15";
        }
        if (!is_null($this->_data['decimals']) && ($this->_data['decimals'] < 1)) {
            $ip[] = "'decimals' must be >= 1";
        }
        
        return $ip;
    }

    /**
     * Get asset_unit
     *
     * @return string|null
     */
    public function getAssetUnit(): ?string {
        return $this->_data["asset_unit"];
    }

    /**
     * Set asset_unit
     * 
     * @param string|null $asset_unit The unit name of the NFT
     * @return $this
     */
    public function setAssetUnit(?string $asset_unit) {
        if (!is_null($asset_unit) && (mb_strlen($asset_unit) > 8)) {
            throw new IAE('MintNftAlgorandAttr.setAssetUnit: $asset_unit length must be <= 8');
        }
        if (!is_null($asset_unit) && (mb_strlen($asset_unit) < 1)) {
            throw new IAE('MintNftAlgorandAttr.setAssetUnit: $asset_unit length must be >= 1');
        }
        $this->_data['asset_unit'] = $asset_unit;

        return $this;
    }

    /**
     * Get clawback
     *
     * @return string|null
     */
    public function getClawback(): ?string {
        return $this->_data["clawback"];
    }

    /**
     * Set clawback
     * 
     * @param string|null $clawback The address of the clawback account that can claw back holdings of the NFT
     * @return $this
     */
    public function setClawback(?string $clawback) {
        if (!is_null($clawback) && (mb_strlen($clawback) > 58)) {
            throw new IAE('MintNftAlgorandAttr.setClawback: $clawback length must be <= 58');
        }
        if (!is_null($clawback) && (mb_strlen($clawback) < 58)) {
            throw new IAE('MintNftAlgorandAttr.setClawback: $clawback length must be >= 58');
        }
        $this->_data['clawback'] = $clawback;

        return $this;
    }

    /**
     * Get manager
     *
     * @return string|null
     */
    public function getManager(): ?string {
        return $this->_data["manager"];
    }

    /**
     * Set manager
     * 
     * @param string|null $manager The address of the manager account that can manage the configuration of the NFT or burn it; specify this parameter if you want to be able to <a href=\"#operation/NftBurnErc721\">burn the minted NFT</a> any time later
     * @return $this
     */
    public function setManager(?string $manager) {
        if (!is_null($manager) && (mb_strlen($manager) > 58)) {
            throw new IAE('MintNftAlgorandAttr.setManager: $manager length must be <= 58');
        }
        if (!is_null($manager) && (mb_strlen($manager) < 58)) {
            throw new IAE('MintNftAlgorandAttr.setManager: $manager length must be >= 58');
        }
        $this->_data['manager'] = $manager;

        return $this;
    }

    /**
     * Get reserve
     *
     * @return string|null
     */
    public function getReserve(): ?string {
        return $this->_data["reserve"];
    }

    /**
     * Set reserve
     * 
     * @param string|null $reserve The address of the reserve account that holds the reserve (non-minted) units of the NFT
     * @return $this
     */
    public function setReserve(?string $reserve) {
        if (!is_null($reserve) && (mb_strlen($reserve) > 58)) {
            throw new IAE('MintNftAlgorandAttr.setReserve: $reserve length must be <= 58');
        }
        if (!is_null($reserve) && (mb_strlen($reserve) < 58)) {
            throw new IAE('MintNftAlgorandAttr.setReserve: $reserve length must be >= 58');
        }
        $this->_data['reserve'] = $reserve;

        return $this;
    }

    /**
     * Get freeze
     *
     * @return string|null
     */
    public function getFreeze(): ?string {
        return $this->_data["freeze"];
    }

    /**
     * Set freeze
     * 
     * @param string|null $freeze The address of the freeze account that is used to freeze holdings of the NFT
     * @return $this
     */
    public function setFreeze(?string $freeze) {
        if (!is_null($freeze) && (mb_strlen($freeze) > 58)) {
            throw new IAE('MintNftAlgorandAttr.setFreeze: $freeze length must be <= 58');
        }
        if (!is_null($freeze) && (mb_strlen($freeze) < 58)) {
            throw new IAE('MintNftAlgorandAttr.setFreeze: $freeze length must be >= 58');
        }
        $this->_data['freeze'] = $freeze;

        return $this;
    }

    /**
     * Get total
     *
     * @return float|null
     */
    public function getTotal(): ?float {
        return $this->_data["total"];
    }

    /**
     * Set total
     * 
     * @param float|null $total The total amount of the NFTs to mint. Defaults to 1 - which means 1 NFT will be minted.<br/>Value above 1 means, you are going to mint <a href=\"https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\" target=\"_blank\">Fractional NFTs.</a>In this case value must be a power of 10 larger than 1 e.g. 10, 100, 1000...
     * @return $this
     */
    public function setTotal(?float $total) {
        if (!is_null($total) && ($total < 10)) {
            throw new IAE('MintNftAlgorandAttr.setTotal: $total must be >=10');
        }
        $this->_data['total'] = $total;

        return $this;
    }

    /**
     * Get decimals
     *
     * @return float|null
     */
    public function getDecimals(): ?float {
        return $this->_data["decimals"];
    }

    /**
     * Set decimals
     * 
     * @param float|null $decimals The decimal places of the NFT to mint. Defaults to 0 - which means 1 NFT will be minted.<br/>Value above 0 means, you are going to mint <a href=\"https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\" target=\"_blank\">Fractional NFTs.</a>In this case value must be equal to the logarithm in base 10 of total number of units (e.g. for total = 10, decimal will be 1)
     * @return $this
     */
    public function setDecimals(?float $decimals) {
        if (!is_null($decimals) && ($decimals > 15)) {
            throw new IAE('MintNftAlgorandAttr.setDecimals: $decimals must be <=15');
        }
        if (!is_null($decimals) && ($decimals < 1)) {
            throw new IAE('MintNftAlgorandAttr.setDecimals: $decimals must be >=1');
        }
        $this->_data['decimals'] = $decimals;

        return $this;
    }
}
