<?php

/**
 * TransactionFeeEgldBlockchain Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TransactionFeeEgldBlockchain Model
 */
class TransactionFeeEgldBlockchain extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "TransactionFeeEgldBlockchain";
    protected static $_definition = [
        "sender" => ["sender", "string", null, "getSender", "setSender", null], 
        "receiver" => ["receiver", "string", null, "getReceiver", "setReceiver", null], 
        "value" => ["value", "string", null, "getValue", "setValue", null], 
        "data" => ["data", "string", null, "getData", "setData", null]
    ];

    /**
     * TransactionFeeEgldBlockchain
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['sender'])) {
            $ip[] = "'sender' can't be null";
        }
        if ((mb_strlen($this->_data['sender']) > 62)) {
            $ip[] = "'sender' length must be <= 62";
        }
        if ((mb_strlen($this->_data['sender']) < 62)) {
            $ip[] = "'sender' length must be >= 62";
        }
        if (is_null($this->_data['receiver'])) {
            $ip[] = "'receiver' can't be null";
        }
        if ((mb_strlen($this->_data['receiver']) > 62)) {
            $ip[] = "'receiver' length must be <= 62";
        }
        if ((mb_strlen($this->_data['receiver']) < 62)) {
            $ip[] = "'receiver' length must be >= 62";
        }
        if (is_null($this->_data['value'])) {
            $ip[] = "'value' can't be null";
        }
        return $ip;
    }


    /**
     * Get sender
     *
     * @return string
     */
    public function getSender(): string {
        return $this->_data["sender"];
    }

    /**
     * Set sender
     * 
     * @param string $sender Account address of the sender
     * @return $this
     */
    public function setSender(string $sender) {
        if ((mb_strlen($sender) > 62)) {
            throw new IAE('TransactionFeeEgldBlockchain.setSender: $sender length must be <= 62');
        }
        if ((mb_strlen($sender) < 62)) {
            throw new IAE('TransactionFeeEgldBlockchain.setSender: $sender length must be >= 62');
        }
        $this->_data['sender'] = $sender;

        return $this;
    }

    /**
     * Get receiver
     *
     * @return string
     */
    public function getReceiver(): string {
        return $this->_data["receiver"];
    }

    /**
     * Set receiver
     * 
     * @param string $receiver Account address of the receiver or smart contract
     * @return $this
     */
    public function setReceiver(string $receiver) {
        if ((mb_strlen($receiver) > 62)) {
            throw new IAE('TransactionFeeEgldBlockchain.setReceiver: $receiver length must be <= 62');
        }
        if ((mb_strlen($receiver) < 62)) {
            throw new IAE('TransactionFeeEgldBlockchain.setReceiver: $receiver length must be >= 62');
        }
        $this->_data['receiver'] = $receiver;

        return $this;
    }

    /**
     * Get value
     *
     * @return string
     */
    public function getValue(): string {
        return $this->_data["value"];
    }

    /**
     * Set value
     * 
     * @param string $value Value to be sent.
     * @return $this
     */
    public function setValue(string $value) {
        $this->_data['value'] = $value;

        return $this;
    }

    /**
     * Get data
     *
     * @return string|null
     */
    public function getData(): ?string {
        return $this->_data["data"];
    }

    /**
     * Set data
     * 
     * @param string|null $data Additional data that can be passed to a blockchain transaction as a data property; must be in the hexadecimal format
     * @return $this
     */
    public function setData(?string $data) {
        $this->_data['data'] = $data;

        return $this;
    }
}
