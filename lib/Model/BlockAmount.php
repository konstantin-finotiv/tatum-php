<?php

/**
 * BlockAmount Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * BlockAmount Model
 */
class BlockAmount extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "BlockAmount";
    protected static $_definition = [
        "amount" => ["amount", "string", null, "getAmount", "setAmount"], 
        "type" => ["type", "string", null, "getType", "setType"], 
        "description" => ["description", "string", null, "getDescription", "setDescription"]
    ];

    /**
     * BlockAmount
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["amount"=>null, "type"=>null, "description"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if ((mb_strlen($this->_data['amount']) > 38)) {
            $ip[] = "'amount' length must be <= 38";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['amount'])) {
            $ip[] = "'amount' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        if (is_null($this->_data['type'])) {
            $ip[] = "'type' can't be null";
        }
        if ((mb_strlen($this->_data['type']) > 100)) {
            $ip[] = "'type' length must be <= 100";
        }
        if ((mb_strlen($this->_data['type']) < 1)) {
            $ip[] = "'type' length must be >= 1";
        }
        if (!is_null($this->_data['description']) && (mb_strlen($this->_data['description']) > 300)) {
            $ip[] = "'description' length must be <= 300";
        }
        if (!is_null($this->_data['description']) && (mb_strlen($this->_data['description']) < 1)) {
            $ip[] = "'description' length must be >= 1";
        }
        
        return $ip;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount to be blocked on account.
     * @return $this
     */
    public function setAmount(string $amount) {
        if ((mb_strlen($amount) > 38)) {
            throw new IAE('BlockAmount.setAmount: $amount length must be <= 38');
        }
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $amount))) {
            throw new IAE('BlockAmount.setAmount: $amount must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($amount, true) . ' given');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType(): string {
        return $this->_data["type"];
    }

    /**
     * Set type
     * 
     * @param string $type Type of blockage.
     * @return $this
     */
    public function setType(string $type) {
        if ((mb_strlen($type) > 100)) {
            throw new IAE('BlockAmount.setType: $type length must be <= 100');
        }
        if ((mb_strlen($type) < 1)) {
            throw new IAE('BlockAmount.setType: $type length must be >= 1');
        }
        $this->_data['type'] = $type;

        return $this;
    }

    /**
     * Get description
     *
     * @return string|null
     */
    public function getDescription(): ?string {
        return $this->_data["description"];
    }

    /**
     * Set description
     * 
     * @param string|null $description Description of blockage.
     * @return $this
     */
    public function setDescription(?string $description) {
        if (!is_null($description) && (mb_strlen($description) > 300)) {
            throw new IAE('BlockAmount.setDescription: $description length must be <= 300');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new IAE('BlockAmount.setDescription: $description length must be >= 1');
        }
        $this->_data['description'] = $description;

        return $this;
    }
}
