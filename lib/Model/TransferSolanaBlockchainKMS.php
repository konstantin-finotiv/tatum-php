<?php

/**
 * TransferSolanaBlockchainKMS Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TransferSolanaBlockchainKMS Model
 */
class TransferSolanaBlockchainKMS extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "TransferSolanaBlockchainKMS";
    protected static $_definition = [
        "from" => ["from", "string", null, "getFrom", "setFrom", null], 
        "to" => ["to", "string", null, "getTo", "setTo", null], 
        "amount" => ["amount", "string", null, "getAmount", "setAmount", null], 
        "signature_id" => ["signatureId", "string", 'uuid', "getSignatureId", "setSignatureId", null], 
        "fee_payer" => ["feePayer", "string", null, "getFeePayer", "setFeePayer", null], 
        "fee_payer_signature_id" => ["feePayerSignatureId", "string", 'uuid', "getFeePayerSignatureId", "setFeePayerSignatureId", null]
    ];

    /**
     * TransferSolanaBlockchainKMS
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if ((mb_strlen($this->_data['from']) > 44)) {
            $ip[] = "'from' length must be <= 44";
        }
        if ((mb_strlen($this->_data['from']) < 43)) {
            $ip[] = "'from' length must be >= 43";
        }
        if (is_null($this->_data['to'])) {
            $ip[] = "'to' can't be null";
        }
        if ((mb_strlen($this->_data['to']) > 44)) {
            $ip[] = "'to' length must be <= 44";
        }
        if ((mb_strlen($this->_data['to']) < 43)) {
            $ip[] = "'to' length must be >= 43";
        }
        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if (!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $this->_data['amount'])) {
            $ip[] = "'amount' must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/";
        }
        if (is_null($this->_data['signature_id'])) {
            $ip[] = "'signature_id' can't be null";
        }
        if (!is_null($this->_data['fee_payer']) && (mb_strlen($this->_data['fee_payer']) > 44)) {
            $ip[] = "'fee_payer' length must be <= 44";
        }
        if (!is_null($this->_data['fee_payer']) && (mb_strlen($this->_data['fee_payer']) < 43)) {
            $ip[] = "'fee_payer' length must be >= 43";
        }
        return $ip;
    }


    /**
     * Get from
     *
     * @return string
     */
    public function getFrom(): string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string $from Blockchain address to send assets from
     * @return $this
     */
    public function setFrom(string $from) {
        if ((mb_strlen($from) > 44)) {
            throw new IAE('TransferSolanaBlockchainKMS.setFrom: $from length must be <= 44');
        }
        if ((mb_strlen($from) < 43)) {
            throw new IAE('TransferSolanaBlockchainKMS.setFrom: $from length must be >= 43');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get to
     *
     * @return string
     */
    public function getTo(): string {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param string $to Blockchain address to send assets to
     * @return $this
     */
    public function setTo(string $to) {
        if ((mb_strlen($to) > 44)) {
            throw new IAE('TransferSolanaBlockchainKMS.setTo: $to length must be <= 44');
        }
        if ((mb_strlen($to) < 43)) {
            throw new IAE('TransferSolanaBlockchainKMS.setTo: $to length must be >= 43');
        }
        $this->_data['to'] = $to;

        return $this;
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount to be sent in SOL.
     * @return $this
     */
    public function setAmount(string $amount) {
        if ((!preg_match("/^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/", $amount))) {
            throw new IAE('TransferSolanaBlockchainKMS.setAmount: $amount must match /^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/, ' . var_export($amount, true) . ' given');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get signature_id
     *
     * @return string
     */
    public function getSignatureId(): string {
        return $this->_data["signature_id"];
    }

    /**
     * Set signature_id
     * 
     * @param string $signature_id Identifier of the private key associated in signing application. Private key, or signature Id must be present.
     * @return $this
     */
    public function setSignatureId(string $signature_id) {
        $this->_data['signature_id'] = $signature_id;

        return $this;
    }

    /**
     * Get fee_payer
     *
     * @return string|null
     */
    public function getFeePayer(): ?string {
        return $this->_data["fee_payer"];
    }

    /**
     * Set fee_payer
     * 
     * @param string|null $fee_payer Blockchain address to pay the fee for the transaction from
     * @return $this
     */
    public function setFeePayer(?string $fee_payer) {
        if (!is_null($fee_payer) && (mb_strlen($fee_payer) > 44)) {
            throw new IAE('TransferSolanaBlockchainKMS.setFeePayer: $fee_payer length must be <= 44');
        }
        if (!is_null($fee_payer) && (mb_strlen($fee_payer) < 43)) {
            throw new IAE('TransferSolanaBlockchainKMS.setFeePayer: $fee_payer length must be >= 43');
        }
        $this->_data['fee_payer'] = $fee_payer;

        return $this;
    }

    /**
     * Get fee_payer_signature_id
     *
     * @return string|null
     */
    public function getFeePayerSignatureId(): ?string {
        return $this->_data["fee_payer_signature_id"];
    }

    /**
     * Set fee_payer_signature_id
     * 
     * @param string|null $fee_payer_signature_id Identifier of the private key used for paying the gas costs in signing application. Defaults to the signatureId.
     * @return $this
     */
    public function setFeePayerSignatureId(?string $fee_payer_signature_id) {
        $this->_data['fee_payer_signature_id'] = $fee_payer_signature_id;

        return $this;
    }
}
