<?php

/**
 * TransferNftAlgoKMS Model
 *
 * @version   3.17.0
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TransferNftAlgoKMS Model
 */
class TransferNftAlgoKMS extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const CHAIN_ALGO = 'ALGO';
    protected static $_name = "TransferNftAlgoKMS";
    protected static $_definition = [
        "chain" => ["chain", "string", null, "getChain", "setChain"], 
        "from" => ["from", "string", null, "getFrom", "setFrom"], 
        "to" => ["to", "string", null, "getTo", "setTo"], 
        "contract_address" => ["contractAddress", "string", null, "getContractAddress", "setContractAddress"], 
        "signature_id" => ["signatureId", "string", 'uuid', "getSignatureId", "setSignatureId"], 
        "amount" => ["amount", "float", null, "getAmount", "setAmount"]
    ];

    /**
     * TransferNftAlgoKMS
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["chain"=>null, "from"=>null, "to"=>null, "contract_address"=>null, "signature_id"=>null, "amount"=>1] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['chain'])) {
            $ip[] = "'chain' can't be null";
        }
        $allowed = $this->getChainAllowableValues();
        $value = $this->_data['chain'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'chain' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['from'])) {
            $ip[] = "'from' can't be null";
        }
        if ((mb_strlen($this->_data['from']) > 58)) {
            $ip[] = "'from' length must be <= 58";
        }
        if ((mb_strlen($this->_data['from']) < 58)) {
            $ip[] = "'from' length must be >= 58";
        }
        if (is_null($this->_data['to'])) {
            $ip[] = "'to' can't be null";
        }
        if ((mb_strlen($this->_data['to']) > 58)) {
            $ip[] = "'to' length must be <= 58";
        }
        if ((mb_strlen($this->_data['to']) < 58)) {
            $ip[] = "'to' length must be >= 58";
        }
        if (is_null($this->_data['contract_address'])) {
            $ip[] = "'contract_address' can't be null";
        }
        if ((mb_strlen($this->_data['contract_address']) > 256)) {
            $ip[] = "'contract_address' length must be <= 256";
        }
        if (is_null($this->_data['signature_id'])) {
            $ip[] = "'signature_id' can't be null";
        }
        if (!is_null($this->_data['amount']) && ($this->_data['amount'] < 0)) {
            $ip[] = "'amount' must be >= 0";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getChainAllowableValues(): array {
        return [
            self::CHAIN_ALGO,
        ];
    }

    /**
     * Get chain
     *
     * @return string
     */
    public function getChain(): string {
        return $this->_data["chain"];
    }

    /**
     * Set chain
     * 
     * @param string $chain The blockchain to work with
     * @return $this
     */
    public function setChain(string $chain) {
        $allowed = $this->getChainAllowableValues();
        if (!in_array($chain, $allowed, true)) {
            throw new IAE(sprintf("TransferNftAlgoKMS.setChain: chain invalid value '%s', must be one of '%s'", $chain, implode("', '", $allowed)));
        }
        $this->_data['chain'] = $chain;

        return $this;
    }

    /**
     * Get from
     *
     * @return string
     */
    public function getFrom(): string {
        return $this->_data["from"];
    }

    /**
     * Set from
     * 
     * @param string $from Blockchain address to send NFT token from
     * @return $this
     */
    public function setFrom(string $from) {
        if ((mb_strlen($from) > 58)) {
            throw new IAE('TransferNftAlgoKMS.setFrom: $from length must be <= 58');
        }
        if ((mb_strlen($from) < 58)) {
            throw new IAE('TransferNftAlgoKMS.setFrom: $from length must be >= 58');
        }
        $this->_data['from'] = $from;

        return $this;
    }

    /**
     * Get to
     *
     * @return string
     */
    public function getTo(): string {
        return $this->_data["to"];
    }

    /**
     * Set to
     * 
     * @param string $to Blockchain address to send NFT token to
     * @return $this
     */
    public function setTo(string $to) {
        if ((mb_strlen($to) > 58)) {
            throw new IAE('TransferNftAlgoKMS.setTo: $to length must be <= 58');
        }
        if ((mb_strlen($to) < 58)) {
            throw new IAE('TransferNftAlgoKMS.setTo: $to length must be >= 58');
        }
        $this->_data['to'] = $to;

        return $this;
    }

    /**
     * Get contract_address
     *
     * @return string
     */
    public function getContractAddress(): string {
        return $this->_data["contract_address"];
    }

    /**
     * Set contract_address
     * 
     * @param string $contract_address AssetID of token.
     * @return $this
     */
    public function setContractAddress(string $contract_address) {
        if ((mb_strlen($contract_address) > 256)) {
            throw new IAE('TransferNftAlgoKMS.setContractAddress: $contract_address length must be <= 256');
        }
        $this->_data['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Get signature_id
     *
     * @return string
     */
    public function getSignatureId(): string {
        return $this->_data["signature_id"];
    }

    /**
     * Set signature_id
     * 
     * @param string $signature_id Identifier of the private key associated in signing application. Private key, or signature Id must be present.
     * @return $this
     */
    public function setSignatureId(string $signature_id) {
        $this->_data['signature_id'] = $signature_id;

        return $this;
    }

    /**
     * Get amount
     *
     * @return float|null
     */
    public function getAmount(): ?float {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param float|null $amount The total amount of NFT fractions to transfer. Defaults to 1 - which means 1 fraction of NFT will be transferred. This is only valid forÂ <a href=\"https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\" target=\"_blank\">Fractional NFTs.</a>
     * @return $this
     */
    public function setAmount(?float $amount) {
        if (!is_null($amount) && ($amount < 0)) {
            throw new IAE('TransferNftAlgoKMS.setAmount: $amount must be >=0');
        }
        $this->_data['amount'] = $amount;

        return $this;
    }
}
