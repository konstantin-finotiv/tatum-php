<?php

/**
 * TronTrc10Detail Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * TronTrc10Detail Model
 */
class TronTrc10Detail extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "TronTrc10Detail";
    protected static $_definition = [
        "owner_address" => ["ownerAddress", "string", null, "getOwnerAddress", "setOwnerAddress"], 
        "name" => ["name", "string", null, "getName", "setName"], 
        "abbr" => ["abbr", "string", null, "getAbbr", "setAbbr"], 
        "description" => ["description", "string", null, "getDescription", "setDescription"], 
        "url" => ["url", "string", null, "getUrl", "setUrl"], 
        "total_supply" => ["totalSupply", "float", null, "getTotalSupply", "setTotalSupply"], 
        "precision" => ["precision", "float", null, "getPrecision", "setPrecision"], 
        "id" => ["id", "float", null, "getId", "setId"]
    ];

    /**
     * TronTrc10Detail
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["owner_address"=>null, "name"=>null, "abbr"=>null, "description"=>null, "url"=>null, "total_supply"=>null, "precision"=>null, "id"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (!is_null($this->_data['owner_address']) && (mb_strlen($this->_data['owner_address']) > 34)) {
            $ip[] = "'owner_address' length must be <= 34";
        }
        if (!is_null($this->_data['owner_address']) && (mb_strlen($this->_data['owner_address']) < 34)) {
            $ip[] = "'owner_address' length must be >= 34";
        }
        if (!is_null($this->_data['name']) && (mb_strlen($this->_data['name']) > 100)) {
            $ip[] = "'name' length must be <= 100";
        }
        if (!is_null($this->_data['name']) && (mb_strlen($this->_data['name']) < 1)) {
            $ip[] = "'name' length must be >= 1";
        }
        if (!is_null($this->_data['abbr']) && (mb_strlen($this->_data['abbr']) > 100)) {
            $ip[] = "'abbr' length must be <= 100";
        }
        if (!is_null($this->_data['abbr']) && (mb_strlen($this->_data['abbr']) < 1)) {
            $ip[] = "'abbr' length must be >= 1";
        }
        if (!is_null($this->_data['description']) && (mb_strlen($this->_data['description']) > 100)) {
            $ip[] = "'description' length must be <= 100";
        }
        if (!is_null($this->_data['description']) && (mb_strlen($this->_data['description']) < 1)) {
            $ip[] = "'description' length must be >= 1";
        }
        if (!is_null($this->_data['url']) && (mb_strlen($this->_data['url']) > 100)) {
            $ip[] = "'url' length must be <= 100";
        }
        if (!is_null($this->_data['url']) && (mb_strlen($this->_data['url']) < 1)) {
            $ip[] = "'url' length must be >= 1";
        }
        if (!is_null($this->_data['total_supply']) && ($this->_data['total_supply'] < 0)) {
            $ip[] = "'total_supply' must be >= 0";
        }
        if (!is_null($this->_data['precision']) && ($this->_data['precision'] > 5)) {
            $ip[] = "'precision' must be <= 5";
        }
        if (!is_null($this->_data['precision']) && ($this->_data['precision'] < 0)) {
            $ip[] = "'precision' must be >= 0";
        }
        
        return $ip;
    }

    /**
     * Get owner_address
     *
     * @return string|null
     */
    public function getOwnerAddress(): ?string {
        return $this->_data["owner_address"];
    }

    /**
     * Set owner_address
     * 
     * @param string|null $owner_address The address of the TRC-10 token's owner in the hexadecimal format
     * @return $this
     */
    public function setOwnerAddress(?string $owner_address) {
        if (!is_null($owner_address) && (mb_strlen($owner_address) > 34)) {
            throw new IAE('TronTrc10Detail.setOwnerAddress: $owner_address length must be <= 34');
        }
        if (!is_null($owner_address) && (mb_strlen($owner_address) < 34)) {
            throw new IAE('TronTrc10Detail.setOwnerAddress: $owner_address length must be >= 34');
        }
        $this->_data['owner_address'] = $owner_address;

        return $this;
    }

    /**
     * Get name
     *
     * @return string|null
     */
    public function getName(): ?string {
        return $this->_data["name"];
    }

    /**
     * Set name
     * 
     * @param string|null $name The name of the TRC-10 token
     * @return $this
     */
    public function setName(?string $name) {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new IAE('TronTrc10Detail.setName: $name length must be <= 100');
        }
        if (!is_null($name) && (mb_strlen($name) < 1)) {
            throw new IAE('TronTrc10Detail.setName: $name length must be >= 1');
        }
        $this->_data['name'] = $name;

        return $this;
    }

    /**
     * Get abbr
     *
     * @return string|null
     */
    public function getAbbr(): ?string {
        return $this->_data["abbr"];
    }

    /**
     * Set abbr
     * 
     * @param string|null $abbr The abbreviated name of the TRC-10 token
     * @return $this
     */
    public function setAbbr(?string $abbr) {
        if (!is_null($abbr) && (mb_strlen($abbr) > 100)) {
            throw new IAE('TronTrc10Detail.setAbbr: $abbr length must be <= 100');
        }
        if (!is_null($abbr) && (mb_strlen($abbr) < 1)) {
            throw new IAE('TronTrc10Detail.setAbbr: $abbr length must be >= 1');
        }
        $this->_data['abbr'] = $abbr;

        return $this;
    }

    /**
     * Get description
     *
     * @return string|null
     */
    public function getDescription(): ?string {
        return $this->_data["description"];
    }

    /**
     * Set description
     * 
     * @param string|null $description The description of the TRC-10 token
     * @return $this
     */
    public function setDescription(?string $description) {
        if (!is_null($description) && (mb_strlen($description) > 100)) {
            throw new IAE('TronTrc10Detail.setDescription: $description length must be <= 100');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new IAE('TronTrc10Detail.setDescription: $description length must be >= 1');
        }
        $this->_data['description'] = $description;

        return $this;
    }

    /**
     * Get url
     *
     * @return string|null
     */
    public function getUrl(): ?string {
        return $this->_data["url"];
    }

    /**
     * Set url
     * 
     * @param string|null $url The URL of the TRC-10 token
     * @return $this
     */
    public function setUrl(?string $url) {
        if (!is_null($url) && (mb_strlen($url) > 100)) {
            throw new IAE('TronTrc10Detail.setUrl: $url length must be <= 100');
        }
        if (!is_null($url) && (mb_strlen($url) < 1)) {
            throw new IAE('TronTrc10Detail.setUrl: $url length must be >= 1');
        }
        $this->_data['url'] = $url;

        return $this;
    }

    /**
     * Get total_supply
     *
     * @return float|null
     */
    public function getTotalSupply(): ?float {
        return $this->_data["total_supply"];
    }

    /**
     * Set total_supply
     * 
     * @param float|null $total_supply The total supply of tokens in the TRC-10 token
     * @return $this
     */
    public function setTotalSupply(?float $total_supply) {
        if (!is_null($total_supply) && ($total_supply < 0)) {
            throw new IAE('TronTrc10Detail.setTotalSupply: $total_supply must be >=0');
        }
        $this->_data['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Get precision
     *
     * @return float|null
     */
    public function getPrecision(): ?float {
        return $this->_data["precision"];
    }

    /**
     * Set precision
     * 
     * @param float|null $precision The number of decimal places
     * @return $this
     */
    public function setPrecision(?float $precision) {
        if (!is_null($precision) && ($precision > 5)) {
            throw new IAE('TronTrc10Detail.setPrecision: $precision must be <=5');
        }
        if (!is_null($precision) && ($precision < 0)) {
            throw new IAE('TronTrc10Detail.setPrecision: $precision must be >=0');
        }
        $this->_data['precision'] = $precision;

        return $this;
    }

    /**
     * Get id
     *
     * @return float|null
     */
    public function getId(): ?float {
        return $this->_data["id"];
    }

    /**
     * Set id
     * 
     * @param float|null $id The ID of the TRC-10 token
     * @return $this
     */
    public function setId(?float $id) {
        $this->_data['id'] = $id;

        return $this;
    }
}
