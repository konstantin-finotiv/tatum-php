<?php

/**
 * OffchainAddresses_addresses_inner Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * OffchainAddresses_addresses_inner Model
 */
class OffchainAddressesAddressesInner extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "OffchainAddresses_addresses_inner";
    protected static $_definition = [
        "account_id" => ["accountId", "string", null, "getAccountId", "setAccountId", null], 
        "derivation_key" => ["derivationKey", "int", 'int32', "getDerivationKey", "setDerivationKey", null]
    ];

    /**
     * OffchainAddressesAddressesInner
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }
    
    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];
        if (is_null($this->_data['account_id'])) {
            $ip[] = "'account_id' can't be null";
        }
        if ((mb_strlen($this->_data['account_id']) > 24)) {
            $ip[] = "'account_id' length must be <= 24";
        }
        if ((mb_strlen($this->_data['account_id']) < 24)) {
            $ip[] = "'account_id' length must be >= 24";
        }
        if (!is_null($this->_data['derivation_key']) && ($this->_data['derivation_key'] > 2147483647)) {
            $ip[] = "'derivation_key' must be <= 2147483647";
        }
        if (!is_null($this->_data['derivation_key']) && ($this->_data['derivation_key'] < 0)) {
            $ip[] = "'derivation_key' must be >= 0";
        }
        return $ip;
    }


    /**
     * Get account_id
     *
     * @return string
     */
    public function getAccountId(): string {
        return $this->_data["account_id"];
    }

    /**
     * Set account_id
     * 
     * @param string $account_id ID of the account, for which blockchain address will be created.
     * @return $this
     */
    public function setAccountId(string $account_id) {
        if ((mb_strlen($account_id) > 24)) {
            throw new IAE('OffchainAddressesAddressesInner.setAccountId: $account_id length must be <= 24');
        }
        if ((mb_strlen($account_id) < 24)) {
            throw new IAE('OffchainAddressesAddressesInner.setAccountId: $account_id length must be >= 24');
        }
        $this->_data['account_id'] = $account_id;

        return $this;
    }

    /**
     * Get derivation_key
     *
     * @return int|null
     */
    public function getDerivationKey(): ?int {
        return $this->_data["derivation_key"];
    }

    /**
     * Set derivation_key
     * 
     * @param int|null $derivation_key Derivation key index for given address to generate. If not present, first not used address will be created.
     * @return $this
     */
    public function setDerivationKey(?int $derivation_key) {
        if (!is_null($derivation_key) && ($derivation_key > 2147483647)) {
            throw new IAE('OffchainAddressesAddressesInner.setDerivationKey: $derivation_key must be <=2147483647');
        }
        if (!is_null($derivation_key) && ($derivation_key < 0)) {
            throw new IAE('OffchainAddressesAddressesInner.setDerivationKey: $derivation_key must be >=0');
        }
        $this->_data['derivation_key'] = $derivation_key;

        return $this;
    }
}
