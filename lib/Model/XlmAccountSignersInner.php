<?php

/**
 * XlmAccount_signers_inner Model
 *
 * @version   3.17.1
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * XlmAccount_signers_inner Model
 */
class XlmAccountSignersInner extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const TYPE_SHA256_HASH = 'sha256_hash';
    public const TYPE_ED25519_PUBLIC_KEY = 'ed25519_public_key';
    public const TYPE_PREAUTH_TX = 'preauth_tx';
    protected static $_name = "XlmAccount_signers_inner";
    protected static $_definition = [
        "weight" => ["weight", "float", null, "getWeight", "setWeight"], 
        "key" => ["key", "string", null, "getKey", "setKey"], 
        "type" => ["type", "string", null, "getType", "setType"]
    ];

    /**
     * XlmAccountSignersInner
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["weight"=>null, "key"=>null, "type"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        $allowed = $this->getTypeAllowableValues();
        $value = $this->_data['type'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'type' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getTypeAllowableValues(): array {
        return [
            self::TYPE_SHA256_HASH,
            self::TYPE_ED25519_PUBLIC_KEY,
            self::TYPE_PREAUTH_TX,
        ];
    }

    /**
     * Get weight
     *
     * @return float|null
     */
    public function getWeight(): ?float {
        return $this->_data["weight"];
    }

    /**
     * Set weight
     * 
     * @param float|null $weight The numerical weight of a signer. Used to determine if a transaction meets the threshold requirements.
     * @return $this
     */
    public function setWeight(?float $weight) {
        $this->_data['weight'] = $weight;

        return $this;
    }

    /**
     * Get key
     *
     * @return string|null
     */
    public function getKey(): ?string {
        return $this->_data["key"];
    }

    /**
     * Set key
     * 
     * @param string|null $key A hash of characters dependent on the signer type.
     * @return $this
     */
    public function setKey(?string $key) {
        $this->_data['key'] = $key;

        return $this;
    }

    /**
     * Get type
     *
     * @return string|null
     */
    public function getType(): ?string {
        return $this->_data["type"];
    }

    /**
     * Set type
     * 
     * @param string|null $type The type of hash for this signer.
     * @return $this
     */
    public function setType(?string $type) {
        $allowed = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed, true)) {
            throw new IAE(sprintf("XlmAccountSignersInner.setType: type invalid value '%s', must be one of '%s'", $type, implode("', '", $allowed)));
        }
        $this->_data['type'] = $type;

        return $this;
    }
}
