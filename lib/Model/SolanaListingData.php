<?php

/**
 * SolanaListingData Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * SolanaListingData Model
 */
class SolanaListingData extends AbstractModel {

    public const DISCRIMINATOR = null;
    public const STATE__0 = '0';
    public const STATE__1 = '1';
    public const STATE__2 = '2';
    protected static $_name = "SolanaListingData";
    protected static $_definition = [
        "amount" => ["amount", "string", null, "getAmount", "setAmount"], 
        "buyer" => ["buyer", "string", null, "getBuyer", "setBuyer"], 
        "listing_id" => ["listingId", "string", null, "getListingId", "setListingId"], 
        "nft" => ["nft", "\Tatum\Model\SolanaListingDataNft", null, "getNft", "setNft"], 
        "price" => ["price", "string", null, "getPrice", "setPrice"], 
        "seller" => ["seller", "string", null, "getSeller", "setSeller"], 
        "state" => ["state", "string", null, "getState", "setState"], 
        "created_at" => ["createdAt", "float", null, "getCreatedAt", "setCreatedAt"], 
        "purchased_at" => ["purchasedAt", "float", null, "getPurchasedAt", "setPurchasedAt"], 
        "cancelled_at" => ["cancelledAt", "float", null, "getCancelledAt", "setCancelledAt"]
    ];

    /**
     * SolanaListingData
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["amount"=>null, "buyer"=>null, "listing_id"=>null, "nft"=>null, "price"=>null, "seller"=>null, "state"=>null, "created_at"=>null, "purchased_at"=>null, "cancelled_at"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (is_null($this->_data['amount'])) {
            $ip[] = "'amount' can't be null";
        }
        if (is_null($this->_data['listing_id'])) {
            $ip[] = "'listing_id' can't be null";
        }
        if (is_null($this->_data['nft'])) {
            $ip[] = "'nft' can't be null";
        }
        if (is_null($this->_data['price'])) {
            $ip[] = "'price' can't be null";
        }
        if (is_null($this->_data['seller'])) {
            $ip[] = "'seller' can't be null";
        }
        if (is_null($this->_data['state'])) {
            $ip[] = "'state' can't be null";
        }
        $allowed = $this->getStateAllowableValues();
        $value = $this->_data['state'];
        if (!is_null($value) && !in_array($value, $allowed, true)) {
            $ip[] = sprintf("'state' invalid value '%s', must be one of '%s'", $value, implode("', '", $allowed));
        }
        if (is_null($this->_data['created_at'])) {
            $ip[] = "'created_at' can't be null";
        }
        
        return $ip;
    }
    /**
     * Get allowable values
     *
     * @return scalar[]
     */
    public function getStateAllowableValues(): array {
        return [
            self::STATE__0,
            self::STATE__1,
            self::STATE__2,
        ];
    }

    /**
     * Get amount
     *
     * @return string
     */
    public function getAmount(): string {
        return $this->_data["amount"];
    }

    /**
     * Set amount
     * 
     * @param string $amount Amount of NFTs to sold in this listing.
     * @return $this
     */
    public function setAmount(string $amount) {
        $this->_data['amount'] = $amount;

        return $this;
    }

    /**
     * Get buyer
     *
     * @return string|null
     */
    public function getBuyer(): ?string {
        return $this->_data["buyer"];
    }

    /**
     * Set buyer
     * 
     * @param string|null $buyer Address of the buyer, if exists.
     * @return $this
     */
    public function setBuyer(?string $buyer) {
        $this->_data['buyer'] = $buyer;

        return $this;
    }

    /**
     * Get listing_id
     *
     * @return string
     */
    public function getListingId(): string {
        return $this->_data["listing_id"];
    }

    /**
     * Set listing_id
     * 
     * @param string $listing_id ID of the listing
     * @return $this
     */
    public function setListingId(string $listing_id) {
        $this->_data['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Get nft
     *
     * @return \Tatum\Model\SolanaListingDataNft
     */
    public function getNft(): \Tatum\Model\SolanaListingDataNft {
        return $this->_data["nft"];
    }

    /**
     * Set nft
     * 
     * @param \Tatum\Model\SolanaListingDataNft $nft nft
     * @return $this
     */
    public function setNft(\Tatum\Model\SolanaListingDataNft $nft) {
        $this->_data['nft'] = $nft;

        return $this;
    }

    /**
     * Get price
     *
     * @return string
     */
    public function getPrice(): string {
        return $this->_data["price"];
    }

    /**
     * Set price
     * 
     * @param string $price Price of the NFT asset in native currency or ERC20 token based on the presence of erc20Address field.
     * @return $this
     */
    public function setPrice(string $price) {
        $this->_data['price'] = $price;

        return $this;
    }

    /**
     * Get seller
     *
     * @return string
     */
    public function getSeller(): string {
        return $this->_data["seller"];
    }

    /**
     * Set seller
     * 
     * @param string $seller Address of the seller.
     * @return $this
     */
    public function setSeller(string $seller) {
        $this->_data['seller'] = $seller;

        return $this;
    }

    /**
     * Get state
     *
     * @return string
     */
    public function getState(): string {
        return $this->_data["state"];
    }

    /**
     * Set state
     * 
     * @param string $state State of the listing. 0 - available, 1 - sold, 2 - cancelled
     * @return $this
     */
    public function setState(string $state) {
        $allowed = $this->getStateAllowableValues();
        if (!in_array($state, $allowed, true)) {
            throw new IAE(sprintf("SolanaListingData.setState: state invalid value '%s', must be one of '%s'", $state, implode("', '", $allowed)));
        }
        $this->_data['state'] = $state;

        return $this;
    }

    /**
     * Get created_at
     *
     * @return float
     */
    public function getCreatedAt(): float {
        return $this->_data["created_at"];
    }

    /**
     * Set created_at
     * 
     * @param float $created_at Timestamp when this listing was created
     * @return $this
     */
    public function setCreatedAt(float $created_at) {
        $this->_data['created_at'] = $created_at;

        return $this;
    }

    /**
     * Get purchased_at
     *
     * @return float|null
     */
    public function getPurchasedAt(): ?float {
        return $this->_data["purchased_at"];
    }

    /**
     * Set purchased_at
     * 
     * @param float|null $purchased_at Timestamp when this listing was purchased
     * @return $this
     */
    public function setPurchasedAt(?float $purchased_at) {
        $this->_data['purchased_at'] = $purchased_at;

        return $this;
    }

    /**
     * Get cancelled_at
     *
     * @return float|null
     */
    public function getCancelledAt(): ?float {
        return $this->_data["cancelled_at"];
    }

    /**
     * Set cancelled_at
     * 
     * @param float|null $cancelled_at Timestamp when this listing was cancelled
     * @return $this
     */
    public function setCancelledAt(?float $cancelled_at) {
        $this->_data['cancelled_at'] = $cancelled_at;

        return $this;
    }
}
