<?php

/**
 * UpdateAccount Model
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Model;

use InvalidArgumentException as IAE;

/**
 * UpdateAccount Model
 */
class UpdateAccount extends AbstractModel {

    public const DISCRIMINATOR = null;
    protected static $_name = "UpdateAccount";
    protected static $_definition = [
        "account_code" => ["accountCode", "string", null, "getAccountCode", "setAccountCode"], 
        "account_number" => ["accountNumber", "string", null, "getAccountNumber", "setAccountNumber"]
    ];

    /**
     * UpdateAccount
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(["account_code"=>null, "account_number"=>null] as $k => $v) {
            $this->_data[$k] = $data[$k] ?? $v;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function listInvalidProperties(): array {
        $ip = [];

        if (!is_null($this->_data['account_code']) && (mb_strlen($this->_data['account_code']) > 50)) {
            $ip[] = "'account_code' length must be <= 50";
        }
        if (!is_null($this->_data['account_code']) && (mb_strlen($this->_data['account_code']) < 1)) {
            $ip[] = "'account_code' length must be >= 1";
        }
        if (!is_null($this->_data['account_number']) && (mb_strlen($this->_data['account_number']) > 50)) {
            $ip[] = "'account_number' length must be <= 50";
        }
        if (!is_null($this->_data['account_number']) && (mb_strlen($this->_data['account_number']) < 1)) {
            $ip[] = "'account_number' length must be >= 1";
        }
        
        return $ip;
    }

    /**
     * Get account_code
     *
     * @return string|null
     */
    public function getAccountCode(): ?string {
        return $this->_data["account_code"];
    }

    /**
     * Set account_code
     * 
     * @param string|null $account_code For bookkeeping to distinct account purpose.
     * @return $this
     */
    public function setAccountCode(?string $account_code) {
        if (!is_null($account_code) && (mb_strlen($account_code) > 50)) {
            throw new IAE('UpdateAccount.setAccountCode: $account_code length must be <= 50');
        }
        if (!is_null($account_code) && (mb_strlen($account_code) < 1)) {
            throw new IAE('UpdateAccount.setAccountCode: $account_code length must be >= 1');
        }
        $this->_data['account_code'] = $account_code;

        return $this;
    }

    /**
     * Get account_number
     *
     * @return string|null
     */
    public function getAccountNumber(): ?string {
        return $this->_data["account_number"];
    }

    /**
     * Set account_number
     * 
     * @param string|null $account_number Account number from external system.
     * @return $this
     */
    public function setAccountNumber(?string $account_number) {
        if (!is_null($account_number) && (mb_strlen($account_number) > 50)) {
            throw new IAE('UpdateAccount.setAccountNumber: $account_number length must be <= 50');
        }
        if (!is_null($account_number) && (mb_strlen($account_number) < 1)) {
            throw new IAE('UpdateAccount.setAccountNumber: $account_number length must be >= 1');
        }
        $this->_data['account_number'] = $account_number;

        return $this;
    }
}
