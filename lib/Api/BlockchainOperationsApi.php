<?php

/**
 * Implementation of BlockchainOperations API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @see       https://apidoc.tatum.io/tag/BlockchainOperations
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * BlockchainOperations API
 */
class BlockchainOperationsApi extends AbstractApi {
    /**
     * Send ADA from a virtual account to the blockchain
     *
     * @param \Tatum\Model\AdaTransferOffchainRequest $ada_transfer_offchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function adaTransferOffchain(\Tatum\Model\AdaTransferOffchainRequest $ada_transfer_offchain_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ada/transfer", [], $rHeaders, [], $ada_transfer_offchain_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Algorand ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\AlgoDeployErc20LedgerRequest $algo_deploy_erc20_ledger_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\AlgoDeployErc20Ledger200Response
     */
    public function algoDeployErc20Ledger(\Tatum\Model\AlgoDeployErc20LedgerRequest $algo_deploy_erc20_ledger_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\AlgoDeployErc20Ledger200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algo/erc20/deploy", [], $rHeaders, [], $algo_deploy_erc20_ledger_request
            ), 
            "\Tatum\Model\AlgoDeployErc20Ledger200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ALGO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\AlgoTransferRequest $algo_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function algoTransfer(\Tatum\Model\AlgoTransferRequest $algo_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algorand/transfer", [], $rHeaders, [], $algo_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BCH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\BchTransferRequest $bch_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function bchTransfer(\Tatum\Model\BchTransferRequest $bch_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bcash/transfer", [], $rHeaders, [], $bch_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Create a BNB-based asset
     *
     * @param \Tatum\Model\CreateBnbAsset $create_bnb_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function bnbAssetOffchain(\Tatum\Model\CreateBnbAsset $create_bnb_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bnb/asset", [], $rHeaders, [], $create_bnb_asset
            )
        );
    }
    
    /**
     * Send BNB from a virtual account to the blockchain
     *
     * @param \Tatum\Model\BnbTransferRequest $bnb_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function bnbTransfer(\Tatum\Model\BnbTransferRequest $bnb_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bnb/transfer", [], $rHeaders, [], $bnb_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function bscDeployBep20(\Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $eth_deploy_erc20_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BSC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\BscOrBepTransferRequest $bsc_or_bep_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function bscOrBepTransfer(\Tatum\Model\BscOrBepTransferRequest $bsc_or_bep_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/transfer", [], $rHeaders, [], $bsc_or_bep_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\BtcTransferRequest $btc_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function btcTransfer(\Tatum\Model\BtcTransferRequest $btc_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bitcoin/transfer", [], $rHeaders, [], $btc_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\CeloDeployErc20LedgerRequest $celo_deploy_erc20_ledger_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function celoDeployErc20Ledger(\Tatum\Model\CeloDeployErc20LedgerRequest $celo_deploy_erc20_ledger_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $celo_deploy_erc20_ledger_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send CELO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\CeloOrErc20TransferRequest $celo_or_erc20_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function celoOrErc20Transfer(\Tatum\Model\CeloOrErc20TransferRequest $celo_or_erc20_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/transfer", [], $rHeaders, [], $celo_or_erc20_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new BNB Smart Chain BEP-20 token in the virtual account
     *
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function createBep20(\Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20", [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Celo ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function createCeloErc20(\Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20", [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Ethereum ERC-20 token in the virtual account
     *
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function createErc20(\Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20", [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Harmony HRM-20 token in the virtual account
     *
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function createHrm20(\Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20", [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new TRON TRC-10 or TRC-20 token in the virtual account
     *
     * @param \Tatum\Model\CreateTrcRequest $create_trc_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Trc20Response
     */
    public function createTrc(\Tatum\Model\CreateTrcRequest $create_trc_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Trc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc", [], $rHeaders, [], $create_trc_request
            ), 
            "\Tatum\Model\Trc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new XinFin ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function createXdc20(\Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20", [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Send DOGE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\DogeTransferRequest $doge_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function dogeTransfer(\Tatum\Model\DogeTransferRequest $doge_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/dogecoin/transfer", [], $rHeaders, [], $doge_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send EGLD from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function egldTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/egld/transfer", [], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function ethDeployErc20(\Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $eth_deploy_erc20_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ETH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function ethTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/transfer", [], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send Ethereum ERC-20 tokens from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferErc20Request $eth_transfer_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function ethTransferErc20(\Tatum\Model\EthTransferErc20Request $eth_transfer_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/transfer", [], $rHeaders, [], $eth_transfer_erc20_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send FLOW from a virtual account to the blockchain
     *
     * @param \Tatum\Model\FlowTransferRequest $flow_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function flowTransfer(\Tatum\Model\FlowTransferRequest $flow_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/flow/transfer", [], $rHeaders, [], $flow_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\KcsDeployErc20LedgerRequest $kcs_deploy_erc20_ledger_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function kcsDeployErc20Ledger(\Tatum\Model\KcsDeployErc20LedgerRequest $kcs_deploy_erc20_ledger_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $kcs_deploy_erc20_ledger_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KCS from a virtual account to the blockchain
     *
     * @param \Tatum\Model\KcsTransferRequest $kcs_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function kcsTransfer(\Tatum\Model\KcsTransferRequest $kcs_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/transfer", [], $rHeaders, [], $kcs_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function klayDeployErc20(\Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $eth_deploy_erc20_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function klayTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/transfer", [], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send LTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\LtcTransferRequest $ltc_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function ltcTransfer(\Tatum\Model\LtcTransferRequest $ltc_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/litecoin/transfer", [], $rHeaders, [], $ltc_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function oneDeployHrm20(\Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $eth_deploy_erc20_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ONE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function oneTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/transfer", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Send MATIC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function polygonTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/polygon/transfer", [], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new ERC-20 or ERC-20-equivalent token in the virtual account
     *
     * @param string $chain Blockchain to work with
     * @param \Tatum\Model\CreateErc20Request $create_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function registerErc20Token(string $chain, \Tatum\Model\CreateErc20Request $create_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/token/{chain}", ["chain" => $chain]), [], $rHeaders, [], $create_erc20_request
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Send SOL from a virtual account to the blockchain
     *
     * @param \Tatum\Model\SolTransferRequest $sol_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function solTransfer(\Tatum\Model\SolTransferRequest $sol_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/solana/transfer", [], $rHeaders, [], $sol_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Set the contract address of a Celo ERC-20-equivalent token
     *
     * @param string $address ERC-20 contract address
     * @param string $name ERC-20 symbol name.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeCeloErc20Address(string $address, string $name) {
        if (strlen($address) > 100) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeCeloErc20Address, must be smaller than or equal to 100');
        }

        if (strlen($address) < 1) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeCeloErc20Address, must be bigger than or equal to 1');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/celo/erc20/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Set the contract address of an ERC-20, ERC-20-equivalent or TRC-10 token
     *
     * @param string $address Contract address or token ID
     * @param string $name Symbol name.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeTokenAddress(string $address, string $name) {
        if (strlen($address) > 100) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTokenAddress, must be smaller than or equal to 100');
        }

        if (strlen($address) < 1) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTokenAddress, must be bigger than or equal to 1');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/token/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Set the contract address of a TRC-10 or TRC-20 token
     *
     * @param string $address TRC-10 Token ID or TRC-20 contract address
     * @param string $name TRC 10/20 symbol name.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeTrcAddress(string $address, string $name) {
        if (strlen($address) > 34) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTrcAddress, must be smaller than or equal to 34');
        }

        if (strlen($address) < 7) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTrcAddress, must be bigger than or equal to 7');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/tron/trc/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\TronDeployTrcRequest $tron_deploy_trc_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function tronDeployTrc(\Tatum\Model\TronDeployTrcRequest $tron_deploy_trc_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $tron_deploy_trc_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send TRON from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TronTransferOffchainRequest $tron_transfer_offchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function tronTransferOffchain(\Tatum\Model\TronTransferOffchainRequest $tron_transfer_offchain_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/transfer", [], $rHeaders, [], $tron_transfer_offchain_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthDeployErc20200Response
     */
    public function xdcDeployErc20(\Tatum\Model\EthDeployErc20Request $eth_deploy_erc20_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthDeployErc20200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $eth_deploy_erc20_request
            ), 
            "\Tatum\Model\EthDeployErc20200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XDC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\EthTransferRequest $eth_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function xdcTransfer(\Tatum\Model\EthTransferRequest $eth_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/transfer", [], $rHeaders, [], $eth_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an XLM-based asset
     *
     * @param \Tatum\Model\CreateXlmAsset $create_xlm_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function xlmAssetOffchain(\Tatum\Model\CreateXlmAsset $create_xlm_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xlm/asset", [], $rHeaders, [], $create_xlm_asset
            )
        );
    }
    
    /**
     * Send XLM from a virtual account to the blockchain
     *
     * @param \Tatum\Model\XlmTransferRequest $xlm_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function xlmTransfer(\Tatum\Model\XlmTransferRequest $xlm_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xlm/transfer", [], $rHeaders, [], $xlm_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
    /**
     * Create XRP based Asset
     *
     * @param \Tatum\Model\CreateXrpAsset $create_xrp_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function xrpAssetOffchain(\Tatum\Model\CreateXrpAsset $create_xrp_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xrp/asset", [], $rHeaders, [], $create_xrp_asset
            )
        );
    }
    
    /**
     * Send XRP from a virtual account to the blockchain
     *
     * @param \Tatum\Model\XrpTransferRequest $xrp_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransfer200Response
     */
    public function xrpTransfer(\Tatum\Model\XrpTransferRequest $xrp_transfer_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransfer200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xrp/transfer", [], $rHeaders, [], $xrp_transfer_request
            ), 
            "\Tatum\Model\BtcTransfer200Response"
        );
            
        return $result;
    }
    
}
