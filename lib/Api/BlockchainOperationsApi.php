<?php

/**
 * Implementation of BlockchainOperations API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;
!defined("TATUM-SDK") && exit();

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * BlockchainOperations API
 */
class BlockchainOperationsApi extends AbstractApi {
    /**
     * Create a BNB-based asset
     *
     * @param \Tatum\Model\CreateBnbAsset $create_bnb_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function bnbAssetOffchain(\Tatum\Model\CreateBnbAsset $create_bnb_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bnb/asset", [], $rHeaders, [], $create_bnb_asset
            )
        );
    }
    
    /**
     * Deploy an Algorand ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployAlgoErc20OffchainKMSAddress $deploy_algo_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response
     */
    public function deployAlgoErc20OffchainKMSAddress(\Tatum\Model\DeployAlgoErc20OffchainKMSAddress $deploy_algo_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algo/erc20/deploy", [], $rHeaders, [], $deploy_algo_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Algorand ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress $deploy_algo_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response
     */
    public function deployAlgoErc20OffchainMnemonicAddress(\Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress $deploy_algo_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algo/erc20/deploy", [], $rHeaders, [], $deploy_algo_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Algorand ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployAlgoErc20OffchainPKAddress $deploy_algo_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response
     */
    public function deployAlgoErc20OffchainPKAddress(\Tatum\Model\DeployAlgoErc20OffchainPKAddress $deploy_algo_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algo/erc20/deploy", [], $rHeaders, [], $deploy_algo_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployAlgoErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainKMSAddress $deploy_celo_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainKMSAddress(\Tatum\Model\DeployCeloErc20OffchainKMSAddress $deploy_celo_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainKMSXpub $deploy_celo_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainKMSXpub(\Tatum\Model\DeployCeloErc20OffchainKMSXpub $deploy_celo_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainMnemXpub $deploy_celo_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainMnemXpub(\Tatum\Model\DeployCeloErc20OffchainMnemXpub $deploy_celo_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainMnemonicAddress $deploy_celo_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainMnemonicAddress(\Tatum\Model\DeployCeloErc20OffchainMnemonicAddress $deploy_celo_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainPKAddress $deploy_celo_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainPKAddress(\Tatum\Model\DeployCeloErc20OffchainPKAddress $deploy_celo_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Celo ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployCeloErc20OffchainPKXpub $deploy_celo_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployCeloErc20OffchainPKXpub(\Tatum\Model\DeployCeloErc20OffchainPKXpub $deploy_celo_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20/deploy", [], $rHeaders, [], $deploy_celo_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainKMSAddress(\Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainKMSXpub(\Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainMnemXpub(\Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainMnemonicAddress(\Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainPKAddress(\Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy an Ethereum ERC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployErc20OffchainPKXpub(\Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainKMSAddress $deploy_kcs_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainKMSAddress(\Tatum\Model\DeployKCSErc20OffchainKMSAddress $deploy_kcs_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainKMSXpub $deploy_kcs_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainKMSXpub(\Tatum\Model\DeployKCSErc20OffchainKMSXpub $deploy_kcs_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainMnemXpub $deploy_kcs_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainMnemXpub(\Tatum\Model\DeployKCSErc20OffchainMnemXpub $deploy_kcs_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainMnemonicAddress $deploy_kcs_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainMnemonicAddress(\Tatum\Model\DeployKCSErc20OffchainMnemonicAddress $deploy_kcs_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainPKAddress $deploy_kcs_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainPKAddress(\Tatum\Model\DeployKCSErc20OffchainPKAddress $deploy_kcs_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a KuCoin Community Chain (KCC) ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployKCSErc20OffchainPKXpub $deploy_kcs_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployKCSErc20OffchainPKXpub(\Tatum\Model\DeployKCSErc20OffchainPKXpub $deploy_kcs_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/erc20/deploy", [], $rHeaders, [], $deploy_kcs_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainKMSAddress $deploy_trc_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainKMSAddress(\Tatum\Model\DeployTrcOffchainKMSAddress $deploy_trc_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainKMSXpub $deploy_trc_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainKMSXpub(\Tatum\Model\DeployTrcOffchainKMSXpub $deploy_trc_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainMnemXpub $deploy_trc_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainMnemXpub(\Tatum\Model\DeployTrcOffchainMnemXpub $deploy_trc_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainMnemonicAddress $deploy_trc_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainMnemonicAddress(\Tatum\Model\DeployTrcOffchainMnemonicAddress $deploy_trc_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainPKAddress $deploy_trc_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainPKAddress(\Tatum\Model\DeployTrcOffchainPKAddress $deploy_trc_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a TRON TRC-10 or TRC-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployTrcOffchainPKXpub $deploy_trc_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function deployTrcOffchainPKXpub(\Tatum\Model\DeployTrcOffchainPKXpub $deploy_trc_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc/deploy", [], $rHeaders, [], $deploy_trc_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Ethereum ERC-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function erc20(\Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20", [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Ethereum ERC-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function erc20Address(\Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20", [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainKMSAddress(\Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainKMSXpub(\Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainMnemXpub(\Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainMnemonicAddress(\Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainPKAddress(\Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a BNB Smart Chain BEP-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offBscDeployErc20OffchainPKXpub(\Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new BNB Smart Chain BEP-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offBscErc20(\Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20", [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new BNB Smart Chain BEP-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offBscErc20Address(\Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/bep20", [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Celo ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offCelErc20(\Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20", [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Celo ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offCelErc20Address(\Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/erc20", [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Send EGLD from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offEglTransferEth(\Tatum\Model\TransferEth $transfer_eth) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/egld/transfer", [], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send EGLD from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offEglTransferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/egld/transfer", [], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send EGLD from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offEglTransferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/egld/transfer", [], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainKMSAddress(\Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainKMSXpub(\Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainMnemXpub(\Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainMnemonicAddress(\Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainPKAddress(\Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Klaytn ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offKlaDeployErc20OffchainPKXpub(\Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offKlaTransferEth(\Tatum\Model\TransferEth $transfer_eth) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/transfer", [], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offKlaTransferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/transfer", [], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offKlaTransferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/klaytn/transfer", [], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainKMSAddress(\Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainKMSXpub(\Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainMnemXpub(\Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainMnemonicAddress(\Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainPKAddress(\Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a Harmony HRM-20 smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offOneDeployErc20OffchainPKXpub(\Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20/deploy", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $deploy_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Harmony HRM-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offOneErc20(\Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20", [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new Harmony HRM-20 token in the virtual account
     *
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offOneErc20Address(\Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/hrm20", [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Send ONE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offOneTransferEth(\Tatum\Model\TransferEth $transfer_eth, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/transfer", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ONE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offOneTransferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/transfer", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ONE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @param float|0 $shard_id Shard to operate on
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offOneTransferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic, float $shard_id = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/one/transfer", [
                    "shardID" => S::toQueryValue($shard_id),
                ], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send MATIC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offPolTransferEth(\Tatum\Model\TransferEth $transfer_eth) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/polygon/transfer", [], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send MATIC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offPolTransferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/polygon/transfer", [], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send MATIC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offPolTransferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/polygon/transfer", [], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new ERC-20 or ERC-20-equivalent token in the virtual account
     *
     * @param string $chain Blockchain to work with
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offTokErc20(string $chain, \Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/token/{chain}", ["chain" => $chain]), [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new ERC-20 or ERC-20-equivalent token in the virtual account
     *
     * @param string $chain Blockchain to work with
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offTokErc20Address(string $chain, \Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/token/{chain}", ["chain" => $chain]), [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainKMSAddress(\Tatum\Model\DeployErc20OffchainKMSAddress $deploy_erc20_offchain_kms_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainKMSXpub(\Tatum\Model\DeployErc20OffchainKMSXpub $deploy_erc20_offchain_kms_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_kms_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainMnemXpub(\Tatum\Model\DeployErc20OffchainMnemXpub $deploy_erc20_offchain_mnem_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnem_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainMnemonicAddress(\Tatum\Model\DeployErc20OffchainMnemonicAddress $deploy_erc20_offchain_mnemonic_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_mnemonic_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainPKAddress(\Tatum\Model\DeployErc20OffchainPKAddress $deploy_erc20_offchain_pk_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_address
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a XinFin ERC-20-equivalent smart contract to the blockchain and a virtual account
     *
     * @param \Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response
     */
    public function offXdcDeployErc20OffchainPKXpub(\Tatum\Model\DeployErc20OffchainPKXpub $deploy_erc20_offchain_pk_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\DeployErc20OffchainMnemonicAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20/deploy", [], $rHeaders, [], $deploy_erc20_offchain_pk_xpub
            ), 
            "\Tatum\Model\DeployErc20OffchainMnemonicAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new XinFin ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\Erc20 $erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offXdcErc20(\Tatum\Model\Erc20 $erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20", [], $rHeaders, [], $erc20
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new XinFin ERC-20-equivalent token in the virtual account
     *
     * @param \Tatum\Model\Erc20Address $erc20_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Response
     */
    public function offXdcErc20Address(\Tatum\Model\Erc20Address $erc20_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Erc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/erc20", [], $rHeaders, [], $erc20_address
            ), 
            "\Tatum\Model\Erc20Response"
        );
            
        return $result;
    }
    
    /**
     * Send XDC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offXdcTransferEth(\Tatum\Model\TransferEth $transfer_eth) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/transfer", [], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XDC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offXdcTransferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/transfer", [], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XDC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function offXdcTransferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xdc/transfer", [], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Set the contract address of a Celo ERC-20-equivalent token
     *
     * @param string $address ERC-20 contract address
     * @param string $name ERC-20 symbol name.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeCeloErc20Address(string $address, string $name) {
        if (strlen($address) > 100) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeCeloErc20Address, must be smaller than or equal to 100');
        }

        if (strlen($address) < 1) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeCeloErc20Address, must be bigger than or equal to 1');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeCeloErc20Address, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/celo/erc20/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Set the contract address of an ERC-20, ERC-20-equivalent, or TRC-10 token
     *
     * @param string $address On Algorand, this is the asset ID; on TRON, this is the token ID; on the other blockchains, this is the address of the smart contract.
     * @param string $name The name of the token (the token symbol)
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeTokenAddress(string $address, string $name) {
        if (strlen($address) > 100) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTokenAddress, must be smaller than or equal to 100');
        }

        if (strlen($address) < 1) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTokenAddress, must be bigger than or equal to 1');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeTokenAddress, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/token/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Set the contract address of a TRC-10 or TRC-20 token
     *
     * @param string $address TRC-10 Token ID or TRC-20 contract address
     * @param string $name TRC 10/20 symbol name.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function storeTrcAddress(string $address, string $name) {
        if (strlen($address) > 34) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTrcAddress, must be smaller than or equal to 34');
        }

        if (strlen($address) < 7) {
            throw new IAE('Invalid length for "$address" when calling BlockchainOperationsApi.storeTrcAddress, must be bigger than or equal to 7');
        }

        if (strlen($name) > 30) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must be smaller than or equal to 30');
        }

        if (strlen($name) < 1) {
            throw new IAE('Invalid length for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must be bigger than or equal to 1');
        }

        if (!preg_match("/^[a-zA-Z0-9_]+$/", $name)) {
            throw new IAE('Invalid value for "$name" when calling BlockchainOperationsApi.storeTrcAddress, must conform to the pattern /^[a-zA-Z0-9_]+$/');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/offchain/tron/trc/{name}/{address}", ["address" => $address, "name" => $name]), [], $rHeaders, []
            )
        );
    }
    
    /**
     * Send ADA from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAdaKMS $transfer_ada_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAdaKMS(\Tatum\Model\TransferAdaKMS $transfer_ada_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ada/transfer", [], $rHeaders, [], $transfer_ada_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ADA from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAdaKeyPair $transfer_ada_key_pair 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAdaKeyPair(\Tatum\Model\TransferAdaKeyPair $transfer_ada_key_pair) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ada/transfer", [], $rHeaders, [], $transfer_ada_key_pair
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ADA from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAdaMnemonic $transfer_ada_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAdaMnemonic(\Tatum\Model\TransferAdaMnemonic $transfer_ada_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ada/transfer", [], $rHeaders, [], $transfer_ada_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ALGO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAlgo $transfer_algo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAlgo(\Tatum\Model\TransferAlgo $transfer_algo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algorand/transfer", [], $rHeaders, [], $transfer_algo
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ALGO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAlgoErc20 $transfer_algo_erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAlgoErc20(\Tatum\Model\TransferAlgoErc20 $transfer_algo_erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algorand/transfer", [], $rHeaders, [], $transfer_algo_erc20
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ALGO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferAlgoKMS $transfer_algo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferAlgoKMS(\Tatum\Model\TransferAlgoKMS $transfer_algo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/algorand/transfer", [], $rHeaders, [], $transfer_algo_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BCH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBchKMS $transfer_bch_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBchKMS(\Tatum\Model\TransferBchKMS $transfer_bch_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bcash/transfer", [], $rHeaders, [], $transfer_bch_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BCH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBchKeyPair $transfer_bch_key_pair 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBchKeyPair(\Tatum\Model\TransferBchKeyPair $transfer_bch_key_pair) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bcash/transfer", [], $rHeaders, [], $transfer_bch_key_pair
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BCH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBchMnemonic $transfer_bch_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBchMnemonic(\Tatum\Model\TransferBchMnemonic $transfer_bch_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bcash/transfer", [], $rHeaders, [], $transfer_bch_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BNB from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBnb $transfer_bnb 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBnb(\Tatum\Model\TransferBnb $transfer_bnb) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bnb/transfer", [], $rHeaders, [], $transfer_bnb
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BNB from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBnbKMS $transfer_bnb_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBnbKMS(\Tatum\Model\TransferBnbKMS $transfer_bnb_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bnb/transfer", [], $rHeaders, [], $transfer_bnb_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BSC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBsc $transfer_bsc 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBsc(\Tatum\Model\TransferBsc $transfer_bsc) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/transfer", [], $rHeaders, [], $transfer_bsc
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BSC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBscKMS $transfer_bsc_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBscKMS(\Tatum\Model\TransferBscKMS $transfer_bsc_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/transfer", [], $rHeaders, [], $transfer_bsc_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BSC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBscMnemonic $transfer_bsc_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBscMnemonic(\Tatum\Model\TransferBscMnemonic $transfer_bsc_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bsc/transfer", [], $rHeaders, [], $transfer_bsc_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBtcKMS $transfer_btc_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBtcKMS(\Tatum\Model\TransferBtcKMS $transfer_btc_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bitcoin/transfer", [], $rHeaders, [], $transfer_btc_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBtcKeyPair $transfer_btc_key_pair 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBtcKeyPair(\Tatum\Model\TransferBtcKeyPair $transfer_btc_key_pair) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bitcoin/transfer", [], $rHeaders, [], $transfer_btc_key_pair
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send BTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferBtcMnemonic $transfer_btc_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferBtcMnemonic(\Tatum\Model\TransferBtcMnemonic $transfer_btc_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/bitcoin/transfer", [], $rHeaders, [], $transfer_btc_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send CELO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferCelo $transfer_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferCelo(\Tatum\Model\TransferCelo $transfer_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/transfer", [], $rHeaders, [], $transfer_celo
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send CELO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferCeloKMS $transfer_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferCeloKMS(\Tatum\Model\TransferCeloKMS $transfer_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/transfer", [], $rHeaders, [], $transfer_celo_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send CELO from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferCeloMnemonic $transfer_celo_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferCeloMnemonic(\Tatum\Model\TransferCeloMnemonic $transfer_celo_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/celo/transfer", [], $rHeaders, [], $transfer_celo_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send DOGE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferDogeKMS $transfer_doge_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferDogeKMS(\Tatum\Model\TransferDogeKMS $transfer_doge_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/dogecoin/transfer", [], $rHeaders, [], $transfer_doge_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send DOGE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferDogeKeyPair $transfer_doge_key_pair 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferDogeKeyPair(\Tatum\Model\TransferDogeKeyPair $transfer_doge_key_pair) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/dogecoin/transfer", [], $rHeaders, [], $transfer_doge_key_pair
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send DOGE from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferDogeMnemonic $transfer_doge_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferDogeMnemonic(\Tatum\Model\TransferDogeMnemonic $transfer_doge_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/dogecoin/transfer", [], $rHeaders, [], $transfer_doge_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send Ethereum ERC-20 tokens from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferErc20 $transfer_erc20 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferErc20(\Tatum\Model\TransferErc20 $transfer_erc20) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/transfer", [], $rHeaders, [], $transfer_erc20
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send Ethereum ERC-20 tokens from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferErc20KMS $transfer_erc20_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferErc20KMS(\Tatum\Model\TransferErc20KMS $transfer_erc20_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/transfer", [], $rHeaders, [], $transfer_erc20_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send Ethereum ERC-20 tokens from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferErc20Mnemonic $transfer_erc20_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferErc20Mnemonic(\Tatum\Model\TransferErc20Mnemonic $transfer_erc20_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/erc20/transfer", [], $rHeaders, [], $transfer_erc20_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ETH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEth $transfer_eth 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferEth(\Tatum\Model\TransferEth $transfer_eth) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/transfer", [], $rHeaders, [], $transfer_eth
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ETH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthKMS $transfer_eth_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferEthKMS(\Tatum\Model\TransferEthKMS $transfer_eth_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/transfer", [], $rHeaders, [], $transfer_eth_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send ETH from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferEthMnemonic(\Tatum\Model\TransferEthMnemonic $transfer_eth_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/ethereum/transfer", [], $rHeaders, [], $transfer_eth_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send FLOW from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferFlowKMS $transfer_flow_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferFlowKMS(\Tatum\Model\TransferFlowKMS $transfer_flow_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/flow/transfer", [], $rHeaders, [], $transfer_flow_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send FLOW from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferFlowMnemonic $transfer_flow_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferFlowMnemonic(\Tatum\Model\TransferFlowMnemonic $transfer_flow_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/flow/transfer", [], $rHeaders, [], $transfer_flow_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send FLOW from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferFlowPK $transfer_flow_pk 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferFlowPK(\Tatum\Model\TransferFlowPK $transfer_flow_pk) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/flow/transfer", [], $rHeaders, [], $transfer_flow_pk
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KCS from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferKCS $transfer_kcs 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferKCS(\Tatum\Model\TransferKCS $transfer_kcs) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/transfer", [], $rHeaders, [], $transfer_kcs
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KCS from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferKCSKMS $transfer_kcskms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferKCSKMS(\Tatum\Model\TransferKCSKMS $transfer_kcskms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/transfer", [], $rHeaders, [], $transfer_kcskms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KCS from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferKCSMnemonic $transfer_kcs_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferKCSMnemonic(\Tatum\Model\TransferKCSMnemonic $transfer_kcs_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/kcs/transfer", [], $rHeaders, [], $transfer_kcs_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send LTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferLtcKMS $transfer_ltc_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferLtcKMS(\Tatum\Model\TransferLtcKMS $transfer_ltc_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/litecoin/transfer", [], $rHeaders, [], $transfer_ltc_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send LTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferLtcKeyPair $transfer_ltc_key_pair 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferLtcKeyPair(\Tatum\Model\TransferLtcKeyPair $transfer_ltc_key_pair) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/litecoin/transfer", [], $rHeaders, [], $transfer_ltc_key_pair
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send LTC from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferLtcMnemonic $transfer_ltc_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferLtcMnemonic(\Tatum\Model\TransferLtcMnemonic $transfer_ltc_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/litecoin/transfer", [], $rHeaders, [], $transfer_ltc_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send SOL from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferSol $transfer_sol 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferSol(\Tatum\Model\TransferSol $transfer_sol) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/solana/transfer", [], $rHeaders, [], $transfer_sol
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send SOL from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferSolKMS $transfer_sol_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferSolKMS(\Tatum\Model\TransferSolKMS $transfer_sol_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/solana/transfer", [], $rHeaders, [], $transfer_sol_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send TRON from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferTron $transfer_tron 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferTron(\Tatum\Model\TransferTron $transfer_tron) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/transfer", [], $rHeaders, [], $transfer_tron
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send TRON from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferTronKMS $transfer_tron_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferTronKMS(\Tatum\Model\TransferTronKMS $transfer_tron_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/transfer", [], $rHeaders, [], $transfer_tron_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send TRON from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferTronMnemonic $transfer_tron_mnemonic 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferTronMnemonic(\Tatum\Model\TransferTronMnemonic $transfer_tron_mnemonic) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/transfer", [], $rHeaders, [], $transfer_tron_mnemonic
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XLM from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferXlm $transfer_xlm 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferXlm(\Tatum\Model\TransferXlm $transfer_xlm) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xlm/transfer", [], $rHeaders, [], $transfer_xlm
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XLM from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferXlmKMS $transfer_xlm_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferXlmKMS(\Tatum\Model\TransferXlmKMS $transfer_xlm_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xlm/transfer", [], $rHeaders, [], $transfer_xlm_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferXrp $transfer_xrp 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferXrp(\Tatum\Model\TransferXrp $transfer_xrp) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xrp/transfer", [], $rHeaders, [], $transfer_xrp
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from a virtual account to the blockchain
     *
     * @param \Tatum\Model\TransferXrpKMS $transfer_xrp_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransferBtcMnemonic200Response
     */
    public function transferXrpKMS(\Tatum\Model\TransferXrpKMS $transfer_xrp_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransferBtcMnemonic200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xrp/transfer", [], $rHeaders, [], $transfer_xrp_kms
            ), 
            "\Tatum\Model\TransferBtcMnemonic200Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new TRON TRC-10 or TRC-20 token in the virtual account
     *
     * @param \Tatum\Model\TrcAddress $trc_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Trc20Response
     */
    public function trcAddress(\Tatum\Model\TrcAddress $trc_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Trc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc", [], $rHeaders, [], $trc_address
            ), 
            "\Tatum\Model\Trc20Response"
        );
            
        return $result;
    }
    
    /**
     * Register a new TRON TRC-10 or TRC-20 token in the virtual account
     *
     * @param \Tatum\Model\TrcXpub $trc_xpub 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Trc20Response
     */
    public function trcXpub(\Tatum\Model\TrcXpub $trc_xpub) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\Trc20Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/tron/trc", [], $rHeaders, [], $trc_xpub
            ), 
            "\Tatum\Model\Trc20Response"
        );
            
        return $result;
    }
    
    /**
     * Create an XLM-based asset
     *
     * @param \Tatum\Model\CreateXlmAsset $create_xlm_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function xlmAssetOffchain(\Tatum\Model\CreateXlmAsset $create_xlm_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xlm/asset", [], $rHeaders, [], $create_xlm_asset
            )
        );
    }
    
    /**
     * Create XRP based Asset
     *
     * @param \Tatum\Model\CreateXrpAsset $create_xrp_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function xrpAssetOffchain(\Tatum\Model\CreateXrpAsset $create_xrp_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/offchain/xrp/asset", [], $rHeaders, [], $create_xrp_asset
            )
        );
    }
    
}
