<?php

/**
 * Implementation of BNBBeaconChain API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;
!defined("TATUM-SDK") && exit();

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * BNBBeaconChain API
 */
class BNBBeaconChainApi extends AbstractApi {
    /**
     * Broadcast signed BNB transaction
     *
     * @param \Tatum\Model\Broadcast $broadcast 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function bnbBroadcast(\Tatum\Model\Broadcast $broadcast) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransactionHash $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/bnb/broadcast", [], $rHeaders, [], $broadcast
            ), 
            "\Tatum\Model\TransactionHash"
        );
            
        return $result;
    }
    
    /**
     * Generate Binance wallet
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BnbWallet
     */
    public function bnbGenerateWallet() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\BnbWallet $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/bnb/account", [], $rHeaders, []
            ), 
            "\Tatum\Model\BnbWallet"
        );
            
        return $result;
    }
    
    /**
     * Get Binance Account
     *
     * @param string $address Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BnbAccount
     */
    public function bnbGetAccount(string $address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\BnbAccount $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/bnb/account/{address}", ["address" => $address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\BnbAccount"
        );
            
        return $result;
    }
    
    /**
     * Get Binance Transactions in Block
     *
     * @param float $height Block height
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BnbBlock
     */
    public function bnbGetBlock(float $height) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\BnbBlock $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/bnb/block/{height}", ["height" => $height]), [], $rHeaders, []
            ), 
            "\Tatum\Model\BnbBlock"
        );
            
        return $result;
    }
    
    /**
     * Get Binance current block
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function bnbGetCurrentBlock() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var float $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/bnb/block/current", [], $rHeaders, []
            ), 
            "float"
        );
            
        return $result;
    }
    
    /**
     * Get Binance Transaction
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BnbTx
     */
    public function bnbGetTransaction(string $hash) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\BnbTx $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/bnb/transaction/{hash}", ["hash" => $hash]), [], $rHeaders, []
            ), 
            "\Tatum\Model\BnbTx"
        );
            
        return $result;
    }
    
    /**
     * Get Binance Transactions By Address
     *
     * @param string $address Account address
     * @param float $start_time Start time in milliseconds
     * @param float $end_time End time in milliseconds
     * @param float|null $limit Items per page.
     * @param float|null $offset Pagination offset
     * @param string|null $asset Asset name
     * @param string|null $address_type Address type
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BnbTxInAccount
     */
    public function bnbGetTxByAccount(string $address, float $start_time, float $end_time, float $limit = null, float $offset = null, string $asset = null, string $address_type = null) {
        if ($start_time < 0) {
            throw new IAE('Invalid value for "$start_time" when calling BNBBeaconChainApi.bnbGetTxByAccount, must be bigger than or equal to 0.');
        }

        if ($end_time < 0) {
            throw new IAE('Invalid value for "$end_time" when calling BNBBeaconChainApi.bnbGetTxByAccount, must be bigger than or equal to 0.');
        }

        if (isset($limit) && $limit > 50) {
            throw new IAE('Invalid value for "$limit" when calling BNBBeaconChainApi.bnbGetTxByAccount, must be smaller than or equal to 50');
        }

        if (isset($limit) && $limit < 1) {
            throw new IAE('Invalid value for "$limit" when calling BNBBeaconChainApi.bnbGetTxByAccount, must be bigger than or equal to 1.');
        }

        if (isset($offset) && $offset < 0) {
            throw new IAE('Invalid value for "$offset" when calling BNBBeaconChainApi.bnbGetTxByAccount, must be bigger than or equal to 0.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\BnbTxInAccount $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/bnb/account/transaction/{address}", ["address" => $address]), [
                    "startTime" => S::toQueryValue($start_time),
                    "endTime" => S::toQueryValue($end_time),
                    "limit" => isset($limit) ? S::toQueryValue($limit) : null,
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                    "asset" => isset($asset) ? S::toQueryValue($asset) : null,
                    "addressType" => isset($address_type) ? S::toQueryValue($address_type) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\BnbTxInAccount"
        );
            
        return $result;
    }
    
    /**
     * Send Binance / Binance Token from account to account
     *
     * @param \Tatum\Model\TransferBnbBlockchain $transfer_bnb_blockchain 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function transferBnbBlockchain(\Tatum\Model\TransferBnbBlockchain $transfer_bnb_blockchain) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransactionHash $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/bnb/transaction", [], $rHeaders, [], $transfer_bnb_blockchain
            ), 
            "\Tatum\Model\TransactionHash"
        );
            
        return $result;
    }
    
    /**
     * Send Binance / Binance Token from account to account
     *
     * @param \Tatum\Model\TransferBnbBlockchainKMS $transfer_bnb_blockchain_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function transferBnbBlockchainKMS(\Tatum\Model\TransferBnbBlockchainKMS $transfer_bnb_blockchain_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransactionHash $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/bnb/transaction", [], $rHeaders, [], $transfer_bnb_blockchain_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
            
        return $result;
    }
    
}
