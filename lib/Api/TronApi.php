<?php

/**
 * Implementation of Tron API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * Tron API
 */
class TronApi extends AbstractApi {
    /**
     * Generate a TRON wallet
     *
     * @param string|null $mnemonic Mnemonic to use for generation of extended public and private keys.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronWallet
     */
    public function generateTronwallet(string $mnemonic = null) {
        if (isset($mnemonic) && strlen($mnemonic) > 500) {
            throw new IAE('Invalid length for "$mnemonic" when calling TronApi.generateTronwallet, must be smaller than or equal to 500');
        }

        $rPath = "/v3/tron/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "mnemonic" => isset($mnemonic) ? S::toQueryValue($mnemonic) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\TronWallet"
        );
    }
    
    /**
     * Get all transactions for a TRON account
     *
     * @param string $address The address of the TRON account to get all transactions for
     * @param string|null $next The ID of the transaction that follows the last (200&lt;sup&gt;th&lt;/sup&gt;) transaction in the returned list of transactions. Use it to get the next 200 transactions for the specified account (for more information, see the description of this API).
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronAccountTx200Response
     */
    public function tronAccountTx(string $address, string $next = null) {
        $rPath = "/v3/tron/transaction/account/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "next" => isset($next) ? S::toQueryValue($next) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\TronAccountTx200Response"
        );
    }
    
    /**
     * Get TRC-20 transactions for a TRON account
     *
     * @param string $address The address of the TRON account to get TRC-20 transactions for
     * @param string|null $next The ID of the transaction that follows the last (200&lt;sup&gt;th&lt;/sup&gt;) transaction in the returned list of transactions. Use it to get the next 200 transactions for the specified account (for more information, see the description of this API).
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronAccountTx20200Response
     */
    public function tronAccountTx20(string $address, string $next = null) {
        $rPath = "/v3/tron/transaction/account/{address}/trc20";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "next" => isset($next) ? S::toQueryValue($next) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\TronAccountTx20200Response"
        );
    }
    
    /**
     * Broadcast a TRON transaction
     *
     * @param \Tatum\Model\TronBroadcast $tron_broadcast 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronBroadcast(\Tatum\Model\TronBroadcast $tron_broadcast) {
        $rPath = "/v3/tron/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_broadcast
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Create a TRC-10 token
     *
     * @param \Tatum\Model\TronCreateTrc10Request $tron_create_trc10_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronCreateTrc10(\Tatum\Model\TronCreateTrc10Request $tron_create_trc10_request) {
        $rPath = "/v3/tron/trc10/deploy";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_create_trc10_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Create a TRC-20 token
     *
     * @param \Tatum\Model\TronCreateTrc20Request $tron_create_trc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronCreateTrc20(\Tatum\Model\TronCreateTrc20Request $tron_create_trc20_request) {
        $rPath = "/v3/tron/trc20/deploy";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_create_trc20_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Freeze the balance of a TRON account
     *
     * @param \Tatum\Model\TronFreezeRequest $tron_freeze_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronFreeze(\Tatum\Model\TronFreezeRequest $tron_freeze_request) {
        $rPath = "/v3/tron/freezeBalance";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_freeze_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Generate a TRON address from the wallet's extended public key
     *
     * @param string $xpub The extended public key of the wallet; can be in the base58 format (111 characters) or the hexadecimal format (130 characters)
     * @param float $index Derivation index of desired address to be generated.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronGenerateAddress200Response
     */
    public function tronGenerateAddress(string $xpub, float $index) {
        if ($index < 0) {
            throw new IAE('Invalid value for "$index" when calling TronApi.tronGenerateAddress, must be bigger than or equal to 0.');
        }

        $rPath = "/v3/tron/address/{xpub}/{index}";
        $rPath = str_replace("{"."xpub"."}", S::toPathValue($xpub), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronGenerateAddress200Response"
        );
    }
    
    /**
     * Generate the private key for a TRON address
     *
     * @param \Tatum\Model\PrivKeyRequest $priv_key_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\PrivKey
     */
    public function tronGenerateAddressPrivateKey(\Tatum\Model\PrivKeyRequest $priv_key_request) {
        $rPath = "/v3/tron/wallet/priv";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $priv_key_request
            ), 
            "\Tatum\Model\PrivKey"
        );
    }
    
    /**
     * Get the TRON account by its address
     *
     * @param string $address Account address.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronAccount
     */
    public function tronGetAccount(string $address) {
        $rPath = "/v3/tron/account/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronAccount"
        );
    }
    
    /**
     * Get a TRON block by its hash or height
     *
     * @param string $hash Block hash or height.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronBlock
     */
    public function tronGetBlock(string $hash) {
        $rPath = "/v3/tron/block/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronBlock"
        );
    }
    
    /**
     * Get the current TRON block
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronGetCurrentBlock200Response
     */
    public function tronGetCurrentBlock() {
        $rPath = "/v3/tron/info";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronGetCurrentBlock200Response"
        );
    }
    
    /**
     * Get a TRON transaction by its hash
     *
     * @param string $hash Transaction hash.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronTx
     */
    public function tronGetTransaction(string $hash) {
        $rPath = "/v3/tron/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronTx"
        );
    }
    
    /**
     * Send TRX to a TRON account
     *
     * @param \Tatum\Model\TronTransferRequest $tron_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronTransfer(\Tatum\Model\TronTransferRequest $tron_transfer_request) {
        $rPath = "/v3/tron/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_transfer_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Send TRC-10 tokens to a TRON account
     *
     * @param \Tatum\Model\TronTransferTrc10Request $tron_transfer_trc10_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronTransferTrc10(\Tatum\Model\TronTransferTrc10Request $tron_transfer_trc10_request) {
        $rPath = "/v3/tron/trc10/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_transfer_trc10_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Send TRC-20 tokens to a TRON account
     *
     * @param \Tatum\Model\TronTransferTrc20Request $tron_transfer_trc20_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function tronTransferTrc20(\Tatum\Model\TronTransferTrc20Request $tron_transfer_trc20_request) {
        $rPath = "/v3/tron/trc20/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $tron_transfer_trc20_request
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Get information about a TRC-10 token
     *
     * @param string $id_or_owner_address The ID of the TRC-10 token or the address of the token&#39;s owner
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TronTrc10Detail
     */
    public function tronTrc10Detail(string $id_or_owner_address) {
        $rPath = "/v3/tron/trc10/detail/{idOrOwnerAddress}";
        $rPath = str_replace("{"."idOrOwnerAddress"."}", S::toPathValue($id_or_owner_address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\TronTrc10Detail"
        );
    }
    
}
