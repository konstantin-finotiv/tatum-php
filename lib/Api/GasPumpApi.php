<?php

/**
 * Implementation of GasPump API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * GasPump API
 */
class GasPumpApi extends AbstractApi {
    /**
     * Activate gas pump addresses
     *
     * @param \Tatum\Model\ActivateGasPumpAddressesRequest $activate_gas_pump_addresses_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function activateGasPumpAddresses(\Tatum\Model\ActivateGasPumpAddressesRequest $activate_gas_pump_addresses_request) {
        $rPath = "/v3/gas-pump/activate";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $activate_gas_pump_addresses_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Get the results of the address activation transaction
     *
     * @param string $chain The blockchain to work with
     * @param string $tx_id The ID of the address activation transaction
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GasPumpTrxOut
     */
    public function activatedNotActivatedGasPumpAddresses(string $chain, string $tx_id) {
        if (strlen($tx_id) > 80) {
            throw new IAE('Invalid length for "$tx_id" when calling GasPumpApi.activatedNotActivatedGasPumpAddresses, must be smaller than or equal to 80');
        }

        if (strlen($tx_id) < 10) {
            throw new IAE('Invalid length for "$tx_id" when calling GasPumpApi.activatedNotActivatedGasPumpAddresses, must be bigger than or equal to 10');
        }

        $rPath = "/v3/gas-pump/address/{chain}/{txId}";
        $rPath = str_replace("{"."chain"."}", S::toPathValue($chain), $rPath);
        $rPath = str_replace("{"."txId"."}", S::toPathValue($tx_id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\GasPumpTrxOut"
        );
    }
    
    /**
     * Approve the transfer of an asset from a gas pump address
     *
     * @param \Tatum\Model\ApproveTransferCustodialWalletRequest $approve_transfer_custodial_wallet_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function approveTransferCustodialWallet(\Tatum\Model\ApproveTransferCustodialWalletRequest $approve_transfer_custodial_wallet_request) {
        $rPath = "/v3/blockchain/sc/custodial/approve";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $approve_transfer_custodial_wallet_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Check whether the gas pump address with a specified index is activated
     *
     * @param string $chain The blockchain to work with
     * @param string $owner The blockchain address that owns the gas pump address to check; can be referred to as \&quot;master address\&quot;
     * @param float $index The index of the gas pump address to check
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Activated
     */
    public function gasPumpAddressesActivatedOrNot(string $chain, string $owner, float $index) {
        $rPath = "/v3/gas-pump/activated/{chain}/{owner}/{index}";
        $rPath = str_replace("{"."chain"."}", S::toPathValue($chain), $rPath);
        $rPath = str_replace("{"."owner"."}", S::toPathValue($owner), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\Activated"
        );
    }
    
    /**
     * Generate a custodial wallet address
     *
     * @param \Tatum\Model\GenerateCustodialWalletRequest $generate_custodial_wallet_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function generateCustodialWallet(\Tatum\Model\GenerateCustodialWalletRequest $generate_custodial_wallet_request) {
        $rPath = "/v3/blockchain/sc/custodial";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $generate_custodial_wallet_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Generate a gas pump wallet address
     *
     * @param \Tatum\Model\GenerateCustodialWalletBatchRequest $generate_custodial_wallet_batch_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to ethereum-sepolia.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function generateCustodialWalletBatch(\Tatum\Model\GenerateCustodialWalletBatchRequest $generate_custodial_wallet_batch_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rPath = "/v3/blockchain/sc/custodial/batch";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $generate_custodial_wallet_batch_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Precalculate gas pump addresses
     *
     * @param \Tatum\Model\CreateGasPump|null $create_gas_pump 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return string[]
     */
    public function precalculateGasPumpAddresses(\Tatum\Model\CreateGasPump $create_gas_pump = null) {
        $rPath = "/v3/gas-pump";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $create_gas_pump
            ), 
            "string[]"
        );
    }
    
    /**
     * Get the custodial wallet address from the transaction
     *
     * @param string $chain Blockchain to work with
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return string[]
     */
    public function sCGetCustodialAddresses(string $chain, string $hash) {
        $rPath = "/v3/blockchain/sc/custodial/{chain}/{hash}";
        $rPath = str_replace("{"."chain"."}", S::toPathValue($chain), $rPath);
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "string[]"
        );
    }
    
    /**
     * Transfer an asset from a gas pump address
     *
     * @param \Tatum\Model\TransferCustodialWalletRequest $transfer_custodial_wallet_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function transferCustodialWallet(\Tatum\Model\TransferCustodialWalletRequest $transfer_custodial_wallet_request) {
        $rPath = "/v3/blockchain/sc/custodial/transfer";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $transfer_custodial_wallet_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Transfer multiple assets from a gas pump address
     *
     * @param \Tatum\Model\TransferCustodialWalletBatchRequest $transfer_custodial_wallet_batch_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function transferCustodialWalletBatch(\Tatum\Model\TransferCustodialWalletBatchRequest $transfer_custodial_wallet_batch_request) {
        $rPath = "/v3/blockchain/sc/custodial/transfer/batch";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $transfer_custodial_wallet_batch_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
}
