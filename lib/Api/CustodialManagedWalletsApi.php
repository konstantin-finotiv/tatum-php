<?php

/**
 * Implementation of CustodialManagedWallets API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * CustodialManagedWallets API
 */
class CustodialManagedWalletsApi extends AbstractApi {
    /**
     * Create managed address
     *
     * @param \Tatum\Model\CustodialCreateWalletRequest|null $custodial_create_wallet_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\CustodialManagedAddress
     */
    public function custodialCreateWallet(\Tatum\Model\CustodialCreateWalletRequest $custodial_create_wallet_request = null) {
        $rPath = "/v3/custodial/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $custodial_create_wallet_request
            ), 
            "\Tatum\Model\CustodialManagedAddress"
        );
    }
    
    /**
     * Delete managed address
     *
     * @param string $id WalletID of the managed address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function custodialDeleteWallet(string $id) {
        $rPath = "/v3/custodial/wallet/{id}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "DELETE", $rPath, [], $rHeaders, []
            )
        );
    }
    
    /**
     * Get managed address
     *
     * @param string $id WalletID of the managed address
     * @param bool|false $export If set to \&quot;true\&quot;, returns the private key in the response; if not set, defaults to \&quot;false\&quot; (the private key is not included in the response)
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\CustodialManagedAddress[]
     */
    public function custodialGetWallet(string $id, bool $export = false) {
        $rPath = "/v3/custodial/wallet/{id}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "export" => S::toQueryValue($export),
                ], $rHeaders, []
            ), 
            "\Tatum\Model\CustodialManagedAddress[]"
        );
    }
    
    /**
     * Get managed addresses
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\CustodialManagedAddress[]
     */
    public function custodialGetWallets() {
        $rPath = "/v3/custodial/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\CustodialManagedAddress[]"
        );
    }
    
    /**
     * Sign and transfer using managed address
     *
     * @param \Tatum\Model\TransferManagedAddress|null $transfer_managed_address 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function custodialTransferManagedAddress(\Tatum\Model\TransferManagedAddress $transfer_managed_address = null) {
        $rPath = "/v3/custodial/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $transfer_managed_address
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
}
