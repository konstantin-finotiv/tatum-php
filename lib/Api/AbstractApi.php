<?php

/**
 * Abstract API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use Tatum\Sdk\Caller;
use Tatum\Sdk\HeaderSelector;
use Tatum\Sdk\Psr7\Exception\RequestException;
use Tatum\Sdk\Psr7\Request;
use Tatum\Sdk\Psr7\Http\Client;
use Tatum\Sdk\Serializer;
use Tatum\Sdk\ApiException;

abstract class AbstractApi {
    /**
     * Caller object
     *
     * @var \Tatum\Sdk\Caller
     */
    protected $_caller;

    /**
     * "Accept" and Content-Type header selector
     *
     * @var \Tatum\Sdk\HeaderSelector
     */
    protected $_headerSelector;

    /**
     * API Constructor
     *
     * @param Caller $caller API Caller object
     */
    public function __construct(Caller $caller) {
        $this->_caller = $caller;
        $this->_headerSelector = new HeaderSelector();
    }

    /**
     * Execute a request
     *
     * @param \Tatum\Sdk\Psr7\Request $request    An initialized request object.
     * @param string|null             $returnType (optional) Return type
     * @throws \{{invokerPackage}}\Sdk\ApiException on non-2xx response
     * @return \Tatum\Model\ModelInterface|\Tatum\Sdk\Psr7\Http\ResponseInterface
     */
    protected function exec(Request $request, ?string $returnType = null) {
        // Set the user agent and API key
        $request->setHeader("User-Agent", $this->_caller->config()->getUserAgent());
        $request->setHeader("x-api-key", $this->_caller->config()->getApiKey());

        try {
            $response = Client::send($request);
        } catch (RequestException $e) {
            $response = $e->getResponse();

            throw (new ApiException(
                sprintf("[%d] Request error (%s)", (int) $e->getCode(), $e->getMessage()),
                (int) $e->getCode(),
                $response ? $response->getHeaders() : [],
                $response ? $response->getBody() : null
            ))->setResponseObject(
                Serializer::deserialize(
                    $this->_caller->config(),
                    $response ? $response->getBody() : null,
                    $returnType,
                    $response ? $response->getHeaders() : []
                )
            );
        }

        // Prepare the status code
        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw (new ApiException(
                sprintf("[%d] Error connecting to the API (%s)", $statusCode, (string) $request->getUri()),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            ))->setResponseObject(
                is_string($returnType) && strlen($returnType)
                    ? Serializer::deserialize(
                        $this->_caller->config(),
                        $response->getBody(),
                        $returnType,
                        $response->getHeaders()
                    )
                    : null
            );
        }

        // Convert to a model
        return is_string($returnType) && strlen($returnType)
            ? Serializer::deserialize(
                $this->_caller->config(),
                $response->getBody(),
                $returnType,
                $response->getHeaders()
            )
            : $response;
    }
}
