<?php

/**
 * Implementation of Klaytn API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * Klaytn API
 */
class KlaytnApi extends AbstractApi {
    /**
     * Broadcast signed Klaytn transaction
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnBroadcast
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function klaytnBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransactionHash $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/broadcast", [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
            
        return $result;
    }
    
    /**
     * Generate Klaytn account address from Extended public key
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGenerateAddress
     *
     * @param string $xpub Extended public key of wallet.
     * @param float $index Derivation index of desired address to be generated.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\KlaytnGenerateAddress200Response
     */
    public function klaytnGenerateAddress(string $xpub, float $index) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\KlaytnGenerateAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/klaytn/address/{xpub}/{index}", ["xpub" => $xpub, "index" => $index]), [], $rHeaders, []
            ), 
            "\Tatum\Model\KlaytnGenerateAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Generate Klaytn private key
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGenerateAddressPrivateKey
     *
     * @param \Tatum\Model\PrivKeyRequest $priv_key_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\PrivKey
     */
    public function klaytnGenerateAddressPrivateKey(\Tatum\Model\PrivKeyRequest $priv_key_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\PrivKey $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/wallet/priv", [], $rHeaders, [], $priv_key_request
            ), 
            "\Tatum\Model\PrivKey"
        );
            
        return $result;
    }
    
    /**
     * Generate Klaytn wallet
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGenerateWallet
     *
     * @param string|null $mnemonic Mnemonic to use for generation of extended public and private keys.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Wallet
     */
    public function klaytnGenerateWallet(string $mnemonic = null) {
        if (isset($mnemonic) && strlen($mnemonic) > 500) {
            throw new IAE('Invalid length for "$mnemonic" when calling KlaytnApi.klaytnGenerateWallet, must be smaller than or equal to 500');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\Wallet $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/klaytn/wallet", [
                    "mnemonic" => isset($mnemonic) ? S::toQueryValue($mnemonic) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\Wallet"
        );
            
        return $result;
    }
    
    /**
     * Get Klaytn Account balance
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGetBalance
     *
     * @param string $address Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\KlaytnGetBalance200Response
     */
    public function klaytnGetBalance(string $address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\KlaytnGetBalance200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/klaytn/account/balance/{address}", ["address" => $address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\KlaytnGetBalance200Response"
        );
            
        return $result;
    }
    
    /**
     * Get Klaytn block by hash
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGetBlock
     *
     * @param string $hash Block hash or block number
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\KlaytnBlock
     */
    public function klaytnGetBlock(string $hash) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\KlaytnBlock $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/klaytn/block/{hash}", ["hash" => $hash]), [], $rHeaders, []
            ), 
            "\Tatum\Model\KlaytnBlock"
        );
            
        return $result;
    }
    
    /**
     * Get current block number
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGetCurrentBlock
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function klaytnGetCurrentBlock() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var float $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/klaytn/block/current", [], $rHeaders, []
            ), 
            "float"
        );
            
        return $result;
    }
    
    /**
     * Get Klaytn Transaction
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGetTransaction
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\KlaytnTx
     */
    public function klaytnGetTransaction(string $hash) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\KlaytnTx $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/klaytn/transaction/{hash}", ["hash" => $hash]), [], $rHeaders, []
            ), 
            "\Tatum\Model\KlaytnTx"
        );
            
        return $result;
    }
    
    /**
     * Get count of outgoing Klaytn transactions
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnGetTransactionCount
     *
     * @param string $address address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function klaytnGetTransactionCount(string $address) {
        if (strlen($address) > 42) {
            throw new IAE('Invalid length for "$address" when calling KlaytnApi.klaytnGetTransactionCount, must be smaller than or equal to 42');
        }

        if (strlen($address) < 42) {
            throw new IAE('Invalid length for "$address" when calling KlaytnApi.klaytnGetTransactionCount, must be bigger than or equal to 42');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var float $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/klaytn/transaction/count/{address}", ["address" => $address]), [], $rHeaders, []
            ), 
            "float"
        );
            
        return $result;
    }
    
    /**
     * Invoke a method in a smart contract on Klaytn
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/klaytnSmartcontractCallKlaytnSmartContractMethod
     *
     * @param \Tatum\Model\CallKlaytnSmartContractMethod $call_klaytn_smart_contract_method 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response
     */
    public function klaytnSmartcontractCallKlaytnSmartContractMethod(\Tatum\Model\CallKlaytnSmartContractMethod $call_klaytn_smart_contract_method) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/smartcontract", [], $rHeaders, [], $call_klaytn_smart_contract_method
            ), 
            "\Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response"
        );
            
        return $result;
    }
    
    /**
     * Invoke a method in a smart contract on Klaytn
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/klaytnSmartcontractCallKlaytnSmartContractMethodKMS
     *
     * @param \Tatum\Model\CallKlaytnSmartContractMethodKMS $call_klaytn_smart_contract_method_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response
     */
    public function klaytnSmartcontractCallKlaytnSmartContractMethodKMS(\Tatum\Model\CallKlaytnSmartContractMethodKMS $call_klaytn_smart_contract_method_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/smartcontract", [], $rHeaders, [], $call_klaytn_smart_contract_method_kms
            ), 
            "\Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response"
        );
            
        return $result;
    }
    
    /**
     * Invoke a method in a smart contract on Klaytn
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/klaytnSmartcontractCallKlaytnSmartContractReadMethod
     *
     * @param \Tatum\Model\CallKlaytnSmartContractReadMethod $call_klaytn_smart_contract_read_method 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response
     */
    public function klaytnSmartcontractCallKlaytnSmartContractReadMethod(\Tatum\Model\CallKlaytnSmartContractReadMethod $call_klaytn_smart_contract_read_method) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/smartcontract", [], $rHeaders, [], $call_klaytn_smart_contract_read_method
            ), 
            "\Tatum\Model\EthereumSmartcontractCallSmartContractMethod200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from account to account
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/klaytnTransactionTransferKlaytnBlockchain
     *
     * @param \Tatum\Model\TransferKlaytnBlockchain $transfer_klaytn_blockchain 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function klaytnTransactionTransferKlaytnBlockchain(\Tatum\Model\TransferKlaytnBlockchain $transfer_klaytn_blockchain) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/transaction", [], $rHeaders, [], $transfer_klaytn_blockchain
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Send KLAY from account to account
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/klaytnTransactionTransferKlaytnBlockchainKMS
     *
     * @param \Tatum\Model\TransferKlaytnBlockchainKMS $transfer_klaytn_blockchain_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function klaytnTransactionTransferKlaytnBlockchainKMS(\Tatum\Model\TransferKlaytnBlockchainKMS $transfer_klaytn_blockchain_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/klaytn/transaction", [], $rHeaders, [], $transfer_klaytn_blockchain_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Web3 HTTP driver
     * 
     * @see   https://apidoc.tatum.io/tag/Klaytn/#operation/KlaytnWeb3Driver
     *
     * @param string $x_api_key Tatum X-API-Key used for authorization.
     * @param object $body 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return object
     */
    public function klaytnWeb3Driver(string $x_api_key, object $body) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var object $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", S::parse("/v3/klaytn/web3/{xApiKey}", ["xApiKey" => $x_api_key]), [], $rHeaders, [], $body
            ), 
            "object"
        );
            
        return $result;
    }
    
}
