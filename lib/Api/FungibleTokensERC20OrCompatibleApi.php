<?php

/**
 * Implementation of FungibleTokensERC20OrCompatible API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @see       https://apidoc.tatum.io/tag/FungibleTokensERC20OrCompatible
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * FungibleTokensERC20OrCompatible API
 */
class FungibleTokensERC20OrCompatibleApi extends AbstractApi {
    /**
     * Allow a blockchain address to transfer and burn fungible tokens
     *
     * @param \Tatum\Model\Erc20ApproveRequest $erc20_approve_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function erc20Approve(\Tatum\Model\Erc20ApproveRequest $erc20_approve_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/token/approve", [], $rHeaders, [], $erc20_approve_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Burn fungible tokens
     *
     * @param \Tatum\Model\Erc20BurnRequest $erc20_burn_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function erc20Burn(\Tatum\Model\Erc20BurnRequest $erc20_burn_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/token/burn", [], $rHeaders, [], $erc20_burn_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Deploy a fungible token smart contract
     *
     * @param \Tatum\Model\Erc20DeployRequest $erc20_deploy_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function erc20Deploy(\Tatum\Model\Erc20DeployRequest $erc20_deploy_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/token/deploy", [], $rHeaders, [], $erc20_deploy_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Get the number of fungible tokens that a blockchain address holds in a smart contract
     *
     * @param string $chain Network name
     * @param string $address The blockchain address that you want to get the token balance of
     * @param string $contract_address The address of the fungible token smart contract
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20Balance
     */
    public function erc20GetBalance(string $chain, string $address, string $contract_address, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\Erc20Balance $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/token/balance/{chain}/{contractAddress}/{address}", ["chain" => $chain, "address" => $address, "contractAddress" => $contract_address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\Erc20Balance"
        );
            
        return $result;
    }
    
    /**
     * Get the total number of fungible tokens that a blockchain address holds
     *
     * @param string $chain Network name
     * @param string $address The blockchain address that you want to get the token balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Erc20BalanceForAddress[]
     */
    public function erc20GetBalanceAddress(string $chain, string $address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\Erc20BalanceForAddress[] $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/token/address/{chain}/{address}", ["chain" => $chain, "address" => $address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\Erc20BalanceForAddress[]"
        );
            
        return $result;
    }
    
    /**
     * Get fungible token transactions on a blockchain address
     *
     * @param string $chain The blockchain to work with
     * @param string $address Account address you want to get balance of
     * @param string $token_address Address of the token smart contract
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain next page of the data.
     * @param float|null $from Transactions from this block onwards will be included.
     * @param float|null $to Transactions up to this block will be included.
     * @param string|'DESC' $sort Sorting of the data. ASC - oldest first, DESC - newest first.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\FungibleTx[]
     */
    public function erc20GetTransactionByAddress(string $chain, string $address, string $token_address, float $page_size, float $offset = null, float $from = null, float $to = null, string $sort = 'DESC') {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling FungibleTokensERC20OrCompatibleApi.erc20GetTransactionByAddress, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling FungibleTokensERC20OrCompatibleApi.erc20GetTransactionByAddress, must be bigger than or equal to 1.');
        }

        if (isset($from) && $from < 0) {
            throw new IAE('Invalid value for "$from" when calling FungibleTokensERC20OrCompatibleApi.erc20GetTransactionByAddress, must be bigger than or equal to 0.');
        }

        if (isset($to) && $to < 0) {
            throw new IAE('Invalid value for "$to" when calling FungibleTokensERC20OrCompatibleApi.erc20GetTransactionByAddress, must be bigger than or equal to 0.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\FungibleTx[] $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/token/transaction/{chain}/{address}/{tokenAddress}", ["chain" => $chain, "address" => $address, "tokenAddress" => $token_address]), [
                    "pageSize" => S::toQueryValue($page_size),
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                    "from" => isset($from) ? S::toQueryValue($from) : null,
                    "to" => isset($to) ? S::toQueryValue($to) : null,
                    "sort" => S::toQueryValue($sort),
                ], $rHeaders, []
            ), 
            "\Tatum\Model\FungibleTx[]"
        );
            
        return $result;
    }
    
    /**
     * Mint fungible tokens
     *
     * @param \Tatum\Model\Erc20MintRequest $erc20_mint_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function erc20Mint(\Tatum\Model\Erc20MintRequest $erc20_mint_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/token/mint", [], $rHeaders, [], $erc20_mint_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Transfer fungible tokens
     *
     * @param \Tatum\Model\Erc20TransferRequest $erc20_transfer_request 
     * @param string|'ethereum-sepolia' $x_testnet_type Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function erc20Transfer(\Tatum\Model\Erc20TransferRequest $erc20_transfer_request, string $x_testnet_type = 'ethereum-sepolia') {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-testnet-type" => isset($x_testnet_type) ? S::toHeaderValue($x_testnet_type) : null,
            ], 
            $rHeaders
        );

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/token/transaction", [], $rHeaders, [], $erc20_transfer_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
}
