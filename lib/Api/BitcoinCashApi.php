<?php

/**
 * Implementation of BitcoinCash API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * BitcoinCash API
 */
class BitcoinCashApi extends AbstractApi {
    /**
     * Broadcast signed Bitcoin Cash transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function bchBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rPath = "/v3/bcash/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Generate Bitcoin Cash deposit address from Extended public key
     *
     * @param string $xpub Extended public key of wallet.
     * @param float $index Derivation index of desired address to be generated.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchGenerateAddress200Response
     */
    public function bchGenerateAddress(string $xpub, float $index) {
        $rPath = "/v3/bcash/address/{xpub}/{index}";
        $rPath = str_replace("{"."xpub"."}", S::toPathValue($xpub), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BchGenerateAddress200Response"
        );
    }
    
    /**
     * Generate Bitcoin Cash private key
     *
     * @param \Tatum\Model\PrivKeyRequest $priv_key_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\PrivKey
     */
    public function bchGenerateAddressPrivateKey(\Tatum\Model\PrivKeyRequest $priv_key_request) {
        $rPath = "/v3/bcash/wallet/priv";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $priv_key_request
            ), 
            "\Tatum\Model\PrivKey"
        );
    }
    
    /**
     * Generate Bitcoin Cash wallet
     *
     * @param string|null $mnemonic Mnemonic to use for generation of extended public and private keys.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Wallet
     */
    public function bchGenerateWallet(string $mnemonic = null) {
        if (isset($mnemonic) && strlen($mnemonic) > 500) {
            throw new IAE('Invalid length for "$mnemonic" when calling BitcoinCashApi.bchGenerateWallet, must be smaller than or equal to 500');
        }

        $rPath = "/v3/bcash/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "mnemonic" => isset($mnemonic) ? S::toQueryValue($mnemonic) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\Wallet"
        );
    }
    
    /**
     * Get Bitcoin Cash Block by hash
     *
     * @param string $hash Block hash or height
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchBlock
     */
    public function bchGetBlock(string $hash) {
        $rPath = "/v3/bcash/block/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BchBlock"
        );
    }
    
    /**
     * Get Bitcoin Cash Blockchain Information
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchInfo
     */
    public function bchGetBlockChainInfo() {
        $rPath = "/v3/bcash/info";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BchInfo"
        );
    }
    
    /**
     * Get Bitcoin Cash Block hash
     *
     * @param float $i The number of blocks preceding a particular block on a block chain.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchGetBlockHash200Response
     */
    public function bchGetBlockHash(float $i) {
        $rPath = "/v3/bcash/block/hash/{i}";
        $rPath = str_replace("{"."i"."}", S::toPathValue($i), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BchGetBlockHash200Response"
        );
    }
    
    /**
     * Get Bitcoin Cash Transaction by hash
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchTx
     */
    public function bchGetRawTransaction(string $hash) {
        $rPath = "/v3/bcash/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BchTx"
        );
    }
    
    /**
     * Get Bitcoin Cash Transactions by address
     *
     * @param string $address Address
     * @param int|null $skip Define, how much transactions should be skipped to obtain another page.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BchTx[]
     */
    public function bchGetTxByAddress(string $address, int $skip = null) {
        $rPath = "/v3/bcash/transaction/address/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "skip" => isset($skip) ? S::toQueryValue($skip) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\BchTx[]"
        );
    }
    
    /**
     * JSON RPC HTTP driver
     *
     * @param \Tatum\Model\BchRpcDriverRequest $bch_rpc_driver_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return object
     */
    public function bchRpcDriver(\Tatum\Model\BchRpcDriverRequest $bch_rpc_driver_request) {
        $rPath = "/v3/bcash/node";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $bch_rpc_driver_request
            ), 
            "object"
        );
    }
    
    /**
     * Send BCH to Bitcoin Cash addresses
     *
     * @param \Tatum\Model\BchTransferBlockchainRequest $bch_transfer_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function bchTransferBlockchain(\Tatum\Model\BchTransferBlockchainRequest $bch_transfer_blockchain_request) {
        $rPath = "/v3/bcash/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $bch_transfer_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
}
