<?php

/**
 * Implementation of Auction API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @see       https://apidoc.tatum.io/tag/Auction
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * Auction API
 */
class AuctionApi extends AbstractApi {
    /**
     * Allow the NFT auction or marketplace to transfer an asset
     *
     * @param \Tatum\Model\ApproveNftAuctionSpendingRequest $approve_nft_auction_spending_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function approveNftAuctionSpending(\Tatum\Model\ApproveNftAuctionSpendingRequest $approve_nft_auction_spending_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/approve", [], $rHeaders, [], $approve_nft_auction_spending_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Bid for an asset at the NFT auction
     *
     * @param \Tatum\Model\BidOnAuctionRequest $bid_on_auction_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function bidOnAuction(\Tatum\Model\BidOnAuctionRequest $bid_on_auction_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/bid", [], $rHeaders, [], $bid_on_auction_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Cancel the selling of an asset at the NFT auction
     *
     * @param \Tatum\Model\CancelAuctionRequest $cancel_auction_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function cancelAuction(\Tatum\Model\CancelAuctionRequest $cancel_auction_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/cancel", [], $rHeaders, [], $cancel_auction_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Sell an asset at the NFT auction
     *
     * @param \Tatum\Model\CreateAuctionRequest $create_auction_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function createAuction(\Tatum\Model\CreateAuctionRequest $create_auction_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/sell", [], $rHeaders, [], $create_auction_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an NFT auction
     *
     * @param \Tatum\Model\GenerateAuctionRequest $generate_auction_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function generateAuction(\Tatum\Model\GenerateAuctionRequest $generate_auction_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction", [], $rHeaders, [], $generate_auction_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Get information about an auctioned asset at the NFT auction
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @param string $id Auction ID
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GetAuction200Response
     */
    public function getAuction(string $chain, string $contract_address, string $id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\GetAuction200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/{id}", ["chain" => $chain, "contractAddress" => $contract_address, "id" => $id]), [], $rHeaders, []
            ), 
            "\Tatum\Model\GetAuction200Response"
        );
            
        return $result;
    }
    
    /**
     * Get the NFT auction fee
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function getAuctionFee(string $chain, string $contract_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var float $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/fee", ["chain" => $chain, "contractAddress" => $contract_address]), [], $rHeaders, []
            ), 
            "float"
        );
            
        return $result;
    }
    
    /**
     * Get the recipient of the NFT auction fee
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GetAuctionFeeRecipient200Response
     */
    public function getAuctionFeeRecipient(string $chain, string $contract_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\GetAuctionFeeRecipient200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/recipient", ["chain" => $chain, "contractAddress" => $contract_address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\GetAuctionFeeRecipient200Response"
        );
            
        return $result;
    }
    
    /**
     * Settle an NFT auction
     *
     * @param \Tatum\Model\SettleAuctionRequest $settle_auction_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function settleAuction(\Tatum\Model\SettleAuctionRequest $settle_auction_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/settle", [], $rHeaders, [], $settle_auction_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the NFT auction fee
     *
     * @param \Tatum\Model\UpdateAuctionFeeRequest $update_auction_fee_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function updateAuctionFee(\Tatum\Model\UpdateAuctionFeeRequest $update_auction_fee_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/fee", [], $rHeaders, [], $update_auction_fee_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the recipient of the NFT auction fee
     *
     * @param \Tatum\Model\UpdateAuctionFeeRecipientRequest $update_auction_fee_recipient_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function updateAuctionFeeRecipient(\Tatum\Model\UpdateAuctionFeeRecipientRequest $update_auction_fee_recipient_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BtcTransferBlockchain200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/recipient", [], $rHeaders, [], $update_auction_fee_recipient_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
            
        return $result;
    }
    
}
