<?php

/**
 * Implementation of Auction API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @see       https://apidoc.tatum.io
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * Auction API
 */
class AuctionApi extends AbstractApi {
    /**
     * Allow the NFT auction or marketplace to transfer an asset
     *
     * @param \Tatum\Model\ApproveNftSpending $approve_nft_spending 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionApproveNftSpending(\Tatum\Model\ApproveNftSpending $approve_nft_spending) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/approve", [], $rHeaders, [], $approve_nft_spending
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Allow the NFT auction or marketplace to transfer an asset
     *
     * @param \Tatum\Model\ApproveNftSpendingCelo $approve_nft_spending_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionApproveNftSpendingCelo(\Tatum\Model\ApproveNftSpendingCelo $approve_nft_spending_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/approve", [], $rHeaders, [], $approve_nft_spending_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Allow the NFT auction or marketplace to transfer an asset
     *
     * @param \Tatum\Model\ApproveNftSpendingCeloKMS $approve_nft_spending_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionApproveNftSpendingCeloKMS(\Tatum\Model\ApproveNftSpendingCeloKMS $approve_nft_spending_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/approve", [], $rHeaders, [], $approve_nft_spending_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Allow the NFT auction or marketplace to transfer an asset
     *
     * @param \Tatum\Model\ApproveNftSpendingKMS $approve_nft_spending_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionApproveNftSpendingKMS(\Tatum\Model\ApproveNftSpendingKMS $approve_nft_spending_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/approve", [], $rHeaders, [], $approve_nft_spending_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Bid for an asset at the NFT auction
     *
     * @param \Tatum\Model\BidOnAuction $bid_on_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionBidOnAuction(\Tatum\Model\BidOnAuction $bid_on_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/bid", [], $rHeaders, [], $bid_on_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Bid for an asset at the NFT auction
     *
     * @param \Tatum\Model\BidOnAuctionCelo $bid_on_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionBidOnAuctionCelo(\Tatum\Model\BidOnAuctionCelo $bid_on_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/bid", [], $rHeaders, [], $bid_on_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Bid for an asset at the NFT auction
     *
     * @param \Tatum\Model\BidOnAuctionCeloKMS $bid_on_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionBidOnAuctionCeloKMS(\Tatum\Model\BidOnAuctionCeloKMS $bid_on_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/bid", [], $rHeaders, [], $bid_on_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Bid for an asset at the NFT auction
     *
     * @param \Tatum\Model\BidOnAuctionKMS $bid_on_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionBidOnAuctionKMS(\Tatum\Model\BidOnAuctionKMS $bid_on_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/bid", [], $rHeaders, [], $bid_on_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Cancel the selling of an asset at the NFT auction
     *
     * @param \Tatum\Model\CancelAuction $cancel_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionCancelAuction(\Tatum\Model\CancelAuction $cancel_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/cancel", [], $rHeaders, [], $cancel_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Cancel the selling of an asset at the NFT auction
     *
     * @param \Tatum\Model\CancelAuctionCelo $cancel_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionCancelAuctionCelo(\Tatum\Model\CancelAuctionCelo $cancel_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/cancel", [], $rHeaders, [], $cancel_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Cancel the selling of an asset at the NFT auction
     *
     * @param \Tatum\Model\CancelAuctionCeloKMS $cancel_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionCancelAuctionCeloKMS(\Tatum\Model\CancelAuctionCeloKMS $cancel_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/cancel", [], $rHeaders, [], $cancel_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Cancel the selling of an asset at the NFT auction
     *
     * @param \Tatum\Model\CancelAuctionKMS $cancel_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionCancelAuctionKMS(\Tatum\Model\CancelAuctionKMS $cancel_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/cancel", [], $rHeaders, [], $cancel_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeAuctionCeloKMS $update_fee_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionFeeUpdateFeeAuctionCeloKMSUpdate(\Tatum\Model\UpdateFeeAuctionCeloKMS $update_fee_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/fee", [], $rHeaders, [], $update_fee_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeAuctionCelo $update_fee_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionFeeUpdateFeeAuctionCeloUpdate(\Tatum\Model\UpdateFeeAuctionCelo $update_fee_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/fee", [], $rHeaders, [], $update_fee_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeAuctionKMS $update_fee_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionFeeUpdateFeeAuctionKMSUpdate(\Tatum\Model\UpdateFeeAuctionKMS $update_fee_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/fee", [], $rHeaders, [], $update_fee_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeAuction $update_fee_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionFeeUpdateFeeAuctionUpdate(\Tatum\Model\UpdateFeeAuction $update_fee_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/fee", [], $rHeaders, [], $update_fee_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an NFT auction
     *
     * @param \Tatum\Model\GenerateAuction $generate_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionGenerateAuction(\Tatum\Model\GenerateAuction $generate_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction", [], $rHeaders, [], $generate_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an NFT auction
     *
     * @param \Tatum\Model\GenerateAuctionCelo $generate_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionGenerateAuctionCelo(\Tatum\Model\GenerateAuctionCelo $generate_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction", [], $rHeaders, [], $generate_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an NFT auction
     *
     * @param \Tatum\Model\GenerateAuctionCeloKMS $generate_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionGenerateAuctionCeloKMS(\Tatum\Model\GenerateAuctionCeloKMS $generate_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction", [], $rHeaders, [], $generate_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create an NFT auction
     *
     * @param \Tatum\Model\GenerateAuctionKMS $generate_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionGenerateAuctionKMS(\Tatum\Model\GenerateAuctionKMS $generate_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction", [], $rHeaders, [], $generate_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the recipient of the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeRecipientCeloKMS $update_fee_recipient_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionRecipientUpdateFeeRecipientCeloKMSUpdate(\Tatum\Model\UpdateFeeRecipientCeloKMS $update_fee_recipient_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/recipient", [], $rHeaders, [], $update_fee_recipient_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the recipient of the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeRecipientCelo $update_fee_recipient_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionRecipientUpdateFeeRecipientCeloUpdate(\Tatum\Model\UpdateFeeRecipientCelo $update_fee_recipient_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/recipient", [], $rHeaders, [], $update_fee_recipient_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the recipient of the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeRecipientKMS $update_fee_recipient_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionRecipientUpdateFeeRecipientKMSUpdate(\Tatum\Model\UpdateFeeRecipientKMS $update_fee_recipient_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/recipient", [], $rHeaders, [], $update_fee_recipient_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Update the recipient of the NFT auction fee
     *
     * @param \Tatum\Model\UpdateFeeRecipient $update_fee_recipient 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionRecipientUpdateFeeRecipientUpdate(\Tatum\Model\UpdateFeeRecipient $update_fee_recipient) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", "/v3/blockchain/auction/recipient", [], $rHeaders, [], $update_fee_recipient
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Sell an asset at the NFT auction
     *
     * @param \Tatum\Model\CreateAuction $create_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSellCreateAuction(\Tatum\Model\CreateAuction $create_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/sell", [], $rHeaders, [], $create_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Sell an asset at the NFT auction
     *
     * @param \Tatum\Model\CreateAuctionCelo $create_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSellCreateAuctionCelo(\Tatum\Model\CreateAuctionCelo $create_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/sell", [], $rHeaders, [], $create_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Sell an asset at the NFT auction
     *
     * @param \Tatum\Model\CreateAuctionCeloKMS $create_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSellCreateAuctionCeloKMS(\Tatum\Model\CreateAuctionCeloKMS $create_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/sell", [], $rHeaders, [], $create_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Sell an asset at the NFT auction
     *
     * @param \Tatum\Model\CreateAuctionKMS $create_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSellCreateAuctionKMS(\Tatum\Model\CreateAuctionKMS $create_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/sell", [], $rHeaders, [], $create_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Settle an NFT auction
     *
     * @param \Tatum\Model\SettleAuction $settle_auction 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSettleAuction(\Tatum\Model\SettleAuction $settle_auction) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/settle", [], $rHeaders, [], $settle_auction
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Settle an NFT auction
     *
     * @param \Tatum\Model\SettleAuctionCelo $settle_auction_celo 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSettleAuctionCelo(\Tatum\Model\SettleAuctionCelo $settle_auction_celo) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/settle", [], $rHeaders, [], $settle_auction_celo
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Settle an NFT auction
     *
     * @param \Tatum\Model\SettleAuctionCeloKMS $settle_auction_celo_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSettleAuctionCeloKMS(\Tatum\Model\SettleAuctionCeloKMS $settle_auction_celo_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/settle", [], $rHeaders, [], $settle_auction_celo_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Settle an NFT auction
     *
     * @param \Tatum\Model\SettleAuctionKMS $settle_auction_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function blockchainAuctionSettleAuctionKMS(\Tatum\Model\SettleAuctionKMS $settle_auction_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/blockchain/auction/settle", [], $rHeaders, [], $settle_auction_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Get information about an auctioned asset at the NFT auction
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @param string $id Auction ID
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GetAuction200Response
     */
    public function getAuction(string $chain, string $contract_address, string $id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\GetAuction200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/{id}", ["chain" => $chain, "contractAddress" => $contract_address, "id" => $id]), [], $rHeaders, []
            ), 
            "\Tatum\Model\GetAuction200Response"
        );
            
        return $result;
    }
    
    /**
     * Get the NFT auction fee
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function getAuctionFee(string $chain, string $contract_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var float $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/fee", ["chain" => $chain, "contractAddress" => $contract_address]), [], $rHeaders, []
            ), 
            "float"
        );
            
        return $result;
    }
    
    /**
     * Get the recipient of the NFT auction fee
     *
     * @param string $chain Blockchain to work with
     * @param string $contract_address Contract address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GetAuctionFeeRecipient200Response
     */
    public function getAuctionFeeRecipient(string $chain, string $contract_address) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\GetAuctionFeeRecipient200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/blockchain/auction/{chain}/{contractAddress}/recipient", ["chain" => $chain, "contractAddress" => $contract_address]), [], $rHeaders, []
            ), 
            "\Tatum\Model\GetAuctionFeeRecipient200Response"
        );
            
        return $result;
    }
    
}
