<?php

/**
 * Implementation of XRP API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * XRP API
 */
class XRPApi extends AbstractApi {
    /**
     * Modify XRP account
     *
     * @param \Tatum\Model\XrpAccountSettingsRequest $xrp_account_settings_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xrpAccountSettings(\Tatum\Model\XrpAccountSettingsRequest $xrp_account_settings_request) {
        $rPath = "/v3/xrp/account/settings";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xrp_account_settings_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Broadcast signed XRP transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function xrpBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rPath = "/v3/xrp/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Get Account Balance
     *
     * @param string $account Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccountBalance
     */
    public function xrpGetAccountBalance(string $account) {
        $rPath = "/v3/xrp/account/{account}/balance";
        $rPath = str_replace("{"."account"."}", S::toPathValue($account), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccountBalance"
        );
    }
    
    /**
     * Get Account info
     *
     * @param string $account Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccount
     */
    public function xrpGetAccountInfo(string $account) {
        $rPath = "/v3/xrp/account/{account}";
        $rPath = str_replace("{"."account"."}", S::toPathValue($account), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccount"
        );
    }
    
    /**
     * Get Account transactions
     *
     * @param string $account Address of XRP account.
     * @param float|null $min Ledger version to start scanning for transactions from.
     * @param string|null $marker Marker from the last paginated request. It is stringified JSON from previous response.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccountTx
     */
    public function xrpGetAccountTx(string $account, float $min = null, string $marker = null) {
        $rPath = "/v3/xrp/account/tx/{account}";
        $rPath = str_replace("{"."account"."}", S::toPathValue($account), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "min" => isset($min) ? S::toQueryValue($min) : null,
                
                    "marker" => isset($marker) ? S::toQueryValue($marker) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccountTx"
        );
    }
    
    /**
     * Get actual Blockchain fee
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpFee
     */
    public function xrpGetFee() {
        $rPath = "/v3/xrp/fee";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpFee"
        );
    }
    
    /**
     * Get XRP Blockchain Information
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpInfo
     */
    public function xrpGetLastClosedLedger() {
        $rPath = "/v3/xrp/info";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpInfo"
        );
    }
    
    /**
     * Get Ledger
     *
     * @param float $i Sequence of XRP ledger.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpLedger
     */
    public function xrpGetLedger(float $i) {
        if ($i < 0) {
            throw new IAE('Invalid value for "$i" when calling XRPApi.xrpGetLedger, must be bigger than or equal to 0.');
        }

        $rPath = "/v3/xrp/ledger/{i}";
        $rPath = str_replace("{"."i"."}", S::toPathValue($i), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpLedger"
        );
    }
    
    /**
     * Get XRP Transaction by hash
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpTx
     */
    public function xrpGetTransaction(string $hash) {
        if (strlen($hash) > 64) {
            throw new IAE('Invalid length for "$hash" when calling XRPApi.xrpGetTransaction, must be smaller than or equal to 64');
        }

        if (strlen($hash) < 64) {
            throw new IAE('Invalid length for "$hash" when calling XRPApi.xrpGetTransaction, must be bigger than or equal to 64');
        }

        $rPath = "/v3/xrp/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpTx"
        );
    }
    
    /**
     * Send XRP from address to address
     *
     * @param \Tatum\Model\XrpTransferBlockchainRequest $xrp_transfer_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xrpTransferBlockchain(\Tatum\Model\XrpTransferBlockchainRequest $xrp_transfer_blockchain_request) {
        $rPath = "/v3/xrp/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xrp_transfer_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Create / Update / Delete XRP trust line
     *
     * @param \Tatum\Model\XrpTrustLineBlockchainRequest $xrp_trust_line_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xrpTrustLineBlockchain(\Tatum\Model\XrpTrustLineBlockchainRequest $xrp_trust_line_blockchain_request) {
        $rPath = "/v3/xrp/trust";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xrp_trust_line_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Generate XRP account
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpWallet
     */
    public function xrpWallet() {
        $rPath = "/v3/xrp/account";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpWallet"
        );
    }
    
}
