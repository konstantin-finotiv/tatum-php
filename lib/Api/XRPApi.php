<?php

/**
 * Implementation of XRP API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @see       https://apidoc.tatum.io/tag/XRP
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\Serializer as S;

/**
 * XRP API
 */
class XRPApi extends AbstractApi {
    /**
     * Modify XRP account
     *
     * @param \Tatum\Model\AccountSettingsXrpBlockchain $account_settings_xrp_blockchain 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpAccountSettingsAccountSettingsXrpBlockchain(\Tatum\Model\AccountSettingsXrpBlockchain $account_settings_xrp_blockchain) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/account/settings#postAccountSettingsXrpBlockchain", [], $rHeaders, [], $account_settings_xrp_blockchain
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Modify XRP account
     *
     * @param \Tatum\Model\AccountSettingsXrpBlockchainKMS $account_settings_xrp_blockchain_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpAccountSettingsAccountSettingsXrpBlockchainKMS(\Tatum\Model\AccountSettingsXrpBlockchainKMS $account_settings_xrp_blockchain_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/account/settings#postAccountSettingsXrpBlockchainKMS", [], $rHeaders, [], $account_settings_xrp_blockchain_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Broadcast signed XRP transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function xrpBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\TransactionHash $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/broadcast", [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
            
        return $result;
    }
    
    /**
     * Get Account Balance
     *
     * @param string $account Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccountBalance
     */
    public function xrpGetAccountBalance(string $account) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpAccountBalance $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/xrp/account/{account}/balance", ["account" => $account]), [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccountBalance"
        );
            
        return $result;
    }
    
    /**
     * Get Account info
     *
     * @param string $account Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccount
     */
    public function xrpGetAccountInfo(string $account) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpAccount $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/xrp/account/{account}", ["account" => $account]), [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccount"
        );
            
        return $result;
    }
    
    /**
     * Get Account transactions
     *
     * @param string $account Address of XRP account.
     * @param float|null $min Ledger version to start scanning for transactions from.
     * @param string|null $marker Marker from the last paginated request. It is stringified JSON from previous response.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpAccountTx
     */
    public function xrpGetAccountTx(string $account, float $min = null, string $marker = null) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpAccountTx $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/xrp/account/tx/{account}", ["account" => $account]), [
                    "min" => isset($min) ? S::toQueryValue($min) : null,
                    "marker" => isset($marker) ? S::toQueryValue($marker) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\XrpAccountTx"
        );
            
        return $result;
    }
    
    /**
     * Get actual Blockchain fee
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpFee
     */
    public function xrpGetFee() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpFee $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/xrp/fee", [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpFee"
        );
            
        return $result;
    }
    
    /**
     * Get XRP Blockchain Information
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpInfo
     */
    public function xrpGetLastClosedLedger() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpInfo $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/xrp/info", [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpInfo"
        );
            
        return $result;
    }
    
    /**
     * Get Ledger
     *
     * @param float $i Sequence of XRP ledger.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpLedger
     */
    public function xrpGetLedger(float $i) {
        if ($i < 0) {
            throw new IAE('Invalid value for "$i" when calling XRPApi.xrpGetLedger, must be bigger than or equal to 0.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpLedger $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/xrp/ledger/{i}", ["i" => $i]), [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpLedger"
        );
            
        return $result;
    }
    
    /**
     * Get XRP Transaction by hash
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpTx
     */
    public function xrpGetTransaction(string $hash) {
        if (strlen($hash) > 64) {
            throw new IAE('Invalid length for "$hash" when calling XRPApi.xrpGetTransaction, must be smaller than or equal to 64');
        }

        if (strlen($hash) < 64) {
            throw new IAE('Invalid length for "$hash" when calling XRPApi.xrpGetTransaction, must be bigger than or equal to 64');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpTx $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", S::parse("/v3/xrp/transaction/{hash}", ["hash" => $hash]), [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpTx"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from address to address
     *
     * @param \Tatum\Model\TransferXrpBlockchain $transfer_xrp_blockchain 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTransactionTransferXrpBlockchain(\Tatum\Model\TransferXrpBlockchain $transfer_xrp_blockchain) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/transaction#postTransferXrpBlockchain", [], $rHeaders, [], $transfer_xrp_blockchain
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from address to address
     *
     * @param \Tatum\Model\TransferXrpBlockchainAsset $transfer_xrp_blockchain_asset 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTransactionTransferXrpBlockchainAsset(\Tatum\Model\TransferXrpBlockchainAsset $transfer_xrp_blockchain_asset) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/transaction#postTransferXrpBlockchainAsset", [], $rHeaders, [], $transfer_xrp_blockchain_asset
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from address to address
     *
     * @param \Tatum\Model\TransferXrpBlockchainAssetKMS $transfer_xrp_blockchain_asset_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTransactionTransferXrpBlockchainAssetKMS(\Tatum\Model\TransferXrpBlockchainAssetKMS $transfer_xrp_blockchain_asset_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/transaction#postTransferXrpBlockchainAssetKMS", [], $rHeaders, [], $transfer_xrp_blockchain_asset_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Send XRP from address to address
     *
     * @param \Tatum\Model\TransferXrpBlockchainKMS $transfer_xrp_blockchain_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTransactionTransferXrpBlockchainKMS(\Tatum\Model\TransferXrpBlockchainKMS $transfer_xrp_blockchain_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/transaction#postTransferXrpBlockchainKMS", [], $rHeaders, [], $transfer_xrp_blockchain_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create / Update / Delete XRP trust line
     *
     * @param \Tatum\Model\TrustLineXrpBlockchain $trust_line_xrp_blockchain 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTrustLineXrpBlockchain(\Tatum\Model\TrustLineXrpBlockchain $trust_line_xrp_blockchain) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/trust#postTrustLineXrpBlockchain", [], $rHeaders, [], $trust_line_xrp_blockchain
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Create / Update / Delete XRP trust line
     *
     * @param \Tatum\Model\TrustLineXrpBlockchainKMS $trust_line_xrp_blockchain_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response
     */
    public function xrpTrustLineXrpBlockchainKMS(\Tatum\Model\TrustLineXrpBlockchainKMS $trust_line_xrp_blockchain_kms) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        /** @var \Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", "/v3/xrp/trust#postTrustLineXrpBlockchainKMS", [], $rHeaders, [], $trust_line_xrp_blockchain_kms
            ), 
            "\Tatum\Model\BitcoinTransactionBtcTransactionFromAddress200Response"
        );
            
        return $result;
    }
    
    /**
     * Generate XRP account
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XrpWallet
     */
    public function xrpWallet() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        /** @var \Tatum\Model\XrpWallet $result */
        $result = $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", "/v3/xrp/account", [], $rHeaders, []
            ), 
            "\Tatum\Model\XrpWallet"
        );
            
        return $result;
    }
    
}
