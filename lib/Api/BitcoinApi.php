<?php

/**
 * Implementation of Bitcoin API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * Bitcoin API
 */
class BitcoinApi extends AbstractApi {
    /**
     * Broadcast a signed Bitcoin transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function btcBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rPath = "/v3/bitcoin/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Generate a Bitcoin address from the wallet's extended public key
     *
     * @param string $xpub Extended public key of a wallet.
     * @param float $index Derivation index of the desired address to be generated.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GeneratedAddressBtc
     */
    public function btcGenerateAddress(string $xpub, float $index) {
        if ($index < 0) {
            throw new IAE('Invalid value for "$index" when calling BitcoinApi.btcGenerateAddress, must be bigger than or equal to 0.');
        }

        $rPath = "/v3/bitcoin/address/{xpub}/{index}";
        $rPath = str_replace("{"."xpub"."}", S::toPathValue($xpub), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\GeneratedAddressBtc"
        );
    }
    
    /**
     * Generate the private key for a Bitcoin address
     *
     * @param \Tatum\Model\PrivKeyRequest $priv_key_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\PrivKey
     */
    public function btcGenerateAddressPrivateKey(\Tatum\Model\PrivKeyRequest $priv_key_request) {
        $rPath = "/v3/bitcoin/wallet/priv";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $priv_key_request
            ), 
            "\Tatum\Model\PrivKey"
        );
    }
    
    /**
     * Generate a Bitcoin wallet
     *
     * @param string|null $mnemonic Mnemonic to use for generation of extended public and private keys.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Wallet
     */
    public function btcGenerateWallet(string $mnemonic = null) {
        if (isset($mnemonic) && strlen($mnemonic) > 500) {
            throw new IAE('Invalid length for "$mnemonic" when calling BitcoinApi.btcGenerateWallet, must be smaller than or equal to 500');
        }

        $rPath = "/v3/bitcoin/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "mnemonic" => isset($mnemonic) ? S::toQueryValue($mnemonic) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\Wallet"
        );
    }
    
    /**
     * Get the balance of a Bitcoin address
     *
     * @param string $address The blockchain address to get the balance for
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcBasedBalance
     */
    public function btcGetBalanceOfAddress(string $address) {
        $rPath = "/v3/bitcoin/address/balance/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcBasedBalance"
        );
    }
    
    /**
     * Get a Bitcoin block by its hash or height
     *
     * @param string $hash Block hash or height.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcBlock
     */
    public function btcGetBlock(string $hash) {
        $rPath = "/v3/bitcoin/block/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcBlock"
        );
    }
    
    /**
     * Get Bitcoin blockchain information
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcInfo
     */
    public function btcGetBlockChainInfo() {
        $rPath = "/v3/bitcoin/info";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcInfo"
        );
    }
    
    /**
     * Get the hash of a Bitcoin block
     *
     * @param float $i The number of blocks preceding a particular block on a blockchain.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcBlockHash
     */
    public function btcGetBlockHash(float $i) {
        $rPath = "/v3/bitcoin/block/hash/{i}";
        $rPath = str_replace("{"."i"."}", S::toPathValue($i), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcBlockHash"
        );
    }
    
    /**
     * Get transactions from the Bitcoin mempool
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return string[]
     */
    public function btcGetMempool() {
        $rPath = "/v3/bitcoin/mempool";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "string[]"
        );
    }
    
    /**
     * Get a Bitcoin transaction by its hash
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTx
     */
    public function btcGetRawTransaction(string $hash) {
        $rPath = "/v3/bitcoin/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcTx"
        );
    }
    
    /**
     * Get all transactions for a Bitcoin address
     *
     * @param string $address Address
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain the next page of data.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTx[]
     */
    public function btcGetTxByAddress(string $address, float $page_size, float $offset = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling BitcoinApi.btcGetTxByAddress, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling BitcoinApi.btcGetTxByAddress, must be bigger than or equal to 1.');
        }

        $rPath = "/v3/bitcoin/transaction/address/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\BtcTx[]"
        );
    }
    
    /**
     * Get information about a transaction output (UTXO) in a Bitcoin transaction
     *
     * @param string $hash The transaction hash
     * @param float $index The index of the transaction output that you want to check for the UTXO
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcUTXO
     */
    public function btcGetUTXO(string $hash, float $index) {
        if (strlen($hash) > 64) {
            throw new IAE('Invalid length for "$hash" when calling BitcoinApi.btcGetUTXO, must be smaller than or equal to 64');
        }

        if (strlen($hash) < 64) {
            throw new IAE('Invalid length for "$hash" when calling BitcoinApi.btcGetUTXO, must be bigger than or equal to 64');
        }

        if ($index < 0) {
            throw new IAE('Invalid value for "$index" when calling BitcoinApi.btcGetUTXO, must be bigger than or equal to 0.');
        }

        $rPath = "/v3/bitcoin/utxo/{hash}/{index}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\BtcUTXO"
        );
    }
    
    /**
     * Connect to a Bitcoin node through an RPC driver
     *
     * @param \Tatum\Model\BtcRpcDriverRequest $btc_rpc_driver_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return object
     */
    public function btcRpcDriver(\Tatum\Model\BtcRpcDriverRequest $btc_rpc_driver_request) {
        $rPath = "/v3/bitcoin/node";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $btc_rpc_driver_request
            ), 
            "object"
        );
    }
    
    /**
     * Send BTC to Bitcoin addresses
     *
     * @param \Tatum\Model\BtcTransferBlockchainRequest $btc_transfer_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function btcTransferBlockchain(\Tatum\Model\BtcTransferBlockchainRequest $btc_transfer_blockchain_request) {
        $rPath = "/v3/bitcoin/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $btc_transfer_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
}
