<?php

/**
 * Implementation of XinFin API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * XinFin API
 */
class XinFinApi extends AbstractApi {
    /**
     * Invoke a method in a smart contract on XinFin
     *
     * @param \Tatum\Model\XdcBlockchainSmartContractInvocationRequest $xdc_blockchain_smart_contract_invocation_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EthBlockchainSmartContractInvocation200Response
     */
    public function xdcBlockchainSmartContractInvocation(\Tatum\Model\XdcBlockchainSmartContractInvocationRequest $xdc_blockchain_smart_contract_invocation_request) {
        $rPath = "/v3/xdc/smartcontract";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xdc_blockchain_smart_contract_invocation_request
            ), 
            "\Tatum\Model\EthBlockchainSmartContractInvocation200Response"
        );
    }
    
    /**
     * Send XDC / ERC20 from account to account
     *
     * @param \Tatum\Model\XdcBlockchainTransferRequest $xdc_blockchain_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xdcBlockchainTransfer(\Tatum\Model\XdcBlockchainTransferRequest $xdc_blockchain_transfer_request) {
        $rPath = "/v3/xdc/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xdc_blockchain_transfer_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Broadcast signed XDC transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function xdcBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rPath = "/v3/xdc/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Generate XDC account address from Extended public key
     *
     * @param string $xpub Extended public key of wallet.
     * @param float $index Derivation index of desired address to be generated.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XdcGenerateAddress200Response
     */
    public function xdcGenerateAddress(string $xpub, float $index) {
        $rPath = "/v3/xdc/address/{xpub}/{index}";
        $rPath = str_replace("{"."xpub"."}", S::toPathValue($xpub), $rPath);
        $rPath = str_replace("{"."index"."}", S::toPathValue($index), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XdcGenerateAddress200Response"
        );
    }
    
    /**
     * Generate XDC private key
     *
     * @param \Tatum\Model\PrivKeyRequest $priv_key_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\PrivKey
     */
    public function xdcGenerateAddressPrivateKey(\Tatum\Model\PrivKeyRequest $priv_key_request) {
        $rPath = "/v3/xdc/wallet/priv";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $priv_key_request
            ), 
            "\Tatum\Model\PrivKey"
        );
    }
    
    /**
     * Generate XDC wallet
     *
     * @param string|null $mnemonic Mnemonic to use for generation of extended public and private keys.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Wallet
     */
    public function xdcGenerateWallet(string $mnemonic = null) {
        if (isset($mnemonic) && strlen($mnemonic) > 500) {
            throw new IAE('Invalid length for "$mnemonic" when calling XinFinApi.xdcGenerateWallet, must be smaller than or equal to 500');
        }

        $rPath = "/v3/xdc/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "mnemonic" => isset($mnemonic) ? S::toQueryValue($mnemonic) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\Wallet"
        );
    }
    
    /**
     * Get XDC Account balance
     *
     * @param string $address Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XdcGetBalance200Response
     */
    public function xdcGetBalance(string $address) {
        $rPath = "/v3/xdc/account/balance/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XdcGetBalance200Response"
        );
    }
    
    /**
     * Get XDC block by hash
     *
     * @param string $hash Block hash or block number
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XdcBlock
     */
    public function xdcGetBlock(string $hash) {
        $rPath = "/v3/xdc/block/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XdcBlock"
        );
    }
    
    /**
     * Get current block number
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function xdcGetCurrentBlock() {
        $rPath = "/v3/xdc/block/current";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "float"
        );
    }
    
    /**
     * Get XDC Transaction
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XdcTx
     */
    public function xdcGetTransaction(string $hash) {
        $rPath = "/v3/xdc/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XdcTx"
        );
    }
    
    /**
     * Get count of outgoing XDC transactions
     *
     * @param string $address address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function xdcGetTransactionCount(string $address) {
        if (strlen($address) > 42) {
            throw new IAE('Invalid length for "$address" when calling XinFinApi.xdcGetTransactionCount, must be smaller than or equal to 42');
        }

        if (strlen($address) < 42) {
            throw new IAE('Invalid length for "$address" when calling XinFinApi.xdcGetTransactionCount, must be bigger than or equal to 42');
        }

        $rPath = "/v3/xdc/transaction/count/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "float"
        );
    }
    
    /**
     * Web3 HTTP driver
     *
     * @param string $x_api_key Tatum X-API-Key used for authorization.
     * @param object $body 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return object
     */
    public function xdcWeb3Driver(string $x_api_key, object $body) {
        $rPath = "/v3/xdc/web3/{xApiKey}";
        $rPath = str_replace("{"."xApiKey"."}", S::toPathValue($x_api_key), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $body
            ), 
            "object"
        );
    }
    
}
