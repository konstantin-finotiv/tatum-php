<?php

/**
 * Implementation of Solana API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * Solana API
 */
class SolanaApi extends AbstractApi {
    /**
     * Send SOL from account to account
     *
     * @param \Tatum\Model\SolanaBlockchainTransferRequest $solana_blockchain_transfer_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function solanaBlockchainTransfer(\Tatum\Model\SolanaBlockchainTransferRequest $solana_blockchain_transfer_request) {
        $rPath = "/v3/solana/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $solana_blockchain_transfer_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Broadcast and confirm signed Solana transaction
     *
     * @param \Tatum\Model\SolanaBroadcastConfirm $solana_broadcast_confirm 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SolanaTransactionHashWithConfirm
     */
    public function solanaBroadcastConfirm(\Tatum\Model\SolanaBroadcastConfirm $solana_broadcast_confirm) {
        $rPath = "/v3/solana/broadcast/confirm";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $solana_broadcast_confirm
            ), 
            "\Tatum\Model\SolanaTransactionHashWithConfirm"
        );
    }
    
    /**
     * Generate Solana wallet
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SolanaWallet
     */
    public function solanaGenerateWallet() {
        $rPath = "/v3/solana/wallet";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\SolanaWallet"
        );
    }
    
    /**
     * Get Solana Account balance
     *
     * @param string $address Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SolBalance
     */
    public function solanaGetBalance(string $address) {
        $rPath = "/v3/solana/account/balance/{address}";
        $rPath = str_replace("{"."address"."}", S::toPathValue($address), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\SolBalance"
        );
    }
    
    /**
     * Get Solana block by number
     *
     * @param float $height Block number
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SolanaBlock
     */
    public function solanaGetBlock(float $height) {
        $rPath = "/v3/solana/block/{height}";
        $rPath = str_replace("{"."height"."}", S::toPathValue($height), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\SolanaBlock"
        );
    }
    
    /**
     * Get current block number
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function solanaGetCurrentBlock() {
        $rPath = "/v3/solana/block/current";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "float"
        );
    }
    
    /**
     * Get Solana Transaction
     *
     * @param string $hash Transaction hash
     * @param string|null $commitment Commitment of the transaction. If not defined, all transactions are being scanned.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SolanaTx
     */
    public function solanaGetTransaction(string $hash, string $commitment = null) {
        $rPath = "/v3/solana/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "commitment" => isset($commitment) ? S::toQueryValue($commitment) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\SolanaTx"
        );
    }
    
    /**
     * JSON RPC HTTP driver
     *
     * @param string $x_api_key Tatum X-API-Key used for authorization.
     * @param object $body 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return object
     */
    public function solanaWeb3Driver(string $x_api_key, object $body) {
        $rPath = "/v3/solana/web3/{xApiKey}";
        $rPath = str_replace("{"."xApiKey"."}", S::toPathValue($x_api_key), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $body
            ), 
            "object"
        );
    }
    
}
