<?php

/**
 * Implementation of NotificationSubscriptions API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * NotificationSubscriptions API
 */
class NotificationSubscriptionsApi extends AbstractApi {
    /**
     * Create a subscription
     *
     * @param \Tatum\Model\CreateSubscriptionRequest $create_subscription_request 
     * @param string|'ethereum-sepolia' $testnet_type Type of Ethereum testnet. Defaults to ethereum-sepolia.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Id
     */
    public function createSubscription(\Tatum\Model\CreateSubscriptionRequest $create_subscription_request, string $testnet_type = 'ethereum-sepolia') {
        $rPath = "/v3/subscription";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [
                    "testnetType" => S::toQueryValue($testnet_type),
                ], $rHeaders, [], $create_subscription_request
            ), 
            "\Tatum\Model\Id"
        );
    }
    
    /**
     * Cancel existing subscription
     *
     * @param string $id Subscription ID
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function deleteSubscription(string $id) {
        $rPath = "/v3/subscription/{id}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "DELETE", $rPath, [], $rHeaders, []
            )
        );
    }
    
    /**
     * Disable HMAC webhook digest
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function disableWebHookHmac() {
        $rPath = "/v3/subscription";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "DELETE", $rPath, [], $rHeaders, []
            )
        );
    }
    
    /**
     * Enable HMAC webhook digest
     *
     * @param \Tatum\Model\HmacWebHook $hmac_web_hook 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function enableWebHookHmac(\Tatum\Model\HmacWebHook $hmac_web_hook) {
        $rPath = "/v3/subscription";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", $rPath, [], $rHeaders, [], $hmac_web_hook
            )
        );
    }
    
    /**
     * List all executed webhooks
     *
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain the next page of data.
     * @param string|null $direction Direction of sorting
     * @param bool|null $failed Flag indicating whether the webhook was successful or not
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\WebHook[]
     */
    public function getAllWebhooks(float $page_size, float $offset = null, string $direction = null, bool $failed = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getAllWebhooks, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getAllWebhooks, must be bigger than or equal to 1.');
        }

        $rPath = "/v3/subscription/webhook";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                
                    "direction" => isset($direction) ? S::toQueryValue($direction) : null,
                
                    "failed" => isset($failed) ? S::toQueryValue($failed) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\WebHook[]"
        );
    }
    
    /**
     * Count of found entities for get webhook request
     *
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain the next page of data.
     * @param string|null $direction Direction of sorting
     * @param bool|null $failed Flag indicating whether the webhook was successful or not
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EntitiesCount
     */
    public function getAllWebhooksCount(float $page_size, float $offset = null, string $direction = null, bool $failed = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getAllWebhooksCount, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getAllWebhooksCount, must be bigger than or equal to 1.');
        }

        $rPath = "/v3/subscription/webhook/count";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                
                    "direction" => isset($direction) ? S::toQueryValue($direction) : null,
                
                    "failed" => isset($failed) ? S::toQueryValue($failed) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\EntitiesCount"
        );
    }
    
    /**
     * Obtain report for subscription
     *
     * @param string $id Subscription ID
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\GetSubscriptionReport200Response
     */
    public function getSubscriptionReport(string $id) {
        $rPath = "/v3/subscription/report/{id}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\GetSubscriptionReport200Response"
        );
    }
    
    /**
     * List all active subscriptions
     *
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain next page of the data.
     * @param string|null $address Value for filtering by address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\Subscription[]
     */
    public function getSubscriptions(float $page_size, float $offset = null, string $address = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getSubscriptions, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getSubscriptions, must be bigger than or equal to 1.');
        }

        $rPath = "/v3/subscription";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                
                    "address" => isset($address) ? S::toQueryValue($address) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\Subscription[]"
        );
    }
    
    /**
     * Count of found entities for get webhook request
     *
     * @param float $page_size Max number of items per page is 50.
     * @param float|null $offset Offset to obtain next page of the data.
     * @param string|null $address Value for filtering by address
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\EntitiesCount
     */
    public function getSubscriptionsCount(float $page_size, float $offset = null, string $address = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getSubscriptionsCount, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling NotificationSubscriptionsApi.getSubscriptionsCount, must be bigger than or equal to 1.');
        }

        $rPath = "/v3/subscription/count";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                
                    "address" => isset($address) ? S::toQueryValue($address) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\EntitiesCount"
        );
    }
    
}
