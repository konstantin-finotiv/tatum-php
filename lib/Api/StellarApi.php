<?php

/**
 * Implementation of Stellar API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * Stellar API
 */
class StellarApi extends AbstractApi {
    /**
     * Broadcast signed XLM transaction
     *
     * @param \Tatum\Model\BroadcastKMS $broadcast_kms 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\TransactionHash
     */
    public function xlmBroadcast(\Tatum\Model\BroadcastKMS $broadcast_kms) {
        $rPath = "/v3/xlm/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_kms
            ), 
            "\Tatum\Model\TransactionHash"
        );
    }
    
    /**
     * Get XLM Account info
     *
     * @param string $account Account address you want to get balance of
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmAccount
     */
    public function xlmGetAccountInfo(string $account) {
        $rPath = "/v3/xlm/account/{account}";
        $rPath = str_replace("{"."account"."}", S::toPathValue($account), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmAccount"
        );
    }
    
    /**
     * Get XLM Account transactions
     *
     * @param string $account Address of XLM account.
     * @param string|null $pagination Paging token from the last transaction gives you next page
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmTx[]
     */
    public function xlmGetAccountTx(string $account, string $pagination = null) {
        $rPath = "/v3/xlm/account/tx/{account}";
        $rPath = str_replace("{"."account"."}", S::toPathValue($account), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "pagination" => isset($pagination) ? S::toQueryValue($pagination) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\XlmTx[]"
        );
    }
    
    /**
     * Get actual XLM fee
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function xlmGetFee() {
        $rPath = "/v3/xlm/fee";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "float"
        );
    }
    
    /**
     * Get XLM Blockchain Information
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmLedger
     */
    public function xlmGetLastClosedLedger() {
        $rPath = "/v3/xlm/info";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmLedger"
        );
    }
    
    /**
     * Get XLM Blockchain Ledger by sequence
     *
     * @param string $sequence Sequence of the ledger.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmLedger
     */
    public function xlmGetLedger(string $sequence) {
        $rPath = "/v3/xlm/ledger/{sequence}";
        $rPath = str_replace("{"."sequence"."}", S::toPathValue($sequence), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmLedger"
        );
    }
    
    /**
     * Get XLM Blockchain Transactions in Ledger
     *
     * @param string $sequence Sequence of the ledger.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmTx[]
     */
    public function xlmGetLedgerTx(string $sequence) {
        $rPath = "/v3/xlm/ledger/{sequence}/transaction";
        $rPath = str_replace("{"."sequence"."}", S::toPathValue($sequence), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmTx[]"
        );
    }
    
    /**
     * Get XLM Transaction by hash
     *
     * @param string $hash Transaction hash
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmTx
     */
    public function xlmGetTransaction(string $hash) {
        $rPath = "/v3/xlm/transaction/{hash}";
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmTx"
        );
    }
    
    /**
     * Send XLM from address to address
     *
     * @param \Tatum\Model\XlmTransferBlockchainRequest $xlm_transfer_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xlmTransferBlockchain(\Tatum\Model\XlmTransferBlockchainRequest $xlm_transfer_blockchain_request) {
        $rPath = "/v3/xlm/transaction";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xlm_transfer_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Create / Update / Delete XLM trust line
     *
     * @param \Tatum\Model\XlmTrustLineBlockchainRequest $xlm_trust_line_blockchain_request 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BtcTransferBlockchain200Response
     */
    public function xlmTrustLineBlockchain(\Tatum\Model\XlmTrustLineBlockchainRequest $xlm_trust_line_blockchain_request) {
        $rPath = "/v3/xlm/trust";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $xlm_trust_line_blockchain_request
            ), 
            "\Tatum\Model\BtcTransferBlockchain200Response"
        );
    }
    
    /**
     * Generate XLM account
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\XlmWallet
     */
    public function xlmWallet() {
        $rPath = "/v3/xlm/account";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\XlmWallet"
        );
    }
    
}
