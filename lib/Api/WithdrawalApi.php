<?php

/**
 * Implementation of Withdrawal API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * Withdrawal API
 */
class WithdrawalApi extends AbstractApi {
    /**
     * Broadcast signed transaction and complete withdrawal
     *
     * @param \Tatum\Model\BroadcastWithdrawal $broadcast_withdrawal 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\BroadcastResponse
     */
    public function broadcastBlockchainTransaction(\Tatum\Model\BroadcastWithdrawal $broadcast_withdrawal) {
        $rPath = "/v3/offchain/withdrawal/broadcast";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $broadcast_withdrawal
            ), 
            "\Tatum\Model\BroadcastResponse"
        );
    }
    
    /**
     * Cancel withdrawal
     *
     * @param string $id ID of created withdrawal
     * @param bool|true $revert Defines whether fee should be reverted to account balance as well as amount. Defaults to true. Revert true would be typically used when withdrawal was not broadcast to blockchain. False is used usually for Ethereum based currencies when gas was consumed but transaction was reverted.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function cancelInProgressWithdrawal(string $id, bool $revert = true) {
        if (strlen($id) > 24) {
            throw new IAE('Invalid length for "$id" when calling WithdrawalApi.cancelInProgressWithdrawal, must be smaller than or equal to 24');
        }

        if (strlen($id) < 24) {
            throw new IAE('Invalid length for "$id" when calling WithdrawalApi.cancelInProgressWithdrawal, must be bigger than or equal to 24');
        }

        $rPath = "/v3/offchain/withdrawal/{id}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "DELETE", $rPath, [
                    "revert" => S::toQueryValue($revert),
                ], $rHeaders, []
            )
        );
    }
    
    /**
     * Complete withdrawal
     *
     * @param string $id ID of created withdrawal
     * @param string $tx_id Blockchain transaction ID of created withdrawal
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return void
     */
    public function completeWithdrawal(string $id, string $tx_id) {
        if (strlen($id) > 50) {
            throw new IAE('Invalid length for "$id" when calling WithdrawalApi.completeWithdrawal, must be smaller than or equal to 50');
        }

        if (strlen($id) < 10) {
            throw new IAE('Invalid length for "$id" when calling WithdrawalApi.completeWithdrawal, must be bigger than or equal to 10');
        }

        if (strlen($tx_id) > 80) {
            throw new IAE('Invalid length for "$tx_id" when calling WithdrawalApi.completeWithdrawal, must be smaller than or equal to 80');
        }

        if (strlen($tx_id) < 10) {
            throw new IAE('Invalid length for "$tx_id" when calling WithdrawalApi.completeWithdrawal, must be bigger than or equal to 10');
        }

        $rPath = "/v3/offchain/withdrawal/{id}/{txId}";
        $rPath = str_replace("{"."id"."}", S::toPathValue($id), $rPath);
        $rPath = str_replace("{"."txId"."}", S::toPathValue($tx_id), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        $this->exec(
            S::createRequest(
                $this->_caller->config(), "PUT", $rPath, [], $rHeaders, []
            )
        );
    }
    
    /**
     * Get withdrawals
     *
     * @param float $page_size Max number of items per page is 50.
     * @param string|null $currency Currency of the withdrawal
     * @param string|null $status Status of the withdrawal
     * @param float|null $offset Offset to obtain next page of the data.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\WithdrawalObject[]
     */
    public function getWithdrawals(float $page_size, string $currency = null, string $status = null, float $offset = null) {
        if ($page_size > 50) {
            throw new IAE('Invalid value for "$page_size" when calling WithdrawalApi.getWithdrawals, must be smaller than or equal to 50');
        }

        if ($page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling WithdrawalApi.getWithdrawals, must be bigger than or equal to 1.');
        }

        if (isset($currency) && strlen($currency) > 30) {
            throw new IAE('Invalid length for "$currency" when calling WithdrawalApi.getWithdrawals, must be smaller than or equal to 30');
        }

        if (isset($currency) && strlen($currency) < 2) {
            throw new IAE('Invalid length for "$currency" when calling WithdrawalApi.getWithdrawals, must be bigger than or equal to 2');
        }

        $rPath = "/v3/offchain/withdrawal";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [
                    "currency" => isset($currency) ? S::toQueryValue($currency) : null,
                
                    "status" => isset($status) ? S::toQueryValue($status) : null,
                
                    "pageSize" => S::toQueryValue($page_size),
                
                    "offset" => isset($offset) ? S::toQueryValue($offset) : null,
                ], $rHeaders, []
            ), 
            "\Tatum\Model\WithdrawalObject[]"
        );
    }
    
    /**
     * Store withdrawal
     *
     * @param \Tatum\Model\Withdrawal $withdrawal 
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\WithdrawalResponse
     */
    public function storeWithdrawal(\Tatum\Model\Withdrawal $withdrawal) {
        $rPath = "/v3/offchain/withdrawal";
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "POST", $rPath, [], $rHeaders, [], $withdrawal
            ), 
            "\Tatum\Model\WithdrawalResponse"
        );
    }
    
}
