<?php

/**
 * Implementation of KeyManagementSystem API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException;
use Tatum\Sdk\ApiException;
use Tatum\Sdk\ObjectSerializer;

/**
 * KeyManagementSystem API
 */
class KeyManagementSystemApi extends AbstractApi {
    /**
     * Complete pending transaction to sign
     *
     * @param string $id ID of pending transaction
     * @param string $tx_id transaction ID of blockchain transaction
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * 
     * @return void
     */
    public function completePendingSignature(string $id, string $tx_id) { 
        if (strlen($id) > 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.completePendingSignature, must be smaller than or equal to 24');
        }
        if (strlen($id) < 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.completePendingSignature, must be bigger than or equal to 24');
        }

        if (strlen($tx_id) > 80) {
            throw new InvalidArgumentException('Invalid length for "$tx_id" when calling KeyManagementSystemApi.completePendingSignature, must be smaller than or equal to 80');
        }
        if (strlen($tx_id) < 10) {
            throw new InvalidArgumentException('Invalid length for "$tx_id" when calling KeyManagementSystemApi.completePendingSignature, must be bigger than or equal to 10');
        }

        // Resource path
        $resourcePath = "/v3/kms/{id}/{txId}";
        $resourcePath = str_replace("{" . "id" . "}", ObjectSerializer::toPathValue($id), $resourcePath);
        $resourcePath = str_replace("{" . "txId" . "}", ObjectSerializer::toPathValue($tx_id), $resourcePath);

        // Prepare request headers
        $headers = [
            "User-Agent" => $this->_caller->config()->getUserAgent()
        ];

        // Set the API key
        if ($this->_caller->config()->getApiKey()) {
            $headers["x-api-key"] = $this->_caller->config()->getApiKey();
        }

        // Accept and content-type
        $headers = array_merge(
            $headers, 
            $this->_headerSelector->selectHeaders(["application/json"], [])
        );

        // Prepare the query parameters
        $queryParams = [];

        // Free Testnet call
        if (!isset($headers["x-api-key"]) && !$this->_caller->config()->isMainNet()) {
            $queryParams["type"] = "testnet";
        }

        try {
            $this->_makeRequest(
                ObjectSerializer::createRequest(
                    "PUT",
                    $this->_caller->config()->getHost() . $resourcePath,
                    $queryParams,
                    array_merge([], $headers),
                    [],
                    ""
                ),
                ""
            );
        } catch (ApiException $e) {
            throw $e;
        }
        
    }
    
    /**
     * Delete transaction
     *
     * @param string $id ID of transaction
     * @param bool|true $revert Defines whether fee should be reverted to account balance as well as amount. Defaults to true. Revert true would be typically used when withdrawal was not broadcast to blockchain. False is used usually for Ethereum ERC20 based currencies.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * 
     * @return void
     */
    public function deletePendingTransactionToSign(string $id, bool $revert = true) { 
        if (strlen($id) > 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.deletePendingTransactionToSign, must be smaller than or equal to 24');
        }
        if (strlen($id) < 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.deletePendingTransactionToSign, must be bigger than or equal to 24');
        }

        // Resource path
        $resourcePath = "/v3/kms/{id}";
        $resourcePath = str_replace("{" . "id" . "}", ObjectSerializer::toPathValue($id), $resourcePath);

        // Prepare request headers
        $headers = [
            "User-Agent" => $this->_caller->config()->getUserAgent()
        ];

        // Set the API key
        if ($this->_caller->config()->getApiKey()) {
            $headers["x-api-key"] = $this->_caller->config()->getApiKey();
        }

        // Accept and content-type
        $headers = array_merge(
            $headers, 
            $this->_headerSelector->selectHeaders(["application/json"], [])
        );

        // Prepare the query parameters
        $queryParams = [
                "revert" => ObjectSerializer::toQueryValue($revert),
            ];

        // Free Testnet call
        if (!isset($headers["x-api-key"]) && !$this->_caller->config()->isMainNet()) {
            $queryParams["type"] = "testnet";
        }

        try {
            $this->_makeRequest(
                ObjectSerializer::createRequest(
                    "DELETE",
                    $this->_caller->config()->getHost() . $resourcePath,
                    $queryParams,
                    array_merge([], $headers),
                    [],
                    ""
                ),
                ""
            );
        } catch (ApiException $e) {
            throw $e;
        }
        
    }
    
    /**
     * Get transaction details
     *
     * @param string $id ID of transaction
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * 
     * @return \Tatum\Model\PendingTransaction
     */
    public function getPendingTransactionToSign(string $id) { 
        if (strlen($id) > 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.getPendingTransactionToSign, must be smaller than or equal to 24');
        }
        if (strlen($id) < 24) {
            throw new InvalidArgumentException('Invalid length for "$id" when calling KeyManagementSystemApi.getPendingTransactionToSign, must be bigger than or equal to 24');
        }

        // Resource path
        $resourcePath = "/v3/kms/{id}";
        $resourcePath = str_replace("{" . "id" . "}", ObjectSerializer::toPathValue($id), $resourcePath);

        // Prepare request headers
        $headers = [
            "User-Agent" => $this->_caller->config()->getUserAgent()
        ];

        // Set the API key
        if ($this->_caller->config()->getApiKey()) {
            $headers["x-api-key"] = $this->_caller->config()->getApiKey();
        }

        // Accept and content-type
        $headers = array_merge(
            $headers, 
            $this->_headerSelector->selectHeaders(["application/json"], [])
        );

        // Prepare the query parameters
        $queryParams = [];

        // Free Testnet call
        if (!isset($headers["x-api-key"]) && !$this->_caller->config()->isMainNet()) {
            $queryParams["type"] = "testnet";
        }

        try {
            /** @var \Tatum\Model\PendingTransaction $model */ $model = $this->_makeRequest(
                ObjectSerializer::createRequest(
                    "GET",
                    $this->_caller->config()->getHost() . $resourcePath,
                    $queryParams,
                    array_merge([], $headers),
                    [],
                    ""
                ),
                "\Tatum\Model\PendingTransaction"
            );
        } catch (ApiException $e) {
            $e->setResponseObject(
                ObjectSerializer::deserialize(
                    $e->getResponseBody() ?? "",
                    "\Tatum\Model\PendingTransaction",
                    $this->_caller->config()->getTempFolderPath(),
                    $e->getResponseHeaders()
                )
            );
            throw $e;
        }
        return $model;
    }
    
    /**
     * Get pending transactions to sign
     *
     * @param string $chain Blockchain to get pending transactions for.
     * @param string|null $signatures Signature IDs of the KMS which invokes this endpoint. If multiple, they should be separated by comma.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * 
     * @return \Tatum\Model\PendingTransaction[]
     */
    public function getPendingTransactionsToSign(string $chain, string $signatures = null) { 
        if (strlen($chain) > 24) {
            throw new InvalidArgumentException('Invalid length for "$chain" when calling KeyManagementSystemApi.getPendingTransactionsToSign, must be smaller than or equal to 24');
        }
        if (strlen($chain) < 24) {
            throw new InvalidArgumentException('Invalid length for "$chain" when calling KeyManagementSystemApi.getPendingTransactionsToSign, must be bigger than or equal to 24');
        }

        // Resource path
        $resourcePath = "/v3/kms/pending/{chain}";
        $resourcePath = str_replace("{" . "chain" . "}", ObjectSerializer::toPathValue($chain), $resourcePath);

        // Prepare request headers
        $headers = [
            "User-Agent" => $this->_caller->config()->getUserAgent()
        ];

        // Set the API key
        if ($this->_caller->config()->getApiKey()) {
            $headers["x-api-key"] = $this->_caller->config()->getApiKey();
        }

        // Accept and content-type
        $headers = array_merge(
            $headers, 
            $this->_headerSelector->selectHeaders(["application/json"], [])
        );

        // Prepare the query parameters
        $queryParams = [
                "signatures" => isset($signatures) ? ObjectSerializer::toQueryValue($signatures) : null,
            ];

        // Free Testnet call
        if (!isset($headers["x-api-key"]) && !$this->_caller->config()->isMainNet()) {
            $queryParams["type"] = "testnet";
        }

        try {
            /** @var \Tatum\Model\PendingTransaction[] $model */ $model = $this->_makeRequest(
                ObjectSerializer::createRequest(
                    "GET",
                    $this->_caller->config()->getHost() . $resourcePath,
                    $queryParams,
                    array_merge([], $headers),
                    [],
                    ""
                ),
                "\Tatum\Model\PendingTransaction[]"
            );
        } catch (ApiException $e) {
            $e->setResponseObject(
                ObjectSerializer::deserialize(
                    $e->getResponseBody() ?? "",
                    "\Tatum\Model\PendingTransaction[]",
                    $this->_caller->config()->getTempFolderPath(),
                    $e->getResponseHeaders()
                )
            );
            throw $e;
        }
        return $model;
    }
    
    /**
     * Get pending transactions to sign
     *
     * @param string $chain Blockchain to get pending transactions for.
     * @param \Tatum\Model\KmsSignatureIds|null $kms_signature_ids Signature IDs of the KMS which invokes this endpoint.
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws InvalidArgumentException
     * 
     * @return \Tatum\Model\PendingTransaction[]
     */
    public function receivePendingTransactionsToSign(string $chain, \Tatum\Model\KmsSignatureIds $kms_signature_ids = null) { 
        if (strlen($chain) > 24) {
            throw new InvalidArgumentException('Invalid length for "$chain" when calling KeyManagementSystemApi.receivePendingTransactionsToSign, must be smaller than or equal to 24');
        }
        if (strlen($chain) < 24) {
            throw new InvalidArgumentException('Invalid length for "$chain" when calling KeyManagementSystemApi.receivePendingTransactionsToSign, must be bigger than or equal to 24');
        }

        // Resource path
        $resourcePath = "/v3/kms/pending/{chain}";
        $resourcePath = str_replace("{" . "chain" . "}", ObjectSerializer::toPathValue($chain), $resourcePath);

        // Prepare request headers
        $headers = [
            "User-Agent" => $this->_caller->config()->getUserAgent()
        ];

        // Set the API key
        if ($this->_caller->config()->getApiKey()) {
            $headers["x-api-key"] = $this->_caller->config()->getApiKey();
        }

        // Accept and content-type
        $headers = array_merge(
            $headers, 
            $this->_headerSelector->selectHeaders(["application/json"], ["application/json"])
        );

        // Prepare the query parameters
        $queryParams = [];

        // Free Testnet call
        if (!isset($headers["x-api-key"]) && !$this->_caller->config()->isMainNet()) {
            $queryParams["type"] = "testnet";
        }

        try {
            /** @var \Tatum\Model\PendingTransaction[] $model */ $model = $this->_makeRequest(
                ObjectSerializer::createRequest(
                    "POST",
                    $this->_caller->config()->getHost() . $resourcePath,
                    $queryParams,
                    array_merge([], $headers),
                    [],
                    $kms_signature_ids
                ),
                "\Tatum\Model\PendingTransaction[]"
            );
        } catch (ApiException $e) {
            $e->setResponseObject(
                ObjectSerializer::deserialize(
                    $e->getResponseBody() ?? "",
                    "\Tatum\Model\PendingTransaction[]",
                    $this->_caller->config()->getTempFolderPath(),
                    $e->getResponseHeaders()
                )
            );
            throw $e;
        }
        return $model;
    }
    
}
