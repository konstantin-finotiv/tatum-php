<?php

/**
 * Implementation of BlockchainUtils API
 *
 * @copyright (c) 2022-2023 tatum.io
 * @license   MIT
 * @package   Tatum
 * @author    Mark Jivko
 * @link      https://tatum.io/
 *
 * NOTE: This class is auto generated by tatum.io
 * Do not edit this file manually
 */

namespace Tatum\Api;

use InvalidArgumentException as IAE;
use Tatum\Sdk\ApiException as APIE;
use Tatum\Sdk\Serializer as S;

/**
 * BlockchainUtils API
 */
class BlockchainUtilsApi extends AbstractApi {
    /**
     * Estimate the block height for a future point in time
     *
     * @param string $chain The blockchain to work with
     * @param string $date The date and time in the ISO 8601 standard format
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return float
     */
    public function getAuctionEstimatedTime(string $chain, string $date) {
        $rPath = "/v3/blockchain/auction/time/{chain}/{date}";
        $rPath = str_replace("{"."chain"."}", S::toPathValue($chain), $rPath);
        $rPath = str_replace("{"."date"."}", S::toPathValue($date), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "float"
        );
    }
    
    /**
     * Get the blockchain address of a smart contract by the deployment transaction ID
     *
     * @param string $chain The blockchain to work with
     * @param string $hash The ID (hash) of the deployment transaction
     * @throws \Tatum\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Tatum\Model\SCGetContractAddress200Response
     */
    public function sCGetContractAddress(string $chain, string $hash) {
        $rPath = "/v3/blockchain/sc/address/{chain}/{hash}";
        $rPath = str_replace("{"."chain"."}", S::toPathValue($chain), $rPath);
        $rPath = str_replace("{"."hash"."}", S::toPathValue($hash), $rPath);
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        return $this->exec(
            S::createRequest(
                $this->_caller->config(), "GET", $rPath, [], $rHeaders, []
            ), 
            "\Tatum\Model\SCGetContractAddress200Response"
        );
    }
    
}
